a <- exons[n==1]
length(a)
head(a)
b <- unlist(a$gene_id)
head(b)
c <- a[b=='6007']
c
width(c)
max(end(c))-min(start(c))
s <- seq1[[1]]
s
name.yaml <- 'evaluate_primer.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'gplots',
'Biostrings', 'GenomicRanges', 'BSgenome', 'RoCA', 'awsomics');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path = 'figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
debug <- FALSE;
prims <- ImportTable(DownloadFile(yml$input$primer, path.input), rownames = FALSE);
seqns <- prims[, 2];
names(seqns) <- prims[, 1];
seqns <- DNAStringSet(seqns);
reads <- ImportVector(DownloadFile(yml$input$read, path.input));
reads <- DNAStringSet(reads);
targt <- ImportTable(DownloadFile(yml$input$target, path.input), rownames = TRUE);
targt <- GRanges(targt[, 1], IRanges(targt[, 2], targt[, 3]), name=rownames(targt));
names(targt) <- targt$name;
saveRDS(prims, paste(path.input, 'primer.rds', sep='/'));
saveRDS(reads, paste(path.input, 'read.rds', sep='/'));
saveRDS(targt, paste(path.input, 'target.rds', sep='/'));
genom <- getBSgenome(prms$genome$package);
chrnm <- seqnames(genom)[seqlengths(genom) >= prms$genome$length];
genom <- DNAStringSet(lapply(chrnm, function(nm) genom[[nm]]));
names(genom) <- chrnm;
s <- seqns[[1]]
s
matchPattern(s, reads[[1]], 3, 0, TRUE)
a <- lapply(reads[1:10], function(x) matchPattern(s, x, 3, 0, TRUE))
system.time(a <- lapply(reads[1:10], function(x) matchPattern(s, x, 3, 0, TRUE)))
system.time(a <- lapply(reads[1:100], function(x) matchPattern(s, x, 3, 0, TRUE)))
system.time(a <- lapply(reads[1:1000], function(x) matchPattern(s, x, 3, 0, TRUE)))
2*1000
system.time(a <- lapply(reads[1:10000], function(x) matchPattern(s, x, 3, 0, TRUE)))
length(reads)
l <- seqlengths(reads)
summary(l)
??ascii
charToRaw('!')
x <- 'abc'
y <- 'xyz'
charToRaw(c(x, y))
lapply(c(x, y), charToRaw)
DEGandMore::DeMethods()
g2s <- readRDS("/Users/zhangz/Documents/RoCA/data/gex/NCI60/group2sample.rds")
length(g2s)
names(g2s)
str(g2s)
setwd('~/Documents/RoCA/data/gex/NCI60/')
dir()
expr <- readRDS('~/Documents/RoCA/data/gex/NCI60/expr.rds')
dim(expr)
expr[1:2, ]
name.yaml <- 'differential_expression.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
paired  <- prms$paired;
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
paired
dim(anno)
dim(expr)
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
if (is.null(paired))                         paired  <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired  <- FALSE;
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
paired  <- prms$paired;
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
if (is.null(paired))                         paired  <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired  <- FALSE;
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
# Re-process gene expression matrix
e1   <- expr[, g1.ind, drop=FALSE];
e2   <- expr[, g2.ind, drop=FALSE];
e1.2 <- cbind(e1, e2);
pctl <- apply(e1.2, 2, function(e) 100*rank(e)/length(e)); # percentile
norm <- NormQQ(e1.2);
inputs$expr <- e1.2;
inputs$anno <- anno[rownames(e1.2), ];
if (!prms$processing$logged)     inputs$logged     <- e1.2 <- log2(e1.2+1);
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
paired  <- prms$paired;
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
if (is.null(paired))                         paired  <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired  <- FALSE;
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
# Re-process gene expression matrix
e1   <- expr[, g1.ind, drop=FALSE];
e2   <- expr[, g2.ind, drop=FALSE];
e1.2 <- cbind(e1, e2);
inputs <- list(anno=anno, expr=expr);
inputs$parameters <- prms;
res <- list(inputs=inputs);  # Result set
deg.sub <- paste(c('Higher', 'Lower'), 'in', g2.name, sep='_');
# parameters of differential expression
deg.method <- prms$deg$method;
cutoff.l2r <- prms$deg$cutoff.l2r;
cutoff.p   <- prms$deg$cutoff.p;
cutoff.fdr <- prms$deg$cutoff.fdr;
num.top    <- prms$deg$num.top;
nperm      <- prms$deg$nperm;
means <- cbind(rowMeans(e1.2[, g1.ind]), rowMeans(e1.2[, g2.ind]));
colnames(means) <- c(g1.name, g2.name);
l2r <- means[,2]-means[,1];
l2r[is.na(l2r)] <- 0;
fc <- exp(l2r*log(2));
mn <- cbind(means, l2r, fc);
colnames(mn) <- c(paste('Mean', names(grps), sep='_'), 'LogFC', 'FoldChange');
means <- cbind(rowMeans(e1.2[, g1.ind]), rowMeans(e1.2[, g2.ind]));
dim(means)
head(means)
colnames(means) <- c(g1.name, g2.name);
de <- DeWrapper(mtrx=expr, grps=grps, mthd=deg.method, paired=paired);
dim(de)
names(de)
DeMethods()
de <- DeWrapper(mtrx=expr, grps=grps, mthd='DeRankP', paired=paired);
args(DeRankP)
grps
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd='DeRankP', paired=paired);
grps[1:2]
dim(expr)
de <- DeWrapper(mtrx=e1.2, grps=grps[1:2], mthd='DeRankP', paired=paired);
de <- DeRankP(e1.2, grps[1:2])
head(e1.2)
grps[1:2]
de <- DeRankProd(e1.2, grps[1:2])
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=deg.method, paired=paired);
dim(de$results)
dim(de$results$stat)
head(de$results$stat)
de                <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=deg.method, paired=paired);
stat              <- de$results$stat[, 1:6];
stat.table        <- cbind(anno[rownames(stat), ], stat);
stat.formatted    <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
stat.formatted$ID <- AddHref(stat.formatted$ID, UrlEntrezGene(stat.formatted$ID));
CreateDatatable(stat.formatted, fn = paste(path.tbl, 'all_genes.html', sep='/'),
rownames = FALSE, caption = "Differential expression of all genes");
anno[1:2, ]
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=deg.method, paired=paired);
stat <- de$results$stat[, 1:6];
stat.table <- cbind(anno[rownames(stat), ], stat);
stat.formatted <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
stat.formatted[, prms$entrez+1] <- AddHref(stat.formatted[, prms$entrez+1], UrlEntrezGene([, prms$entrez+1]));
prms$entrez+1
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=deg.method, paired=paired);
stat <- de$results$stat[, 1:6];
stat.table <- cbind(anno[rownames(stat), ], stat);
stat.formatted <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
stat.formatted[, prms$entrez+1] <-
AddHref(stat.formatted[, prms$entrez+1], UrlEntrezGene(stat.formatted[, prms$entrez+1]));
CreateDatatable(stat.formatted, fn = paste(path.tbl, 'all_genes.html', sep='/'),
rownames = FALSE, caption = "Differential expression of all genes");
names(degs) <- deg.sub;
par(mfrow=c(3,1), mar=c(4,5,2,2));
# Distribution of average expression level
m <- rowMeans(e1.2);
d <- density(m);
x <- d$x;
y <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='A. Distribution of Expression Level', cex.lab=2, cex.main=1.5);
title(xlab='Average expression level of genes', line=2, cex=2);
x0  <- as.vector(summary(m))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <- c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
# Distribution of standard deviation across samples
sd <- apply(e1.2, 1, sd);
d  <- density(sd);
x  <- d$x;
y  <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='B. Distribution of Variance', cex.lab=2, cex.main=1.5);
title(xlab='Standard deviation of genes', line=2, cex=2);
x0  <- as.vector(summary(sd))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <-c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
plot(m, sd, xlab='', ylab='Standard Deviation', main='C. Variance vs. Expression Level', cex.lab=2, cex.main=1.5, cex=0.5, col='darkgrey');
title(xlab='Average expression level of genes', line=2, cex=2);
lines(lowess(m, sd), lwd=3, col=2);
rm(list=ls())
name.yaml <- 'differential_expression.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
paired  <- prms$paired;
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
if (is.null(paired))                         paired  <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired  <- FALSE;
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
# Re-process gene expression matrix
e1   <- expr[, g1.ind, drop=FALSE];
e2   <- expr[, g2.ind, drop=FALSE];
e1.2 <- cbind(e1, e2);
inputs <- list(anno=anno, expr=expr);
inputs$parameters <- prms;
res <- list(inputs=inputs);  # Result set
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=deg.method, paired=paired);
paired
rm(list=ls())
name.yaml <- 'differential_expression.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
paired  <- prms$paired;
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
if (is.null(paired))                         paired  <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired  <- FALSE;
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
# Re-process gene expression matrix
e1   <- expr[, g1.ind, drop=FALSE];
e2   <- expr[, g2.ind, drop=FALSE];
e1.2 <- cbind(e1, e2);
inputs <- list(anno=anno, expr=expr);
inputs$parameters <- prms;
res <- list(inputs=inputs);  # Result set
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=prms$deg$method, paired=prms);
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=prms$deg$method, paired=prms$deg$paired);
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=prms$deg$method, paired=prms$deg$paired);
stat <- de$results$stat[, 1:6];
stat.table <- cbind(anno[rownames(stat), ], stat);
stat.formatted <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
stat.formatted[, prms$entrez+1] <-
AddHref(stat.formatted[, prms$entrez+1], UrlEntrezGene(stat.formatted[, prms$entrez+1]));
CreateDatatable(stat.formatted, fn = paste(path.tbl, 'all_genes.html', sep='/'),
rownames = FALSE, caption = "Differential expression of all genes");
saveRDS(de, file=paste(path.r, 'all_genes.rds', sep='/'));
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
nrm <- NormDESeq(e1.2)
nrm <- NormDESeq(round(2^e1.2))
names(nrm)
length(nrm)
dim(nrm)
head(nrm)
nrm <- NormalizeRNAseq(round(2^e1.2), methods = 'DESeq')
dim(nrm)
nrm
length(nrm)
names(nrm)
nrm <- NormalizeRNAseq(round(2^e1.2), methods = 'NormDESeq')
nrm$DESeq->x
dim(x)
if (prms$count) nrm <- NormalizeRNAseq(round(e1.2), methods = 'NormDESeq')$DESeq else nrm <- e1.2;
par(mfrow=c(3,1), mar=c(4,5,2,2));
# Distribution of average expression level
m <- rowMeans(nrm);
d <- density(m);
x <- d$x;
y <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='A. Distribution of Expression Level', cex.lab=2, cex.main=1.5);
title(xlab='Average expression level of genes', line=2, cex=2);
x0  <- as.vector(summary(m))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <- c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
# Distribution of standard deviation across samples
sd <- apply(e1.2, 1, sd);
d  <- density(sd);
x  <- d$x;
y  <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='B. Distribution of Variance', cex.lab=2, cex.main=1.5);
title(xlab='Standard deviation of genes', line=2, cex=2);
x0  <- as.vector(summary(sd))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <-c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
plot(m, sd, xlab='', ylab='Standard Deviation', main='C. Variance vs. Expression Level', cex.lab=2, cex.main=1.5, cex=0.5, col='darkgrey');
title(xlab='Average expression level of genes', line=2, cex=2);
lines(lowess(m, sd), lwd=3, col=2);
if (prms$count) nrm <- NormalizeRNAseq(round(e1.2), methods = 'NormDESeq')$DESeq else nrm <- e1.2;
par(mfrow=c(3,1), mar=c(4,5,2,2));
# Distribution of average expression level
m <- rowMeans(nrm);
d <- density(m);
x <- d$x;
y <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='A. Distribution of Expression Level', cex.lab=2, cex.main=1.5);
title(xlab='Average expression level of genes', line=2, cex=2);
x0  <- as.vector(summary(m))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <- c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
# Distribution of standard deviation across samples
sd <- apply(e1.2, 1, sd);
if (prms$count) nrm <- NormalizeRNAseq(round(e1.2), methods = 'NormDESeq')$DESeq else nrm <- e1.2;
par(mfrow=c(3,1), mar=c(4,5,2,2));
# Distribution of average expression level
m <- rowMeans(nrm);
d <- density(m);
x <- d$x;
y <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='A. Distribution of Expression Level', cex.lab=2, cex.main=1.5);
title(xlab='Average expression level of genes', line=2, cex=2);
x0  <- as.vector(summary(m))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <- c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
# Distribution of standard deviation across samples
sd <- apply(nrm, 1, sd);
dim(e1.2)
# Distribution of standard deviation across samples
sd <- apply(nrm, 1, sd);
class(nrm)
apply(nrm, 1, sd)
nrm[1:2, ]
apply(nrm[1:2, ], 1, sd)
