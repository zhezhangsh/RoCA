cex.w<-min(cex.w, 0.75*(H/limit.h)/str.h);
text(nc, (nr:1)-0.5, pos=4, label=rnm, cex=cex.w);
# plot column names
space.h<-(1-nr/limit.h)*H;
cex.h<-(space.h-0.2)/wid.c;
cex.h<-min(cex.h, 0.75*(W/limit.w)/str.h);
text((1:nc)-0.5, (nr+limit.h)/2, srt=90, label=cnm, cex=cex.h);
if (!is.na(key) & key!='') {
# key name
key.w<-0.6*(space.w-0.2)/strwidth(key, units='inches');
key.h<-0.2*space.h/str.h
text((nc+limit.w)/2, nr, pos=3, label=key, col='purple', cex=min(key.w, key.h));
key.w<-limit.w-nc;
key.h<-limit.h-nr;
key.x<-c(nc + 0.15*key.w, nc + 0.85*key.w);
key.y<-c(nr + 0.4*key.h, nr + 0.4*key.h + min(nr/25, 0.4*key.h));
image(seq(key.x[1], key.x[2], length.out=num.breaks+1), key.y, matrix(breaks, nc=1), col=col, breaks=breaks, add=TRUE);
text(nc+0.15*key.w, nr + 0.4*key.h, pos=1, label=min, cex=0.75*cex.h);
text(nc+0.85*key.w, nr + 0.4*key.h, pos=1, label=max, cex=0.75*cex.h);
}
abline(v=0:nc, h=0:nr, lwd=0.25, col='#333333');
box();
par(mar=c(0.1, 0.1, 0.1, 0.1));
limit.w<-ceiling(full.w/(block.w/nc));
limit.h<-ceiling(full.h/(block.h/nr));
plot(0, type='n', xlim=c(0, limit.w), ylim=c(0, limit.h), xaxs='i', yaxs='i', axes=FALSE, xlab='', ylab='');
image(0:nc, 0:nr, t(d[nr:1,]), col=col, breaks=breaks, add=TRUE);
# plot row names
space.w<-(1-nc/limit.w)*W;
cex.w<-(space.w-0.2)/wid.r;
cex.w<-min(cex.w, 0.75*(H/limit.h)/str.h);
text(nc, (nr:1)-0.5, pos=4, label=rnm, cex=cex.w);
# plot column names
space.h<-(1-nr/limit.h)*H;
cex.h<-(space.h-0.2)/wid.c;
cex.h<-min(cex.h, 0.75*(W/limit.w)/str.h);
text((1:nc)-0.5, (nr+limit.h)/2, srt=90, label=cnm, cex=cex.h);
if (!is.na(key) & key!='') {
# key name
key.w<-0.6*(space.w-0.2)/strwidth(key, units='inches');
key.h<-0.2*space.h/str.h
text((nc+limit.w)/2, nr, pos=3, label=key, col='purple', cex=min(key.w, key.h));
key.w<-limit.w-nc;
key.h<-limit.h-nr;
key.x<-c(nc + 0.15*key.w, nc + 0.85*key.w);
key.y<-c(nr + 0.4*key.h, nr + 0.4*key.h + min(nr/25, 0.4*key.h));
image(seq(key.x[1], key.x[2], length.out=num.breaks+1), key.y, matrix(breaks, nc=1), col=col, breaks=breaks, add=TRUE);
if (min > 0.01) {
min<-round(min, 3);
max<-round(max, 3);
}
text(nc+0.15*key.w, nr + 0.4*key.h, pos=1, label=min, cex=0.75*cex.h);
text(nc+0.85*key.w, nr + 0.4*key.h, pos=1, label=max, cex=0.75*cex.h);
}
abline(v=0:nc, h=0:nr, lwd=0.25, col='#333333');
box();
# plot heatmap
par(mar=c(0.1, 0.1, 0.1, 0.1));
limit.w<-ceiling(full.w/(block.w/nc));
limit.h<-ceiling(full.h/(block.h/nr));
plot(0, type='n', xlim=c(0, limit.w), ylim=c(0, limit.h), xaxs='i', yaxs='i', axes=FALSE, xlab='', ylab='');
image(0:nc, 0:nr, t(d[nr:1,]), col=col, breaks=breaks, add=TRUE);
# plot row names
space.w<-(1-nc/limit.w)*W;
cex.w<-(space.w-0.2)/wid.r;
cex.w<-min(cex.w, 0.75*(H/limit.h)/str.h);
text(nc, (nr:1)-0.5, pos=4, label=rnm, cex=cex.w);
# plot column names
space.h<-(1-nr/limit.h)*H;
cex.h<-(space.h-0.2)/wid.c;
cex.h<-min(cex.h, 0.75*(W/limit.w)/str.h);
text((1:nc)-0.5, (nr+limit.h)/2, srt=90, label=cnm, cex=cex.h);
if (!is.na(key) & key!='') {
# key name
key.w<-0.6*(space.w-0.2)/strwidth(key, units='inches');
key.h<-0.2*space.h/str.h
text((nc+limit.w)/2, nr, pos=3, label=key, col='purple', cex=min(key.w, key.h));
key.w<-limit.w-nc;
key.h<-limit.h-nr;
key.x<-c(nc + 0.15*key.w, nc + 0.85*key.w);
key.y<-c(nr + 0.4*key.h, nr + 0.4*key.h + min(nr/25, 0.4*key.h));
image(seq(key.x[1], key.x[2], length.out=num.breaks+1), key.y, matrix(breaks, nc=1), col=col, breaks=breaks, add=TRUE);
if (min > 0.01) {
min<-round(min, 3);
max<-round(max, 3);
}
text(nc+0.15*key.w, nr + 0.4*key.h, pos=1, label=min, cex=0.6*cex.h);
text(nc+0.85*key.w, nr + 0.4*key.h, pos=1, label=max, cex=0.6*cex.h);
}
abline(v=0:nc, h=0:nr, lwd=0.25, col='#333333');
box();
?text
if (num.breaks<1) num.breaks<-32;
col<-GetBluePickogramColors(num.breaks);
if (min > min(d, na.rm=TRUE)) d[!is.na(d) & d<min]<-min;
if (max < max(d, na.rm=TRUE)) d[!is.na(d) & d>max]<-max;
breaks<-seq(min, max, length.out = length(col)+1);
# column/row names
rnm<-rownames(d);
cnm<-colnames(d);
nr<-nrow(d);
nc<-ncol(d);
# Current device size in inch
W<-par()$fin[1] - .2;
H<-par()$fin[2] - .2;
str.h<-strheight('', unit='inches'); # default string height
# Total block size
block.w<-1.2*str.h*nc;
block.h<-1.2*str.h*nr;
ratio<-c(0.1, 10); # minimal and maximal label/block ratio
# lable size
wid.r<-max(strwidth(rnm, units='inches'));
wid.c<-max(strwidth(cnm, units='inches'));
str.r<-wid.r/max(1, str.h/(0.75*H/nr));
str.c<-wid.c/max(1, str.h/(0.75*W/nc));
str.r<-max(ratio[1]*block.w, min(ratio[2]*block.w, str.r));
str.c<-max(ratio[1]*block.h, min(ratio[2]*block.h, str.c));
# label + block size
full.w<-block.w+str.r;
full.h<-block.h+str.c;
# ratio to device size
ratio.w<-W/full.w;
ratio.h<-H/full.h;
# plot heatmap
par(mar=c(0.1, 0.1, 0.1, 0.1));
limit.w<-ceiling(full.w/(block.w/nc));
limit.h<-ceiling(full.h/(block.h/nr));
plot(0, type='n', xlim=c(0, limit.w), ylim=c(0, limit.h), xaxs='i', yaxs='i', axes=FALSE, xlab='', ylab='');
image(0:nc, 0:nr, t(d[nr:1,]), col=col, breaks=breaks, add=TRUE);
# plot row names
space.w<-(1-nc/limit.w)*W;
cex.w<-(space.w-0.2)/wid.r;
cex.w<-min(cex.w, 0.75*(H/limit.h)/str.h);
text(nc, (nr:1)-0.5, pos=4, label=rnm, cex=cex.w);
# plot column names
space.h<-(1-nr/limit.h)*H;
cex.h<-(space.h-0.2)/wid.c;
cex.h<-min(cex.h, 0.75*(W/limit.w)/str.h);
text((1:nc)-0.5, (nr+limit.h)/2, srt=90, label=cnm, cex=cex.h);
if (!is.na(key) & key!='') {
# key name
key.w<-0.6*(space.w-0.2)/strwidth(key, units='inches');
key.h<-0.2*space.h/str.h
text((nc+limit.w)/2, nr, pos=3, label=key, col='purple', cex=min(key.w, key.h));
key.w<-limit.w-nc;
key.h<-limit.h-nr;
key.x<-c(nc + 0.15*key.w, nc + 0.85*key.w);
key.y<-c(nr + 0.4*key.h, nr + 0.4*key.h + min(nr/25, 0.4*key.h));
image(seq(key.x[1], key.x[2], length.out=num.breaks+1), key.y, matrix(breaks, nc=1), col=col, breaks=breaks, add=TRUE);
if (min > 0.01) {
min<-round(min, 3);
max<-round(max, 3);
}
text(nc+0.15*key.w, nr + 0.4*key.h, pos=1, label=min, cex=0.75*cex.h);
text(nc+0.85*key.w, nr + 0.4*key.h, pos=1, label=max, cex=0.75*cex.h);
}
abline(v=0:nc, h=0:nr, lwd=0.25, col='#333333');
box();
str.h<-strheight('', units='inches');
str.h
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + max(nchar(rownames(d)));
full.w
strwidth('abc', units='inches')
strheight('abc', units='inches')
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + 0.12*max(nchar(rownames(d)));
full.h<-block.h + 0.12*max(nchar(colnames(d)));
full.w
full.h
block.h
ratio<-1
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + 0.12*max(nchar(rownames(d)));
full.h<-block.h + 0.12*max(nchar(colnames(d)));
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + ratio*0.12*max(nchar(rownames(d))) + 0.4;
full.h<-block.h + 0.12*max(nchar(colnames(d))) + 0.4;
out<-c(full.w, full.h);
out
out/max(1, max(out)/max.size);
max.size
max.size<-12
out/max(1, max(out)/max.size);
full.w
full.h
saveRDS(d, '~/Desktop/d.rdata')
# Helper function of PlotColoredBlock(), calculate preferred device size for color block heatmap
CalculateColoredBlockSize<-function(d, ratio=1, max.size=12) {
# d         The matix to be plotted
# ratio     Default height-to-width ratio of each block
# max.size  Maximum width and height allowed for the whole plot, in inches
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + ratio*0.12*max(nchar(rownames(d))) + 0.4;
full.h<-block.h + 0.12*max(nchar(colnames(d))) + 0.4;
c(full.w, full.h)/max(1, max(c(full.w, full.h))/max.size);
}
dim(d)
log10(abs(min))
min<-round(min, ceiling(log10(abs(min))));
min
letters()
letters
summary(letters)
quantile(letters)
quantile(letters)
data.frame(a=1:26, b=letters)
data.frame(a=1:26, b=letters)->x
class(x[[1]])
?class
?readRDS
x<-1:100
saveRDS(x, 'x.rds')
serialize(y, 'x.rds')
serialize(x)
serialize(x, NULL)
serialize(x, 'y.rds')
serialize(x, con('y.rds'))
library(Rsamtools)
gr<-GRanges(1:2, IRanges(1:2, 3:4))
gr
elementMetadata(gr)
gr<-GRanges(1:2, IRanges(1:2, 3:4), REF=c('A', 'G'), ALT=c('C', 'T'))
elementMetadata(gr)
elementMetadata(gr)->obj
class(obj)
is.data.frame(obj)
class(gr)
if (cll=='GRanges') cll<-as.data.frame(elementMetadata(obj));
cll<-class(obj);
if (cll=='GRanges') cll<-as.data.frame(elementMetadata(obj));
obj<-gr
cll<-class(obj);
if (cll=='GRanges') cll<-as.data.frame(elementMetadata(obj));
obj
cll<-class(obj);
if (cll=='GRanges') obj<-as.data.frame(elementMetadata(obj));
dim(obj)
class(obj)
GRanges(1:2, IRanges(1, 2))
GRanges(1:2, IRanges(1, 2))->x
elementMetadata(x)->x
ncol(x)
round(0.5)
library(knitr)
?kable
SplitCigar<-function(cigar, op=c('M', 'S', 'H', 'I', 'D')) {
# cigar   Vector of cigar strings
# op      Cigar operations
require(GenomicAlignments);
require(S4Vectors);
lst<-cigarToRleList(cigar);
val<-runValue(lst);
len<-runLength(lst);
ele<-elementLengths(len);
val<-BiocGenerics::unlist(val, use.names=FALSE);
len<-BiocGenerics::unlist(len, use.names=FALSE);
ind<-rep(1:length(ele), ele);
v<-rep(0, length(cigar));
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
v;
});
if (class(n)!='matrix') n<-matrix(n, nc=length(op));
rownames(n)<-cigar;
colnames(n)<-op;
n;
}
x<-c('50M', '50M')
x
SplitCigar(x)->a
a
a[1,1]
op=c('M', 'S', 'H', 'I', 'D')
cigar<-x
require(GenomicAlignments);
require(S4Vectors);
lst<-cigarToRleList(cigar);
val<-runValue(lst);
len<-runLength(lst);
ele<-elementLengths(len);
val<-BiocGenerics::unlist(val, use.names=FALSE);
len<-BiocGenerics::unlist(len, use.names=FALSE);
ind<-rep(1:length(ele), ele);
v<-rep(0, length(cigar));
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
v;
});
n
n[1,1]
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
n
n1[1,]
n[1,1]
o<-op[1]
i<-which(val==o);
i
s<-sapply(split(len[i], ind[i]), sum);
s
v[as.integer(names(s))]<-s;
v
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
class(n)
n[1,1]
n[1, ]
val
len
v
n<-lapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
n
n[[1]]
n[[2]]
o<-op[2]
o
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
s
v
v<-rep(0, length(cigar));
v
s
length(s)
v<-rep(0, length(cigar));
n<-lapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
if (length(s)>0) v[as.integer(names(s))]<-s;
v
});
n
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
if (length(s)>0) v[as.integer(names(s))]<-s;
v
});
n
n[1,1]
n[1, ]
n[2, ]
class(n)
n[, 1]
i
devtools::install_github("zhezhangsh/DEGandMore");
devtools::install_github("zhezhangsh/RoCA");
devtools::install_github("zhezhangsh/RoCA");
devtools::install_github("zhezhangsh/CHOPseq");
devtools::install_github("zhezhangsh/CHOPseq");
devtools::install_github("zhezhangsh/Rnaseq");
devtools::install_github("zhezhangsh/awsomics");
devtools::install_github("zhezhangsh/rchive");
devtools::install_github("zhezhangsh/GtUtility");
library(RoCA)
CreateReport('~/Desktop/sample_normal.yml')
download.file('https://raw.githubusercontent.com/zhezhangsh/RoCA/master/template/demo/sample_normal/sample_normal.yml', 'sample_normal.yml')
dir()
RoCA::CreateReport('sample_normal.yml')
RoCA::CreateReport('sample_normal.yml')
if (is.null(names(exon))) names(exon)<-1:length(exon);
prop.test(0, 1700, 0.002)
relist
?relist
rm(list=ls())
ls()
.libPaths()
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
InstallDependency()
InstallDependency
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
InstallDependency
detach("package:RoCA", unload=TRUE)
InstallDependency(TRUE)
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
InstallDependency(TRUE)
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?readGAlignments
library(GenomicAlignments)
?readGAlignments
bamfile <- system.file("extdata", "ex1.bam", package="Rsamtools",
mustWork=TRUE)
gal1 <- readGAlignments(bamfile)
gal1
names(gal1)
library(GenomicAlignments)
galp1 <- readGAlignmentPairs(bamfile)
head(galp1)
names(galp1)
---
param <- ScanBamParam(flag=scanBamFlag(isProperPair=TRUE,
isDuplicate=FALSE,
isSecondaryAlignment=FALSE))
galp2 <- readGAlignmentPairs(bamfile, use.names=TRUE, param=param)
galp2
head(galp2)
head(names(galp2))
param <- ScanBamParam(tag=c("MF", "Aq", "NM", "UQ", "H0", "H1"),
what=c('flag', 'mapq', 'cigar', "isize")
)
galp2 <- readGAlignmentPairs(bamfile, use.names=TRUE, param=param)
galp2
param <- ScanBamParam(tag=c("MF", "Aq", "NM", "UQ", "H0", "H1"),
what='cigar')
galp2 <- readGAlignmentPairs(bamfile, use.names=TRUE, param=param)
galp2
x<-galp2
str(x)
class(x$first)
class(x@first)
class(x@second)
class(x@last)
class(x)
a<-x@first
a
param <- ScanBamParam(
what=c('flag', 'mapq', 'cigar', "isize")
)
x <- readGAlignmentPairs(bamfile, use.names=TRUE, param=param)
a<-x@first
a
a$flag
a@flag
a[, 'flag']
b<- elementMetadata(a)
b
table(b[, 1])
x <- readGAlignmentPairs(bamfile, use.names=TRUE)
a<-x@first
a
a@cigar
a
x
countOverlaps(x, a)
countOverlaps(x, a)->y
length(x)
length(y)
table(y)
str(a)
seqlengths(a)
seqlengths(x)
setwd('~/Desktop/RoCA/data/')
dir()
setwd('sequence.read/')
dir()
download.file('http://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai')
library(GenomicAlignments)
which <- GRanges(seqnames = "6", ranges = IRanges(1e+05, 110000))
param <- ScanBamParam(which = which)
readGAlignments('http://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param)
x<-scanBam('http://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param)
x<-scanBam('ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param)
x<-scanBam('ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param)
x<-readGAlignments('ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param)
x<-readGAlignments('ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param, with.which_label=TRUE)
x<-readGAlignments('ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', index='NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param, with.which_label=TRUE)
x
x<-readGAlignments('http://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param, with.which_label=TRUE)
f<-''ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam''
f<-'ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam'
f
library(RCurl)
url.exists(f)
x<-readGAlignmentPairs('http://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param, with.which_label=TRUE)
x<-readGAlignmentPairs('http://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', 'NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param, with.which_label=TRUE)
x<-readGAlignmentPairs('ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/phase3/data/NA21144/alignment/NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam', index='NA21144.mapped.ILLUMINA.bwa.GIH.low_coverage.20130415.bam.bai', use.names=TRUE, param=param, with.which_label=TRUE)
x
x<-c(21144, 21143, 21142, 21141, 21137, 21135, 21133, 21130)
fns<-sapply(sort(x), function(x) gsub('21144', x, f))
fns
saveRDS(fns, file='ftp_links.rds')
