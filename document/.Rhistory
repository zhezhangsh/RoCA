nc<-ncol(d);
# Current device size in inch
W<-par()$fin[1] - .2;
H<-par()$fin[2] - .2;
str.h<-strheight('', unit='inches'); # default string height
# Total block size
block.w<-1.2*str.h*nc;
block.h<-1.2*str.h*nr;
ratio<-c(0.1, 10); # minimal and maximal label/block ratio
# lable size
wid.r<-max(strwidth(rnm, units='inches'));
wid.c<-max(strwidth(cnm, units='inches'));
str.r<-wid.r/max(1, str.h/(0.75*H/nr));
str.c<-wid.c/max(1, str.h/(0.75*W/nc));
str.r<-max(ratio[1]*block.w, min(ratio[2]*block.w, str.r));
str.c<-max(ratio[1]*block.h, min(ratio[2]*block.h, str.c));
# label + block size
full.w<-block.w+str.r;
full.h<-block.h+str.c;
# ratio to device size
ratio.w<-W/full.w;
ratio.h<-H/full.h;
# plot heatmap
par(mar=c(0.1, 0.1, 0.1, 0.1));
limit.w<-ceiling(full.w/(block.w/nc));
limit.h<-ceiling(full.h/(block.h/nr));
plot(0, type='n', xlim=c(0, limit.w), ylim=c(0, limit.h), xaxs='i', yaxs='i', axes=FALSE, xlab='', ylab='');
image(0:nc, 0:nr, t(d[nr:1,]), col=col, breaks=breaks, add=TRUE);
# plot row names
space.w<-(1-nc/limit.w)*W;
cex.w<-(space.w-0.2)/wid.r;
cex.w<-min(cex.w, 0.75*(H/limit.h)/str.h);
text(nc, (nr:1)-0.5, pos=4, label=rnm, cex=cex.w);
# plot column names
space.h<-(1-nr/limit.h)*H;
cex.h<-(space.h-0.2)/wid.c;
cex.h<-min(cex.h, 0.75*(W/limit.w)/str.h);
text((1:nc)-0.5, (nr+limit.h)/2, srt=90, label=cnm, cex=cex.h);
if (!is.na(key) & key!='') {
# key name
key.w<-0.6*(space.w-0.2)/strwidth(key, units='inches');
key.h<-0.2*space.h/str.h
text((nc+limit.w)/2, nr, pos=3, label=key, col='purple', cex=min(key.w, key.h));
key.w<-limit.w-nc;
key.h<-limit.h-nr;
key.x<-c(nc + 0.15*key.w, nc + 0.85*key.w);
key.y<-c(nr + 0.4*key.h, nr + 0.4*key.h + min(nr/25, 0.4*key.h));
image(seq(key.x[1], key.x[2], length.out=num.breaks+1), key.y, matrix(breaks, nc=1), col=col, breaks=breaks, add=TRUE);
if (min > 0.01) {
min<-round(min, 3);
max<-round(max, 3);
}
text(nc+0.15*key.w, nr + 0.4*key.h, pos=1, label=min, cex=0.75*cex.h);
text(nc+0.85*key.w, nr + 0.4*key.h, pos=1, label=max, cex=0.75*cex.h);
}
abline(v=0:nc, h=0:nr, lwd=0.25, col='#333333');
box();
str.h<-strheight('', units='inches');
str.h
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + max(nchar(rownames(d)));
full.w
strwidth('abc', units='inches')
strheight('abc', units='inches')
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + 0.12*max(nchar(rownames(d)));
full.h<-block.h + 0.12*max(nchar(colnames(d)));
full.w
full.h
block.h
ratio<-1
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + 0.12*max(nchar(rownames(d)));
full.h<-block.h + 0.12*max(nchar(colnames(d)));
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + ratio*0.12*max(nchar(rownames(d))) + 0.4;
full.h<-block.h + 0.12*max(nchar(colnames(d))) + 0.4;
out<-c(full.w, full.h);
out
out/max(1, max(out)/max.size);
max.size
max.size<-12
out/max(1, max(out)/max.size);
full.w
full.h
saveRDS(d, '~/Desktop/d.rdata')
# Helper function of PlotColoredBlock(), calculate preferred device size for color block heatmap
CalculateColoredBlockSize<-function(d, ratio=1, max.size=12) {
# d         The matix to be plotted
# ratio     Default height-to-width ratio of each block
# max.size  Maximum width and height allowed for the whole plot, in inches
sz<-0.2;
nr<-nrow(d);
nc<-ncol(d);
block.w<-sz*nc;
block.h<-ratio*sz*nr;
full.w<-block.w + ratio*0.12*max(nchar(rownames(d))) + 0.4;
full.h<-block.h + 0.12*max(nchar(colnames(d))) + 0.4;
c(full.w, full.h)/max(1, max(c(full.w, full.h))/max.size);
}
dim(d)
log10(abs(min))
min<-round(min, ceiling(log10(abs(min))));
min
letters()
letters
summary(letters)
quantile(letters)
quantile(letters)
data.frame(a=1:26, b=letters)
data.frame(a=1:26, b=letters)->x
class(x[[1]])
?class
?readRDS
x<-1:100
saveRDS(x, 'x.rds')
serialize(y, 'x.rds')
serialize(x)
serialize(x, NULL)
serialize(x, 'y.rds')
serialize(x, con('y.rds'))
library(Rsamtools)
gr<-GRanges(1:2, IRanges(1:2, 3:4))
gr
elementMetadata(gr)
gr<-GRanges(1:2, IRanges(1:2, 3:4), REF=c('A', 'G'), ALT=c('C', 'T'))
elementMetadata(gr)
elementMetadata(gr)->obj
class(obj)
is.data.frame(obj)
class(gr)
if (cll=='GRanges') cll<-as.data.frame(elementMetadata(obj));
cll<-class(obj);
if (cll=='GRanges') cll<-as.data.frame(elementMetadata(obj));
obj<-gr
cll<-class(obj);
if (cll=='GRanges') cll<-as.data.frame(elementMetadata(obj));
obj
cll<-class(obj);
if (cll=='GRanges') obj<-as.data.frame(elementMetadata(obj));
dim(obj)
class(obj)
GRanges(1:2, IRanges(1, 2))
GRanges(1:2, IRanges(1, 2))->x
elementMetadata(x)->x
ncol(x)
round(0.5)
library(knitr)
?kable
SplitCigar<-function(cigar, op=c('M', 'S', 'H', 'I', 'D')) {
# cigar   Vector of cigar strings
# op      Cigar operations
require(GenomicAlignments);
require(S4Vectors);
lst<-cigarToRleList(cigar);
val<-runValue(lst);
len<-runLength(lst);
ele<-elementLengths(len);
val<-BiocGenerics::unlist(val, use.names=FALSE);
len<-BiocGenerics::unlist(len, use.names=FALSE);
ind<-rep(1:length(ele), ele);
v<-rep(0, length(cigar));
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
v;
});
if (class(n)!='matrix') n<-matrix(n, nc=length(op));
rownames(n)<-cigar;
colnames(n)<-op;
n;
}
x<-c('50M', '50M')
x
SplitCigar(x)->a
a
a[1,1]
op=c('M', 'S', 'H', 'I', 'D')
cigar<-x
require(GenomicAlignments);
require(S4Vectors);
lst<-cigarToRleList(cigar);
val<-runValue(lst);
len<-runLength(lst);
ele<-elementLengths(len);
val<-BiocGenerics::unlist(val, use.names=FALSE);
len<-BiocGenerics::unlist(len, use.names=FALSE);
ind<-rep(1:length(ele), ele);
v<-rep(0, length(cigar));
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
v;
});
n
n[1,1]
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
n
n1[1,]
n[1,1]
o<-op[1]
i<-which(val==o);
i
s<-sapply(split(len[i], ind[i]), sum);
s
v[as.integer(names(s))]<-s;
v
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
class(n)
n[1,1]
n[1, ]
val
len
v
n<-lapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
n
n[[1]]
n[[2]]
o<-op[2]
o
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
s
v
v<-rep(0, length(cigar));
v
s
length(s)
v<-rep(0, length(cigar));
n<-lapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
if (length(s)>0) v[as.integer(names(s))]<-s;
v
});
n
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
if (length(s)>0) v[as.integer(names(s))]<-s;
v
});
n
n[1,1]
n[1, ]
n[2, ]
class(n)
n[, 1]
i
devtools::install_github("zhezhangsh/DEGandMore");
devtools::install_github("zhezhangsh/RoCA");
devtools::install_github("zhezhangsh/RoCA");
devtools::install_github("zhezhangsh/CHOPseq");
devtools::install_github("zhezhangsh/CHOPseq");
devtools::install_github("zhezhangsh/Rnaseq");
devtools::install_github("zhezhangsh/awsomics");
devtools::install_github("zhezhangsh/rchive");
devtools::install_github("zhezhangsh/GtUtility");
library(RoCA)
CreateReport('~/Desktop/sample_normal.yml')
download.file('https://raw.githubusercontent.com/zhezhangsh/RoCA/master/template/demo/sample_normal/sample_normal.yml', 'sample_normal.yml')
dir()
RoCA::CreateReport('sample_normal.yml')
RoCA::CreateReport('sample_normal.yml')
if (is.null(names(exon))) names(exon)<-1:length(exon);
prop.test(0, 1700, 0.002)
relist
?relist
rm(list=ls())
ls()
.libPaths()
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
InstallDependency()
InstallDependency
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
InstallDependency
detach("package:RoCA", unload=TRUE)
InstallDependency(TRUE)
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
InstallDependency(TRUE)
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
cran <- c(
#'RCurl' = 'https://cran.r-project.org/src/contrib/RCurl_1.95-4.8.tar.gz',
'gplots' = 'https://cran.r-project.org/src/contrib/gplots_3.0.1.tar.gz',
'knitr' = 'https://cran.r-project.org/src/contrib/knitr_1.12.3.tar.gz',
'yaml' = 'https://cran.r-project.org/src/contrib/yaml_2.1.13.tar.gz',
'rmarkdown' = 'https://cran.r-project.org/src/contrib/rmarkdown_0.9.5.tar.gz'
);
bioc<-c(
"BiocGenerics" = 'http://bioconductor.org/packages/release/bioc/src/contrib/BiocGenerics_0.16.1.tar.gz',
"S4Vectors" = 'http://bioconductor.org/packages/release/bioc/src/contrib/S4Vectors_0.8.11.tar.gz',
"XVector" = 'http://bioconductor.org/packages/3.2/bioc/src/contrib/XVector_0.10.0.tar.gz',
"Rsamtools" = 'http://bioconductor.org/packages/3.2/bioc/src/contrib/Rsamtools_1.22.0.tar.gz',
"Biobase" = 'http://bioconductor.org/packages/release/bioc/src/contrib/Biobase_2.30.0.tar.gz',
"IRanges" = 'http://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.4.8.tar.gz',
"AnnotationDbi" = 'http://bioconductor.org/packages/release/bioc/src/contrib/AnnotationDbi_1.32.3.tar.gz',
"GenomeInfoDb" = 'http://bioconductor.org/packages/3.2/bioc/src/contrib/GenomeInfoDb_1.6.3.tar.gz',
"GenomicRanges" = 'http://bioconductor.org/packages/release/bioc/src/contrib/GenomicRanges_1.22.4.tar.gz',
"Biostrings" = 'http://bioconductor.org/packages/3.2/bioc/src/contrib/Biostrings_2.38.4.tar.gz',
"SummarizedExperiment" = 'http://bioconductor.org/packages/release/bioc/src/contrib/SummarizedExperiment_1.0.2.tar.gz',
"GenomicAlignments" = 'http://bioconductor.org/packages/release/bioc/src/contrib/GenomicAlignments_1.6.3.tar.gz',
"sva" = 'http://bioconductor.org/packages/release/bioc/src/contrib/sva_3.18.0.tar.gz',
"limma" = 'http://bioconductor.org/packages/release/bioc/src/contrib/limma_3.26.9.tar.gz',
"RankProd" = 'http://bioconductor.org/packages/release/bioc/src/contrib/RankProd_2.42.0.tar.gz',
"pathview" = 'http://bioconductor.org/packages/release/bioc/src/contrib/pathview_1.10.1.tar.gz'
)
github <- c(
'awsomics' = 'zhezhangsh/awsomics',
'DEGandMore' = 'zhezhangsh/DEGandMore',
'Agri' = 'zhezhangsh/Agri',
'CHOPseq' = 'zhezhangsh/CHOPseq',
'Rnaseq' = 'zhezhangsh/Rnaseq',
'GtUtility' = 'zhezhangsh/GtUtility'
);
x<-list(cran, bioconductor, github)
x<-list(cran, bioc, github)
a<-lapply(x, names)
a
b<-lapply(x, as.vector)
b
b
c<-rep(names(x), sapply(a, length))
c
names(x)
length(x)
c<-rep(c('cran', 'bioc', 'github'), sapply(x, length))
c
t<-cbind(c, a, b)
length(c)
length(a)
a
a<-unlist(a)
a<-as.vector(a)
a
b
b<-unlist(b)
b
t<-cbind(c, a, b)
t
t[1:2, ]
setwd('../..')
dir()
setwd('~/Desktop/RoCA/document/')
write.table(t, 'packages.txt', sep='\t', qu=F, row=F, col=FALSE)
t<-read.table('packages.txt', sep='\t')
dim(t)
read.table('https://raw.githubusercontent.com/zhezhangsh/RoCA/master/document/packages.txt', sep='\t');
pkgs <- read.table(list);
url <- pkgs[, 3];
names(url) <- pkgs[, 2];
packages=NA
reinstall=FALSE
list.source='https://raw.githubusercontent.com/zhezhangsh/RoCA/master/document/packages.txt'
cat('Installing default packages depended by the RoCA package:\n');
installed <- rownames(installed.packages());
pkgs <- read.table(list.source);
url <- pkgs[, 3];
names(url) <- pkgs[, 2];
pkgs <- read.table(list.source);
url <- pkgs[, 3];
names(url) <- pkgs[, 2];
pkgs <- split(ulr, pkgs[, 1]);
pkgs <- split(url, pkgs[, 1]);
pkgs
pkgs <- read.table(list.source, stringsAsFactors = FALSE);
url <- pkgs[, 3];
names(url) <- pkgs[, 2];
pkgs <- split(url, pkgs[, 1]);
cran <- pkgs[['cran']];
cran %in% packages
packages <- packages[!is.na(packages)];
packages
cran %in% packages
if (length(packages) > 0) pkgs <- lapply(pkgs, function(p) p[p %in% packages]);
pkgs
x<-c()
sapply(x, print(1))
sapply(x, print)
sapply(names(x), print)
cran=TRUE
bioc=TRUE
github=TRUE
out <- list();
out <- list();
# Download packages from CRAN
if (cran) {
cat('Installing package:', nm, '\n');
out$cran <- sapply(names(pkgs[['cran']]), function(nm) {
if (reinstall | !is.element(nm, installed)) install_url(pkgs[['cran']][nm], quiet=TRUE) else NA;
});
names(out$cran) <- names(pkgs[['cran']]);
}
names(pkgs[['cran']])
installed <- rownames(installed.packages());
packages <- packages[!is.na(packages)];
packages
cat('Installing default packages depended by the RoCA package:\n');
installed <- rownames(installed.packages());
packages <- packages[!is.na(packages)];
# split package URLs by source
pkgs <- read.table(list.source, stringsAsFactors = FALSE);
url <- pkgs[, 3];
names(url) <- pkgs[, 2];
pkgs <- split(url, pkgs[, 1]);
if (length(packages) > 0) pkgs <- lapply(pkgs, function(p) p[p %in% packages]);
out <- list();
out
pkgs[[1]]
pkgs[['cran']]
cran
if (cran) {
cat('Installing package:', nm, '\n');
out$cran <- sapply(names(pkgs[['cran']]), function(nm) {
if (reinstall | !is.element(nm, installed)) install_url(pkgs[['cran']][nm], quiet=TRUE) else NA;
});
names(out$cran) <- names(pkgs[['cran']]);
}
# Download packages from CRAN
if (cran) {
cat('\nInstalling CRAN packages ...\n');
out$cran <- sapply(names(pkgs[['cran']]), function(nm) {
cat('Installing package:', nm, '\n');
if (reinstall | !is.element(nm, installed)) install_url(pkgs[['cran']][nm], quiet=TRUE) else NA;
});
names(out$cran) <- names(pkgs[['cran']]);
}
out
if (bioc) {
cat('\nInstalling Bioconductor packages ...\n');
out$bioc <- sapply(names(pkgs[['bioc']]), function(nm) {
cat('Installing package:', nm, '\n');
if (reinstall | !is.element(nm, installed)) install_url(pkgs[['bioc']][nm], quiet=TRUE) else NA;
});
names(out$bioc) <- names(pkgs[['bioc']]);
}
out
if (github) {
cat('\nInstalling GitHub packages ...\n');
out$github <- sapply(names(pkgs[['github']]), function(nm) {
cat('Installing package:', nm, '\n');
if (reinstall | !is.element(nm, installed)) install_url(pkgs[['github']][nm], quiet=TRUE) else NA;
});
names(out$github) <- names(pkgs[['github']]);
}
github
out
devtools::install_github("zhezhangsh/RoCA/R");
library(RoCA)
InstallDependency()
InstallDependency(reinstall = TRUE, cran=TRUE, bioc = FALSE, github=FALSE)
reinstall=TRUE
require('devtools');
cat('Installing default packages depended by the RoCA package:\n');
installed <- rownames(installed.packages());
packages <- packages[!is.na(packages)];
# split package URLs by source
pkgs <- read.table(list.source, stringsAsFactors = FALSE);
url <- pkgs[, 3];
names(url) <- pkgs[, 2];
pkgs <- split(url, pkgs[, 1]);
if (length(packages) > 0) pkgs <- lapply(pkgs, function(p) p[p %in% packages]);
out <- list();
##########################################################################################
# Download packages from CRAN
if (cran) {
cat('\nInstalling CRAN packages ...\n');
out$cran <- sapply(names(pkgs[['cran']]), function(nm) {
cat('Installing package:', nm, '\n');
if (reinstall | !is.element(nm, installed)) install_url(pkgs[['cran']][nm], quiet=TRUE) else NA;
});
names(out$cran) <- names(pkgs[['cran']]);
}
InstallDependency(reinstall = TRUE, cran=TRUE, bioc = FALSE, github=FALSE)
args(install_github)
?install_github
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
