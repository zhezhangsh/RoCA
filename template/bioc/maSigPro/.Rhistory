getwd()
library(RoCA)
setwd('../phase2_masigpro/')
dir()
CreateReport('masigpro.yaml')
CreateReport('masigpro.yaml')
CreateReport('masigpro.yaml')
require(RoCA)
CreateReport('masigpro.yaml')
dir()
d <- readRDS('../sample20.rds')
s <- readRDS('../sample20.rds')
d <- readRDS('../data_loess20.rds')
dim(d)
dim(s)
head(s)
g <- split(rownames(s), s$Subject)
length(g)
str(g)
e <- lapply(g, function(g) d[, g])
dim(e)
e <- sapply(e, as.vector)
dim(e)
r <- cor(e)
plot(hclust(as.dist(1-r)))
library(awsomics)
pr <- prcomp(t(e))
PlotPCA(pr, colnames(e))
PlotPCA(pr, colnames(e), legend=TRUE)
PlotPCA(pr, colnames(e), legend=TRUE, label=1:20)
PlotPCA(pr, colnames(e), legend=TRUE, label=1:20, legend.single = TRUE)
g[[1]]
length(g)
e <- lapply(g, function(g) d[, g[1:7]])
e <- sapply(e, as.vector)
dim(e)
pr <- prcomp(t(e))
PlotPCA(pr, colnames(e), legend=TRUE, label=1:20, legend.single = TRUE)
PlotPCA(pr, rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
e <- lapply(g, function(g) d[, g[1:7]])
dim(e[[1]])
e1 <- apply(e, function(e) apply(e, 2, function(z) z-z[, 1]))
e1 <- lapply(e, function(e) apply(e, 2, function(z) z-z[, 1]))
e1 <- lapply(e, function(e) apply(e, 2, function(z) z-e[, 1]))
dim(e1[[1]])
head(e1[[1]])
z <- sapply(e1, as.vector)
dim(z)
pr <- prcomp(t(z))
PlotPCA(pr, rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
e1 <- lapply(e, function(e) apply(e, 2, function(z) z/sd(z)))
dim(e1[[1]])
sd(e1[[1]][1, ])
e1 <- lapply(e, function(e) apply(e, 2, function(z) z-e[, 1]))
e1 <- lapply(e1, function(e) apply(e, 2, function(z) z/sd(z)))
sd(e1[[1]][1, ])
head(e1[[1]])
e1 <- lapply(e, function(e) apply(e, 2, function(z) z-z[, 1]))
e1 <- lapply(e, function(e) apply(e, 2, function(z) z-e[, 1]))
e1 <- lapply(e1, function(e) apply(e, 1, function(z) z/sd(z)))
sd(e1[[1]][1, ])
head(e1[[1]])
e1 <- lapply(e1, t)
head(e1[[1]])
sd(e1[[1]][1, ])
z <- sapply(e1, as.vector)
dim(z)
pr <- prcomp(t(z))
PlotPCA(pr, rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
e <- lapply(g, function(g) d[, g[8:14]])
e2 <- lapply(e, function(e) apply(e, 2, function(z) z-e[, 1]))
e2 <- lapply(e2, function(e) apply(e, 1, function(z) z/sd(z)))
d1 <- sapply(e1, as.vector)
d2 <- sapply(e2, as.vector)
dim(d1)
dim(d2)
z <- d2-d1
pr <- prcomp(t(z))
PlotPCA(pr, rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
r <- cor(r)
r <- cor(z)
plot(hclust(as.dist(1-r)))
plot(hclust(as.dist(1-r)))
r <- cor(e1)
dim(e1)
dim(d1)
r <- cor(d1)
plot(hclust(as.dist(1-r)))
PlotPCA(prcomp(t(e1)), rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
PlotPCA(prcomp(t(d1)), rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
PlotPCA(prcomp(t(d1[, 11:20])), 1:10, legend=TRUE, label=1:20, legend.single = TRUE)
aov <- readRDS('../../result/phase2_differential_expression_anova/R/anova.rds')
names(aov)
aov[[1]]
summary(aov[[1]])
aov <- lapply(aov, summary)
p1 <- lapply(aov, function(a) a[[1]])
p1[[1]]
p1 <- sapply(p1, function(x) x[1, 5])
p1 <- sapply(p1, function(x) x[[1]][1, 5])
p2 <- lapply(aov, function(a) a[[2]])
p2[[1]]
p2[[1]][1:6, 5]
p2 <- sapply(p2, function(x) x[[1]][1:6, 5])
dim(p2)
p2 <- t(p2)
head(p2)
p <- cbind(p1, p2)
mn <- apply(p, 1, min)
summary(mn)
length(mn[mn<0.01])
dim(e[[1]])
head(e[[1]])
dim(e[[1]])
e <- lapply(g, function(g) d[, g])
e <- lapply(g, function(g) d[names(mn[mn<0.01]), g])
dim(e[[1]])
e0 <- sapply(e, as.vector)
dim(e0)
r <- cor(e0)
plot(hclust(as.dist(1-r)))
pr <- prcomp(t(e0))
PlotPCA(prcomp(t(d1)), rep(1:2, each=10), legend=TRUE, label=1:20, legend.single = TRUE)
d1[1:2, ]
PlotPCA(prcomp(t(d1)), colnames(d1), legend=TRUE, label=1:20, legend.single = TRUE)
PlotPCA(prcomp(t(d1)), colnames(d1), legend=TRUE, label=1:20, legend.single = TRUE)
dim(d1)
ks <- kmeans(d1, 2)
ks
ks$cluster
ks <- kmeans(t(ks), 2)
ks <- kmeans(t(d1), 2)
ks$cluster
ks$cluster->a
b <- rep(1:2, each=10)
xtabs(~a+b)
e <- lapply(g, function(g) d[, g])
d0 <- sapply(e, as.vector)
dim(d0)
k0 <- kmean(t(d0), 2)
k0 <- kmeans(t(d0), 2)
a <- k0$cluster
xtabs(~a+b)
fisher.test(xtabs(~a+b))
cl <- readRDS('../../result/phase2_masigpro/R/cluster_mean.rds')
length(cl)
dim(cl)
cl <- readRDS('../../result/phase2_masigpro/R/all_result.rds')
length(cl)
names(cl)
cl <- cl$sig.genes
dim(cl)
names(cl)
cl <- cl$sig.profiles
dim(cl)
cl <- split(rownames(cl), cl[, ncol(cl)])
length(cl)
str(cl)
x <- cl[[1]]
x
a <- lapply(g, function(g) as.vector(d[x, g]))
dim(a)
a <- sapply(g, function(g) as.vector(d[x, g]))
dim(a)
head(a)
plot(hclust(as.dist(1-cor(a))))
plot(hclust(as.dist(1-cor(a))))
PlotPCA(prcomp(t(a)), rep(1:2, each=10))
setwd('~/Documents/RoCA/template/bioc/maSigPro/')
dir()
library(RoCA)
CreateReport('masigpro.yaml')
rm(yml)
name.yaml <- 'masigpro.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'GenomicRanges',
'RoCA', 'awsomics', 'maSigPro');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure',
'path.tbl'='table', 'path.cl'='cluster');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml')) if (file.exists(name.yaml))	yml<-yaml.load_file(name.yaml);
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders))
assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
yml$input$mtrx
mtrx <- ImportTable(yml$input$mtrx);
CreateReport('masigpro.yaml')
mtrx <- ImportTable(DownloadFile(yml$input$mtrx));
yml$input
mtrx <- ImportTable(DownloadFile(yml$input$mtrx));
CreateReport('masigpro.yaml')
CreateReport('masigpro.yaml')
CreateReport('masigpro.yaml')
