v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter);
head(v)
class(v)
v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter)$y;
dim(v)
head(v)
gr <- GRanges(x[, prms$column$chromosome], IRanges(l, width=1), strand = str);
mcols(gr) <- v;
names(gr) <- rownames(x);
gr
grs <- lapply(d, function(x) {
x <- x[order(rowMeans(x[, prms$sorting$column, drop=FALSE])), , drop=FALSE];
v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter)$y;
if (prms$sorting$direction == -1) x <- x[nrow(x):1, , drop=FALSE];
if (prms$sorting$position == 'sequential') l <- 1:nrow(x) else l <- round(x[, prms$column$start]/2+x[, prms$column$end]/2);
if (prms$column$strand>0) str <- x[, prms$column$strand] else str <- '*';
gr <- GRanges(x[, prms$column$chromosome], IRanges(l, width=1), strand = str);
mcols(gr) <- v;
names(gr) <- rownames(x);
});
gr0 <- suppressWarnings(Reduce('c', grs));
names(gr0) <- unlist(lapply(grs, names));
gr0
head(gr0)
grs <- lapply(d, function(x) {
x <- x[order(rowMeans(x[, prms$sorting$column, drop=FALSE])), , drop=FALSE];
v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter)$y;
if (prms$sorting$direction == -1) x <- x[nrow(x):1, , drop=FALSE];
if (prms$sorting$position == 'sequential') l <- 1:nrow(x) else l <- round(x[, prms$column$start]/2+x[, prms$column$end]/2);
if (prms$column$strand>0) str <- x[, prms$column$strand] else str <- '*';
gr <- GRanges(x[, prms$column$chromosome], IRanges(l, width=1), strand = str);
mcols(gr) <- v;
names(gr) <- rownames(x);
gr;
});
gr0 <- suppressWarnings(Reduce('c', grs));
names(gr0) <- unlist(lapply(grs, names));
gr0;
# Prepare inputs
prepareTable <- function(data, prms) {
for (i in 1:ncol(data)) data[[i]] <- as.vector(data[[i]]);
d <- split(data, data[, prms$column$chromosome]);
c <- prms$chromosome;
c <- c[c %in% names(d)];
d <- d[c];
grs <- lapply(d, function(x) {
x <- x[order(rowMeans(x[, prms$sorting$column, drop=FALSE])), , drop=FALSE];
v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter)$y;
if (prms$sorting$direction == -1) x <- x[nrow(x):1, , drop=FALSE];
if (prms$sorting$position == 'sequential') l <- 1:nrow(x) else l <- round(x[, prms$column$start]/2+x[, prms$column$end]/2);
if (prms$column$strand>0) str <- x[, prms$column$strand] else str <- '*';
gr <- GRanges(x[, prms$column$chromosome], IRanges(l, width=1), strand = str);
mcols(gr) <- v;
names(gr) <- rownames(x);
gr;
});
gr0 <- suppressWarnings(Reduce('c', grs));
names(gr0) <- unlist(lapply(grs, names));
gr0;
};
data <- ImportTable(DownloadFile(yml$input$data, path.input));
gr0  <- prepareTable(data, prms);
gr0
data <- ImportTable(DownloadFile(yml$input$data, path.input));
gr0  <- prepareTable(data, prms);
# Randomization
chrs <- unique(as.vector(seqnames(gr0)));
inds <- lapply(chrs, function(c) which(as.vector(seqnames(gr0))==c));
vals <- mcols(gr0)[[1]];
gr1  <- lapply(1:prms$randomization$round, function(i) {
g <- gr0;
if (prms$randomization$chromosome == 1) {
for (i in 1:length(chrs)) vals[inds[[i]]] <- sample(vals[inds[[i]]], length(inds[[i]]));
mcols(g)[[1]] <- vals;
g;
} else {
mcols(g)[[1]] <- sample(vals, length(vals));
g;
};
});
names(gr1) <- paste0('random_', 1:length(gr1));
# Segmentation
rprm <- prms$call;
segs <- lapply(grs, function(gr) {
fastseg(gr, minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
});
seg0 <- suppressWarnings(Reduce('c', segs));
names(seg0) <- 1:length(seg0);
seg1 <- lapply(gr1, function(g) {gr1
seg <- fastseg(g, minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
names(seg) <- 1:length(seg);
seg;
});
pdf(paste0(path.fig, '/chrom_plot.pdf'), w=9.6, h=4.8);
segPlot(gr0, seg0);
try(dev.off());
l <- paste0('    - ', names(prms$column), ': ', unlist(prms$column, use.names = FALSE));
l1<- paste(l, collapse='\n');
l <- paste0('    - ', names(prms$randomization), ': ', unlist(prms$randomization, use.names = FALSE));
l2 <- paste(l, collapse='\n');
l <- paste0('    - ', names(prms$call), ': ', unlist(prms$call, use.names = FALSE));
l3 <- paste(l, collapse='\n');
l <- paste0('    - ', names(prms$selection), ': ', unlist(prms$selection, use.names = FALSE));
l4 <- paste(l, collapse='\n');
smm <- list('Total number of loci'=length(gr0), 'Total number chromosomes'=length(chrs));
smm$`Range of values` = paste0(format(min(vals)), ' to ', format(max(vals)), ' (mean=', format(mean(vals)), ')');
smm$`Number of segments` = length(seg0);
sz <- seg0$num.mark + 1;
wd <- width(seg0);
mn <- seg0$seg.mean;
smm$`Length of segments` = paste0(min(wd), ' to ', max(wd), ' (mean=', format(mean(wd)), ')');
smm$`Size of segments` = paste0(min(sz), ' to ', max(sz), ' (mean=', format(mean(sz)), ')');
smm$`Mean of segments` = paste0(format(min(mn)), ' to ', format(max(mn)), ' (mean=', format(mean(mn)), ')');
smm <- data.frame(Description=names(smm), Value=as.vector(unlist(smm)), stringsAsFactors = FALSE);
smm
len <- sapply(grs, function(g) max(end(g)));
ttl <- sapply(1:length(len), function(i) sum(len[1:i]));
mid <- (ttl + c(0, ttl[-length(ttl)]))/2;
segPlot(gr0, seg0, plot.type = 'w', pt.cex=0.5);
title(ylab=prms$variable);
axis(3, at=mid, labels=sub('chr', '', prms$chromosome, ignore.case = TRUE), tick = FALSE, line=-1, cex.axis=0.75);
abline(v=c(0, ttl), col='grey');
dst1 <- density(vals);
dst2 <- density(mn);
xlim <- range(c(dst1$x, dst2$x));
ylim <- 1.1*c(0, max(c(dst1$y, dst2$y)));
cols <- c('#5DADE2', '#CB4335');
par(mar=c(5, 5, 2, 2));
plot(0, type='n', xlab=prms$variable, ylab='Frequency', cex.lab=1, xlim=xlim, ylim=ylim, yaxs='i');
lines(dst1, lwd=1, col=cols[1]);
lines(dst2, lwd=2, col=cols[2]);
legend('topleft', cex=1, lwd=1:2, col=cols, bty='n', legend=c('Individual loci', 'Segment means'));
chrs <- unique(as.vector(seqnames(gr0)));
inds <- lapply(chrs, function(c) which(as.vector(seqnames(gr0))==c));
vals <- mcols(gr0)[[1]];
dst1 <- density(vals);
dst2 <- density(mn);
seg0
mn
hist(mn)
plot(density(mn))
dst1 <- density(vals);
dst2 <- density(mn);
xlim <- range(c(dst1$x, dst2$x));
ylim <- 1.1*c(0, max(c(dst1$y, dst2$y)));
cols <- c('#5DADE2', '#CB4335');
par(mar=c(5, 5, 2, 2));
plot(0, type='n', xlab=prms$variable, ylab='Frequency', cex.lab=1, xlim=xlim, ylim=ylim, yaxs='i');
lines(dst1, lwd=1, col=cols[1]);
lines(dst2, lwd=2, col=cols[2]);
legend('topleft', cex=1, lwd=1:2, col=cols, bty='n', legend=c('Individual loci', 'Segment means'));
dst1 <- density(vals);
dst2 <- density(mn);
xlim <- range(c(dst1$x, dst2$x));
ylim <- 1.1*c(0, max(c(dst1$y, dst2$y)));
cols <- c('#5DADE2', '#CB4335');
par(mar=c(5, 5, 2, 2));
plot(0, type='n', xlab=prms$variable, ylab='Frequency', cex.lab=1, xlim=xlim, ylim=ylim, yaxs='i');
lines(dst1, lwd=1, col=cols[1]);
lines(dst2, lwd=2, col=cols[2]);
legend('topleft', cex=1, lwd=1:2, col=cols, bty='n', legend=c('Individual loci', 'Segment means'));
dst1 <- density(vals);
dst2 <- density(mn);
xlim <- range(c(dst1$x, dst2$x));
ylim <- 1.1*c(0, max(c(dst1$y, dst2$y)));
cols <- c('#5DADE2', '#CB4335');
par(mar=c(5, 5, 2, 2));
plot(0, type='n', xlab=prms$variable, ylab='Frequency', cex.lab=1, xlim=xlim, ylim=ylim, yaxs='i');
lines(dst1, lwd=1, col=cols[1]);
lines(dst2, lwd=2, col=cols[2]);
legend('topleft', cex=1, lwd=1:2, col=cols, bty='n', legend=c('Individual loci', 'Segment means'));
plot(density(vals))
plot(density(mn))
sprm <- prms$selection;
segs <- append(seg1, seg0);
sels <- lapply(segs, function(seg) {
rng <- cbind(sprm$min, sprm$max);
seg <- seg[(seg$num.mark+1)>=sprm$size];
if (sprm$negpos==1) seg <- seg[seg$seg.mean>0];
if (sprm$negpos==-1) seg <- seg[seg$seg.mean<0];
mns <- seg$seg.mean;
if (sprm$negpos==0) mns <- abs(mns);
ind <- apply(rng, 1, function(r) which(mns>=r[1] & mns<=r[2]));
sel <- seg[sort(unique(unlist(ind)))];
if (length(sel) < sprm$top) {
if (sprm$negpos == 0) sel <- seg[rev(order(abs(seg$seg.mean)))] else
if (sprm$negpos == 1) sel <- seg[rev(order(seg$seg.mean))] else sel <- seg[order(seg$seg.mean)];
sel <- sel[1:min(nrow(sel), sprm$top)];
sel <- seg[names(seg) %in% names(sel)];
};
sel;
});
# Summary selected
sel0 <- sels[[length(sels)]];
names(sel0) <- paste0('segment_', 1:length(sel0));
fig0 <- sapply(1:length(sel0), function(i) {
s0 <- gr0[as.vector(seqnames(gr0))==as.vector(seqnames(sel0))[i]];
s1 <- s0[sel0$startRow[i]:sel0$endRow[i]];
i1 <- max(1, 2*sel0$startRow[i]-sel0$endRow[i]-1);
i2 <- min(length(s0), 2*sel0$endRow[i]-sel0$startRow[i]+1);
s2 <- s0[i1:i2];
g0 <- seg0[as.vector(seqnames(seg0))==as.vector(seqnames(sel0))[i]];
fn <- paste0(path.fig, '/', names(sel0)[i], '.pdf');
pdf(fn, w=8, h=3.6);
par(mar=c(5, 5, 2, 2));
plot(start(s2), mcols(s2)[[1]], main=paste('Chromosome:', seqnames(sel0)[i]), xlab='Position', ylab=prms$variable,
pch=18, cex=1, col='#88888888');
abline(h=0, col='#888844', lwd=0.5, lty=2);
points(start(s1), mcols(s1)[[1]], pch=18, col='green');
for (j in 1:length(g0)) segments(start(g0)[j], g0$seg.mean[j], end(g0)[j], g0$seg.mean[j], col='blue', lwd=2);
segments(start(sel0)[i], sel0$seg.mean[i], end(sel0)[i], sel0$seg.mean[i], col='red', lwd=2);
try(dev.off());
paste0('figure/', names(sel0)[i], '.pdf');
});
dat0 <- lapply(1:length(sel0), function(i) {
sel <- gr0[as.vector(seqnames(gr0))==as.vector(seqnames(sel0))[i]];
sel <- sel[sel0$startRow[i]:sel0$endRow[i]];
sel <- data[names(sel), , drop=FALSE];
CreateDatatable(sel, paste0(path.tbl, '/', names(sel0)[i]))->x;
sel;
});
tbl0 <- lapply(dat0, function(sel) {
stt <- min(sel[, prms$column$start]);
end <- max(sel[, prms$column$end]);
val <- sel[, prms$column$variable];
c(stt, end, end-stt+1, nrow(sel), mean(val), min(val), max(val), sd(val))
});
tbl0 <- do.call('rbind', tbl0);
tbl0 <- data.frame(as.vector(seqnames(sel0)), tbl0, stringsAsFactors = FALSE);
rownames(tbl0) <- names(dat0) <- names(sel0);
colnames(tbl0) <- c('chromosome', 'start', 'end', 'length', 'size', 'mean', 'minimum', 'maximum', 'variance');
tbl0$loci <- paste0('[table](table/', names(sel0), '.html)');
tbl0$segmentation <- paste0('[figure](figure/', names(sel0), '.pdf)');
tbl0
head(tbl0)
seg0[1:2]
seg0[1:6]
length(seg0)
dim(sel)
dim(tbl0)
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
sprm <- prms$selection;
segs <- append(seg1, seg0);
sels <- lapply(segs, function(seg) {
rng <- cbind(sprm$min, sprm$max);
seg <- seg[(seg$num.mark+1)>=sprm$size];
if (sprm$negpos==1) seg <- seg[seg$seg.mean>0];
if (sprm$negpos==-1) seg <- seg[seg$seg.mean<0];
mns <- seg$seg.mean;
if (sprm$negpos==0) mns <- abs(mns);
ind <- apply(rng, 1, function(r) which(mns>=r[1] & mns<=r[2]));
sel <- seg[sort(unique(unlist(ind)))];
if (length(sel) < sprm$top) {
if (sprm$negpos == 0) sel <- seg[rev(order(abs(seg$seg.mean)))] else
if (sprm$negpos == 1) sel <- seg[rev(order(seg$seg.mean))] else sel <- seg[order(seg$seg.mean)];
sel <- sel[1:min(nrow(sel), sprm$top)];
sel <- seg[names(seg) %in% names(sel)];
};
sel;
});
# Summary selected
sel0 <- sels[[length(sels)]];
names(sel0) <- paste0('segment_', 1:length(sel0));
fig0 <- sapply(1:length(sel0), function(i) {
s0 <- gr0[as.vector(seqnames(gr0))==as.vector(seqnames(sel0))[i]];
s1 <- s0[sel0$startRow[i]:sel0$endRow[i]];
i1 <- max(1, 2*sel0$startRow[i]-sel0$endRow[i]-1);
i2 <- min(length(s0), 2*sel0$endRow[i]-sel0$startRow[i]+1);
s2 <- s0[i1:i2];
g0 <- seg0[as.vector(seqnames(seg0))==as.vector(seqnames(sel0))[i]];
fn <- paste0(path.fig, '/', names(sel0)[i], '.pdf');
pdf(fn, w=8, h=3.6);
par(mar=c(5, 5, 2, 2));
plot(start(s2), mcols(s2)[[1]], main=paste('Chromosome:', seqnames(sel0)[i]), xlab='Position', ylab=prms$variable,
pch=18, cex=1, col='#88888888');
abline(h=0, col='#888844', lwd=0.5, lty=2);
points(start(s1), mcols(s1)[[1]], pch=18, col='green');
for (j in 1:length(g0)) segments(start(g0)[j], g0$seg.mean[j], end(g0)[j], g0$seg.mean[j], col='blue', lwd=2);
segments(start(sel0)[i], sel0$seg.mean[i], end(sel0)[i], sel0$seg.mean[i], col='red', lwd=2);
try(dev.off());
paste0('figure/', names(sel0)[i], '.pdf');
});
dat0 <- lapply(1:length(sel0), function(i) {
sel <- gr0[as.vector(seqnames(gr0))==as.vector(seqnames(sel0))[i]];
sel <- sel[sel0$startRow[i]:sel0$endRow[i]];
sel <- data[names(sel), , drop=FALSE];
CreateDatatable(sel, paste0(path.tbl, '/', names(sel0)[i]))->x;
sel;
});
tbl0 <- lapply(dat0, function(sel) {
stt <- min(sel[, prms$column$start]);
end <- max(sel[, prms$column$end]);
val <- sel[, prms$column$variable];
c(stt, end, end-stt+1, nrow(sel), mean(val), min(val), max(val), sd(val))
});
tbl0 <- do.call('rbind', tbl0);
tbl0 <- data.frame(as.vector(seqnames(sel0)), tbl0, stringsAsFactors = FALSE);
rownames(tbl0) <- names(dat0) <- names(sel0);
colnames(tbl0) <- c('chromosome', 'start', 'end', 'length', 'size', 'mean', 'minimum', 'maximum', 'variance');
tbl0$loci <- paste0('[table](table/', names(sel0), '.html)');
tbl0$segmentation <- paste0('[figure](figure/', names(sel0), '.pdf)');
tbl0
dim(tbl0)
head(tbl0)
dir()
CreateReport('fastseg.yaml')
x <- readRDS('/Users/zhangz/Development/RoCA/data/misc/fastseg/rpkm_twin0.rds')
dim(x)
head(x)
which(colnames(x)=='logFC_Rep0')
CreateReport('fastseg.yaml')
colnames(x)
CreateReport('fastseg.yaml')
setwd("~/Development/RoCA/template/bioc/fastseg/example/rpkm_twin0")
rm(yml)
name.yaml <- 'fastseg.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets',
'RoCA', 'awsomics', 'DEGandMore', 'GenomicRanges', 'fastseg', 'vioplot');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
# Prepare inputs
prepareTable <- function(data, prms) {
for (i in 1:ncol(data)) data[[i]] <- as.vector(data[[i]]);
d <- split(data, data[, prms$column$chromosome]);
c <- prms$chromosome;
c <- c[c %in% names(d)];
d <- d[c];
grs <- lapply(d, function(x) {
x <- x[order(rowMeans(x[, prms$sorting$column, drop=FALSE])), , drop=FALSE];
v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter)$y;
if (prms$sorting$direction == -1) x <- x[nrow(x):1, , drop=FALSE];
if (prms$sorting$position == 'sequential') l <- 1:nrow(x) else l <- round(x[, prms$column$start]/2+x[, prms$column$end]/2);
if (prms$column$strand>0) str <- x[, prms$column$strand] else str <- '*';
gr <- GRanges(x[, prms$column$chromosome], IRanges(l, width=1), strand = str);
mcols(gr) <- v;
names(gr) <- rownames(x);
gr;
});
gr0 <- suppressWarnings(Reduce('c', grs));
names(gr0) <- unlist(lapply(grs, names));
gr0;
};
data <- ImportTable(DownloadFile(yml$input$data, path.input));
gr0  <- prepareTable(data, prms);
# Randomization
chrs <- unique(as.vector(seqnames(gr0)));
inds <- lapply(chrs, function(c) which(as.vector(seqnames(gr0))==c));
vals <- mcols(gr0)[[1]];
gr1  <- lapply(1:prms$randomization$round, function(i) {
g <- gr0;
if (prms$randomization$chromosome == 1) {
for (i in 1:length(chrs)) vals[inds[[i]]] <- sample(vals[inds[[i]]], length(inds[[i]]));
mcols(g)[[1]] <- vals;
g;
} else {
mcols(g)[[1]] <- sample(vals, length(vals));
g;
};
});
names(gr1) <- paste0('random_', 1:length(gr1));
# Segmentation
rprm <- prms$call;
segs <- lapply(grs, function(gr) {
fastseg(gr, minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
});
seg0 <- suppressWarnings(Reduce('c', segs));
names(seg0) <- 1:length(seg0);
seg1 <- lapply(gr1, function(g) {gr1
seg <- fastseg(g, minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
names(seg) <- 1:length(seg);
seg;
});
pdf(paste0(path.fig, '/chrom_plot.pdf'), w=9.6, h=4.8);
segPlot(gr0, seg0);
gr0
length(gr0)
seg0
colnames(x)[18]
gr0
rm(list=ls())
name.yaml <- 'fastseg.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets',
'RoCA', 'awsomics', 'DEGandMore', 'GenomicRanges', 'fastseg', 'vioplot');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
# Prepare inputs
prepareTable <- function(data, prms) {
for (i in 1:ncol(data)) data[[i]] <- as.vector(data[[i]]);
d <- split(data, data[, prms$column$chromosome]);
c <- prms$chromosome;
c <- c[c %in% names(d)];
d <- d[c];
grs <- lapply(d, function(x) {
x <- x[order(rowMeans(x[, prms$sorting$column, drop=FALSE])), , drop=FALSE];
v <- x[, prms$column$variable, drop=FALSE];
if (prms$smoothing$lowess) v[[1]] <- lowess(v[[1]], f=prms$smoothing$span, iter=prms$smoothing$iter)$y;
if (prms$sorting$direction == -1) x <- x[nrow(x):1, , drop=FALSE];
if (prms$sorting$position == 'sequential') l <- 1:nrow(x) else l <- round(x[, prms$column$start]/2+x[, prms$column$end]/2);
if (prms$column$strand>0) str <- x[, prms$column$strand] else str <- '*';
gr <- GRanges(x[, prms$column$chromosome], IRanges(l, width=1), strand = str);
mcols(gr) <- v;
names(gr) <- rownames(x);
gr;
});
gr0 <- suppressWarnings(Reduce('c', grs));
names(gr0) <- unlist(lapply(grs, names));
gr0;
};
data <- ImportTable(DownloadFile(yml$input$data, path.input));
gr0  <- prepareTable(data, prms);
# Randomization
chrs <- unique(as.vector(seqnames(gr0)));
inds <- lapply(chrs, function(c) which(as.vector(seqnames(gr0))==c));
vals <- mcols(gr0)[[1]];
gr1  <- lapply(1:prms$randomization$round, function(i) {
g <- gr0;
if (prms$randomization$chromosome == 1) {
for (i in 1:length(chrs)) vals[inds[[i]]] <- sample(vals[inds[[i]]], length(inds[[i]]));
mcols(g)[[1]] <- vals;
g;
} else {
mcols(g)[[1]] <- sample(vals, length(vals));
g;
};
});
names(gr1) <- paste0('random_', 1:length(gr1));
# Segmentation
rprm <- prms$call;
segs <- lapply(grs, function(gr) {
fastseg(gr, minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
});
grs
segs <- lapply(prms$chromosome, function(chr) {
fastseg(gr[seqnames(gr)==chr], minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
});
segs <- lapply(prms$chromosome, function(chr) {
fastseg(gr0[seqnames(gr0)==chr], minSeg=rprm$minSeg, type=rprm$type, alpha=rprm$alpha, delta=rprm$delta,
squashing=rprm$squashing, cyberWeight=rprm$cyberWeight);
});
seg0 <- suppressWarnings(Reduce('c', segs));
names(seg0) <- 1:length(seg0);
seg0
length(seg0)
rm(list=ls())
setwd("~/Development/RoCA/template/bioc/fastseg")
CreateReport('fastseg.yaml')
CreateReport('fastseg.yaml')
CreateReport('fastseg.yaml')
CreateReport('fastseg.yaml')
require(RoCA)
CreateReport('fastseg.yaml')
x[1:2, ]
x <- readRDS('/Users/zhangz/Development/RoCA/data/misc/fastseg/rpkm_twin0.rds')
names(x)
CreateReport('fastseg.yaml')
require('RoCA')
CreateReport('fastseg.yaml')
