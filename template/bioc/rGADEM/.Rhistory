res[[1]][[3]][1:6, ]
pwm.set[[1]]
pwm <- pwm.set[[1]]
pwm
pwm <- as.vector(pwm)
pwm
# Re-match
pwm.set <- lapply(res, function(x) as.vector(x[[3]][[1]]));
matches <- ScorePWMWrapper(pwm.set, seq, num.cluster = prms$rematch$cluster, both.strand = TRUE, local.max = TRUE,
sampling = prms$rematch$sampling, pvalue = prms$rematch$pvalue);
head(matches[[1]])
pwm <- pwm.set[[1]]
pwm
frq=NA
seq=NA
num=4096
if(identical(NA, frq) | length(frq)!=4) frq <- rep(0.25, 4);
if (!identical(seq, NA)) {
if (is.character(seq) | is.factor(seq)) seq <- DNAStringSet(seq);
if (class(seq) == 'DNAString') seq <- DNAStringSet(seq);
if (class(seq) == 'DNAStringSet') {
cnt <- colSums(alphabetFrequency(seq)[, 1:4]);
frq <- cnt/sum(cnt);
}
};
num
# Random scores
s <- sapply(1:num, function(i) sum( apply(pwm, 2, function(x) sample(x, 1, prob=frq)) ));
frq
# PWM matrix
pwm.set <- lapply(pwm.set, function(pwm) if (is.character(pwm) | is.factor(pwm) | class(pwm)=='DNAStringSet') ConvertSeq2PWM(pwm) else pwm);
pwm <- pwm.set[[1]]
if(identical(NA, frq) | length(frq)!=4) frq <- rep(0.25, 4);
if (!identical(seq, NA)) {
if (is.character(seq) | is.factor(seq)) seq <- DNAStringSet(seq);
if (class(seq) == 'DNAString') seq <- DNAStringSet(seq);
if (class(seq) == 'DNAStringSet') {
cnt <- colSums(alphabetFrequency(seq)[, 1:4]);
frq <- cnt/sum(cnt);
}
};
# Random scores
s <- sapply(1:num, function(i) sum( apply(pwm, 2, function(x) sample(x, 1, prob=frq)) ));
length(s)
head(s)
pwm
x <- matches[[1]]
dim(x)
head(x)
?matchPWM
tbl <- matches[[]1]
tbl <- matches[[1]]
tbl[1:2, ]
dim(tbl)
tbl <- matches[[i]];
i <- 1
tbl <- matches[[i]];
tbl <- tbl[, c(7, 2:6, 1)];
colnames(tbl)[1] <- 'match';
if (exists('rng')) {
tbl$seqChr    <- as.vector(seqnames(rng))[tbl$seqID];
tbl$seqStart  <- start(rng)[tbl$seqID];
tbl$seqEnd    <- end(rng)[tbl$seqID];
tbl$seqStrand <- as.vector(strand(rng))[tbl$seqID];
};
head(tbl)
tbl[1:2, ]
tbl$seqID
as.vector(seqnames(rng))
tbl$seqChr    <- as.vector(seqnames(rng)[tbl$seqID]);
tbl$seqChr    <- as.vector(seqnames(rng[tbl$seqID]));
tbl$seqStart  <- start(rng[tbl$seqID]);
tbl$seqEnd    <- end(rng[tbl$seqID]);
tbl$seqStrand <- as.vector(strand(rng)[tbl$seqID]);
tbl[1:2, ]
tbl$seqChr    <- as.vector(seqnames(rng[tbl$seqID]));
tbl$seqStart  <- start(rng[tbl$seqID]);
tbl$seqEnd    <- end(rng[tbl$seqID]);
tbl$seqStrand <- as.vector(strand(rng[tbl$seqID]));
head(tbl)
names(matches)
fn <- sapply(1:length(matches), function(i) {
tbl <- matches[[i]];
tbl <- tbl[, c(7, 2:6, 1)];
colnames(tbl)[1] <- 'match';
if (exists('rng')) {
tbl$seqChr    <- as.vector(seqnames(rng[tbl$seqID]));
tbl$seqStart  <- start(rng[tbl$seqID]);
tbl$seqEnd    <- end(rng[tbl$seqID]);
tbl$seqStrand <- as.vector(strand(rng[tbl$seqID]));
};
CreateDatatable(tbl, paste(path.tbl, '/Rematch_', names(matches)[i], '.html', sep=''),
caption = paste(names(res)[i], con[i], sep=': '));
write.table(tbl, paste(path.tbl, '/Rematch_', names(matches)[i], '.txt', sep=''), sep='\t', qu=FALSE);
});
fn
# summarize
stat <- sapply(matches, function(t) {
ns <- c(nrow(t), length(unique(t[, 1])));
ln <- max(t[,3]-t[,2]+1, na.rm=TRUE);
sc <- c(min(t$score), mean(t$score), max(t$score));
fq <- ns[1]/(sum(wid)/1000);
sr <- round(100*nrow(t[t$strand==1, , drop=FALSE])/nrow(t), 2);
c(ln, fq, ns, sr, sc);
});
stat <- t(stat);
lnk  <- paste('[', rownames(stat), '](', paste('table/Rematch_', names(res), '.html', sep=''), ')', sep='');
stat <- data.frame(Motif=lnk, stat, stringsAsFactors = FALSE);
dimnames(stat) <- list(names(res), c('Motif', 'Len_Motif', 'Match_Per_Kb', 'Num_Match', 'Num_Seq', 'Strand(%)',
'Min_Score', 'Mean_Score', 'Max_Score'));
stat
t <- matches[[1]]
dim(t)
head(t)
ns <- c(nrow(t), length(unique(t[, 1])));
ns
ln
ln <- max(t[,3]-t[,2]+1, na.rm=TRUE);
ln
# summarize
stat <- sapply(matches, function(t) {
ns <- c(nrow(t), length(unique(t[, 1])));
ln <- max(t[,3]-t[,2]+1, na.rm=TRUE);
sc <- round(c(min(t$score), mean(t$score), max(t$score)), 2);
fq <- ns[1]/(sum(wid-ln)/1000);
sr <- round(100*nrow(t[t$strand==1, , drop=FALSE])/nrow(t), 2);
c(ln, fq, ns, sr, sc);
});
stat
stat <- t(stat);
t
stat
head(t)
stat
stat <- sapply(matches, function(t) {
ns <- c(nrow(t), length(unique(t[, 1])));
ln <- max(t[,3]-t[,2]+1, na.rm=TRUE);
sc <- round(c(min(t$score), mean(t$score), max(t$score)), 2);
fq <- ns[1]/(sum(wid-ln)/1000);
sr <- round(100*nrow(t[t$strand==1, , drop=FALSE])/nrow(t), 2);
c(ln, fq, ns, sr, sc);
});
stat <- t(stat);
lnk  <- paste('[', rownames(stat), '](', paste('table/Rematch_', names(res), '.html', sep=''), ')', sep='');
stat <- data.frame(Motif=lnk, stat, stringsAsFactors = FALSE);
dimnames(stat) <- list(names(res), c('Motif', 'Len_Motif', 'Match_Per_Kb', 'Num_Match', 'Num_Seq', 'Strand(%)',
'Min_Score', 'Mean_Score', 'Max_Score'));
head(stat)
m <- matches[[1]]
dim(m)
CreateReport('rGADEM.yaml')
rm(list=ls())
name.yaml <- 'rGADEM.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'GenomicFeatures', 'rGADEM',
'RoCA', 'awsomics', 'Agri');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
tp <- prms$input$type[1];
if (tp == 'DNAStringSet') {
seq <- ImportR(DownloadFile(yml$input$seq, path.input));
} else if (tp == 'character') {
seq <- ImportVector(DownloadFile(yml$input$seq, path.input));
seq <- DNAStringSet(seq);
} else if (tp == 'GRanges' | tp == 'bed') {
if (exists('rng')) rm(rng);
if (tp == 'GRanges') rng <- ImportR(DownloadFile(yml$input$seq, path.input)) else {
bed <- ImportTable(DownloadFile(yml$input$seq, path.input), rownames = FALSE, colnames = FALSE);
if (ncol(bed) >= 6) str <- as.vector(bed[, 6]) else str <- rep('*', nrow(bed));
rng <- GRanges(bed[, 1], IRanges(bed[, 2], bed[, 3]), strand=str);
if (ncol(bed) >= 4) names(rng) <- as.vector(bed[, 4]) else names(rng) <- paste('Seq', 1:length(rng), sep='_');
}
require(prms$input$reference, character.only = TRUE);
gname <- strsplit(prms$input$reference, '\\.')[[1]][2];
assign('gnm', get(gname));
genome(rng) <- genome(gnm);
seq <- getSeq(gnm, rng);
} else {
stop("No input sequences.\n");
}
nms <- names(seq);
if (is.null(nms)) nms <- paste('Seq', 1:length(seq), sep='_');
ind <- which(is.na(nms) | nms=='');
if (length(ind) > 0) nms[ind] <- paste('Seq', ind, sep='_');
names(seq) <- nms;
if (exists('rng')) names(rng) <- names(seq);
wid <- width(seq);
names(wid) <- names(seq);
?GADEM
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', names(res), ')')
name.yaml <- 'rGADEM.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'GenomicFeatures', 'rGADEM',
'RoCA', 'awsomics', 'Agri');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
tp <- prms$input$type[1];
if (tp == 'DNAStringSet') {
seq <- ImportR(DownloadFile(yml$input$seq, path.input));
} else if (tp == 'character') {
seq <- ImportVector(DownloadFile(yml$input$seq, path.input));
seq <- DNAStringSet(seq);
} else if (tp == 'GRanges' | tp == 'bed') {
if (exists('rng')) rm(rng);
if (tp == 'GRanges') rng <- ImportR(DownloadFile(yml$input$seq, path.input)) else {
bed <- ImportTable(DownloadFile(yml$input$seq, path.input), rownames = FALSE, colnames = FALSE);
if (ncol(bed) >= 6) str <- as.vector(bed[, 6]) else str <- rep('*', nrow(bed));
rng <- GRanges(bed[, 1], IRanges(bed[, 2], bed[, 3]), strand=str);
if (ncol(bed) >= 4) names(rng) <- as.vector(bed[, 4]) else names(rng) <- paste('Seq', 1:length(rng), sep='_');
}
require(prms$input$reference, character.only = TRUE);
gname <- strsplit(prms$input$reference, '\\.')[[1]][2];
assign('gnm', get(gname));
genome(rng) <- genome(gnm);
seq <- getSeq(gnm, rng);
} else {
stop("No input sequences.\n");
}
nms <- names(seq);
if (is.null(nms)) nms <- paste('Seq', 1:length(seq), sep='_');
ind <- which(is.na(nms) | nms=='');
if (length(ind) > 0) nms[ind] <- paste('Seq', ind, sep='_');
names(seq) <- nms;
if (exists('rng')) names(rng) <- names(seq);
wid <- width(seq);
names(wid) <- names(seq);
frq <- alphabetFrequency(seq)[, 1:4];
gc  <- round(100*rowSums(frq[, 2:3])/rowSums(frq), 2);
cg1 <- sapply(gregexpr2('CG', seq), function(ind) length(ind[ind>0]));
cg2 <- sapply(gregexpr2('GC', seq), function(ind) length(ind[ind>0]));
cpg <- 100*(cg1+cg2)/(seqlengths(seq)-1);
dup <- sapply(c('AA', 'CC', 'GG' ,'TT'), function(x) sapply(gregexpr2(x, seq), function(ind) length(ind[ind>0])));
di  <- 100*(rowSums(dup))/(seqlengths(seq)-1);
tbl <- rbind(round(summary(wid), 1), round(summary(gc), 2), round(summary(cpg), 2), round(summary(di), 2));
rownames(tbl) <- c('Length (bp)', 'GC (%)', 'CpG (%)', 'Duplex (%)');
tbl1 <- data.frame(rng, stringsAsFactors = FALSE);
colnames(tbl1)[1:5] <- c('Chromosome', 'Start', 'End', 'Length', 'Strand');
tbl1 <- cbind(ID=names(rng), tbl1);
tbl1 <- tbl1[, c(1, 2, 3, 4, 6, 5)];
colnames(dup) <- c('AA%', 'CC%', 'GG%', 'TT%');
pct <- round(apply(frq, 2, function(x) 100*x/seqlengths(seq)),2 );
colnames(pct) <- c('A%', 'C%', 'G%', 'T%');
tbl1 <- cbind(tbl1, pct, 'CpG%'=round(cpg, 2), dup);
for (i in 1:ncol(tbl1)) tbl1[[i]] <- as.vector(tbl1[[i]]);
CreateDatatable(tbl1, rownames = FALSE, paste0(path.tbl, '/sequence_summary'));
write.table(tbl1, row.names = FALSE, col.names = TRUE, sep='\t', qu=FALSE, paste0(path.tbl, '/sequence_summary.csv'))
gadem <- GADEM(seq,
genome  = gnm,
numEM   = prms$GADEM$numEM,
pValue  = prms$GADEM$pValue,
maskR   = prms$GADEM$maskR,
nmotifs = prms$GADEM$nmotifs);
res <- RetrieveGadem(gadem);
res <- lapply(res, function(x) { print(x[[2]]);
tbl <- x[[3]][, c(1, 7, 5, 8, 6)];
tbl$seqName <- names(seq)[tbl$seqID];
if (exists('rng')) {
tbl$seqChr    <- as.vector(seqnames(rng))[tbl$seqID];
tbl$seqStart  <- start(rng)[tbl$seqID];
tbl$seqEnd    <- end(rng)[tbl$seqID];
tbl$seqStrand <- as.vector(strand(rng))[tbl$seqID];
tbl$seqLength <- tbl$seqEnd - tbl$seqStart + 1;
};
x[[3]] <- tbl;
x;
});
names(res) <- paste('Motif', 1:length(res), sep='_');
saveRDS(res, paste(path.r, 'GADEM.rds', sep='/'));
num <- length(res);
con <- consensus(gadem);
len <- nchar(con);
if (num == 0) {
fig <- tbl <- matrix('**No motif found**', dimnames = list('', ''));
} else {
################################################################
# Plot Logo
sapply(1:num, function(i) {
png(paste(path.fig, '/Logo_', names(res)[i], '.png', sep=''), width = 640, height = 320, res = 100);
plot(gadem[i], main=names(res)[i]);
dev.off();
pdf(paste(path.fig, '/Logo_', names(res)[i], '.pdf', sep=''), width = 6, height = 4);
plot(gadem[i]);
dev.off();
}) -> x;
logo <- paste(' ![](figure/Logo_', names(res), '.png)', sep='');
################################################################
################################################################
# Plot match position
sapply(1:num, function(i) {
mtch <- res[[i]][[3]];
pos <- mtch$pos;
str <- as.vector(mtch$strand);
pos[str=='+'] <- pos[str=='+'] + len[i]/2;
pos[str=='-'] <- pos[str=='-'] - len[i]/2;
pos <- 100*pos/(wid[mtch$seqID] - len[i]/2);
pos[mtch$seqStrand=='-'] <- 100 - pos[mtch$seqStrand=='-']
png(paste(path.fig, '/Position_', names(res)[i], '.png', sep=''), width = 480, height = 320, res = 100);
par(mar=c(5, 5, 3, 1));
hist(pos, breaks=seq(0, 100, 5+(nrow(mtch)<50)*5), xaxt='n', xlab='Position', ylab='# of matches', cex.lab=1.5,
col='lightgrey', main=names(res)[i], cex.main=2);
axis(1, at=c(0, 50, 100), label=c('Start', 'Center', 'End'));
dev.off();
pdf(paste(path.fig, '/Position_', names(res)[i], '.pdf', sep=''), width = 4.8, height = 3.2);
par(mar=c(5, 5, 3, 1));
hist(pos, breaks=seq(0, 100, 5+(nrow(mtch)<50)*5), xaxt='n', xlab='Position', ylab='# of matches', cex.lab=1.5,
col='lightgrey', main=names(res)[i], cex.main=2);
axis(1, at=c(0, 50, 100), label=c('Start', 'Center', 'End'));
dev.off();
}) -> x;
posi <- paste(' ![](figure/Position_', names(res), '.png)', sep='');
################################################################
fig  <- cbind("PWM Logo"=logo, "Matching position"=posi);
################################################################
fn  <- sapply(1:num, function(i) {
CreateDatatable(FormatNumeric(res[[i]][[3]]), paste(path.tbl, '/Match_', names(res)[i], '.html', sep=''),
rownames = FALSE, caption = paste(names(res)[i], con[i], sep=': '));
CreateDatatable(FormatNumeric(res[[i]][[1]]), paste(path.tbl, '/PWM_',   names(res)[i], '.html', sep=''),
rownames = FALSE, caption = paste(names(res)[i], con[i], sep=': '));
write.table(res[[i]][[3]], paste(path.tbl, '/Match_', names(res)[i], '.txt', sep=''), row.names = FALSE,
sep='\t', qu=FALSE);
write.table(res[[i]][[1]], paste(path.tbl, '/PWM_', names(res)[i], '.txt', sep=''), row.names = FALSE,
sep='\t', qu=FALSE);
});
gc  <- sapply(res, function(x) round(mean(100*colSums(x[[1]][c('C', 'G'), ])), 2));
rev <- sapply(res, function(x) 100*nrow(x[[3]][x[[3]]$strand=='-', , drop=FALSE])/nrow(x[[3]]));
tbl <- data.frame(Name = names(res), Consensus = con, 'GC_Percent' = gc, Num_Base = nchar(con),
Num_Match = nOccurrences(gadem),
Num_Seq = sapply(res, function(x) length(unique(x[[3]]$seqID))),
Rev_Comp = round(rev, 1),  stringsAsFactors = FALSE);
tbl[[1]] <- paste('[', tbl[[1]], '](table/Match_', names(res), '.html)', sep='');
tbl[[2]] <- paste('[', tbl[[2]], '](table/PWM_', names(res), '.html)', sep='');
colnames(tbl)[3] <- c('GC (%)');
colnames(tbl)[7] <- c('RevComp (%)');
};
if (length(res) == 0) {
stat <- matrix('**No motif found**', dimnames = list('', ''));
} else {
# Re-match
pwm.set <- lapply(res, function(x) as.vector(x[[3]][[1]]));
matches <- ScorePWMWrapper(pwm.set, seq, num.cluster = prms$rematch$cluster, both.strand = TRUE, local.max = TRUE,
sampling = prms$rematch$sampling, pvalue = prms$rematch$pvalue);
fn <- sapply(1:length(matches), function(i) {
tbl <- matches[[i]];
tbl <- tbl[, c(7, 2:6, 1)];
colnames(tbl)[1] <- 'match';
if (exists('rng')) {
tbl$seqChr    <- as.vector(seqnames(rng[tbl$seqID]));
tbl$seqStart  <- start(rng[tbl$seqID]);
tbl$seqEnd    <- end(rng[tbl$seqID]);
tbl$seqStrand <- as.vector(strand(rng[tbl$seqID]));
};
CreateDatatable(tbl, paste(path.tbl, '/Rematch_', names(matches)[i], '.html', sep=''),
caption = paste(names(res)[i], con[i], sep=': '));
write.table(tbl, paste(path.tbl, '/Rematch_', names(matches)[i], '.txt', sep=''), sep='\t', qu=FALSE);
});
# summarize
stat <- sapply(matches, function(t) {
ns <- c(nrow(t), length(unique(t[, 1])));
ln <- max(t[,3]-t[,2]+1, na.rm=TRUE);
sc <- round(c(min(t$score), mean(t$score), max(t$score)), 2);
fq <- round(ns[1]/(sum(wid-ln)/1000), 3);
sr <- round(100*nrow(t[t$strand==-1, , drop=FALSE])/nrow(t), 2);
c(ln, fq, ns, sr, sc);
});
stat <- t(stat);
lnk  <- paste('[', rownames(stat), '](', paste('table/Rematch_', names(res), '.html', sep=''), ')', sep='');
stat <- data.frame(Motif=lnk, stat, stringsAsFactors = FALSE);
dimnames(stat) <- list(names(res), c('Motif', 'Len_Motif', 'Match_Per_Kb', 'Num_Match', 'Num_Seq', 'RevComp (%)',
'Min_Score', 'Mean_Score', 'Max_Score'));
}
fn <- paste(path.fig, 'rematch_position.png', sep='/');
if (length(res) == 0) {
png(fn, width = 640, height = 120);
par(mar=c(1,1,1,1));
frame();
text(0.5, 0, pos=3, label='No motif found', cex=2);
dev.off();
} else {
png(fn, width = 960, height = 360*ceiling(length(res)/2));
par(mfrow=c(ceiling(length(res)/2), 2));
sapply(names(matches), function(nm) {
m   <- matches[[nm]];
pos <- m$start;
ttl <- wid[m$seqID];
pvl <- m$pvalue;
len <- max(nchar(m$seq));
PlotPWMMatchPosition(pos, ttl, pvl, len);
title(main=nm, cex=2);
}) -> x;
dev.off();
pdf(sub('.png$', '.pdf', fn), width = 9.6, height = 3.6*ceiling(length(res)/2));
par(mfrow=c(ceiling(length(res)/2), 2));
sapply(names(matches), function(nm) {
m   <- matches[[nm]];
pos <- m$start;
ttl <- wid[m$seqID];
pvl <- m$pvalue;
len <- max(nchar(m$seq));
PlotPWMMatchPosition(pos, ttl, pvl, len);
title(main=nm, cex=2);
}) -> x;
dev.off();
}
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', names(res), ')')
sessionInfo();
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', names(res), ')')
ln
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', names(res), '.txt)')
ln
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', names(res), '.txt)')
ln <- paste(ln, collapse=' **|** ');
ln
names(res)[1]->nm
nm
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln <- paste(ln, collapse=' **|** ');
ln
lns <- sapply(names(res), function(nm) {
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln <- paste(ln, collapse=' **|** ');
paste0('\t\t**', nm, ':** ', ln);
});
lns
lns <- sapply(names(res), function(nm) {
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln <- paste(ln, collapse=' **|** ');
paste0('\t\t**', nm, ':** ', ln);
});
lns <- as.vector(lns);
lns
paste(lns, collapse='\n')
CreateReport('rGADEM.yaml')
rng
exists(rng)
exists('rng')
?rm
args(rm)
rm(rng)
rm(rng)
if (exists('rng')) rm(rng);
lns <- sapply(names(res), function(nm) {
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln <- paste(ln, collapse=' **|** ');
paste0('\t\t -**', nm, ':** ', ln);
});
lns <- as.vector(lns);
l   <- paste(lns, collapse='\n');
l
CreateReport('rGADEM.yaml')
CreateReport('rGADEM.yaml')
lns <- sapply(names(res), function(nm) {
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln <- paste(ln, collapse=' **|** ');
paste0('\t\t- **', nm, ':** ', ln);
});
lns <- as.vector(lns);
l   <- paste(lns, collapse='\n');
l
lns
tbl1
CreateReport('rGADEM.yaml')
lns <- sapply(names(res), function(nm) {
ln <- paste0('[', c('PWM', 'GADEM hits', 'All matches'), '](table/', c('PWM', 'Match', 'Rematch'), '_', nm, '.txt)')
ln <- paste(ln, collapse=' **|** ');
paste0('\t- **', nm, ':** ', ln);
});
lns <- as.vector(lns);
l   <- paste(lns, collapse='\n');
l   <- paste0('\n', l);
l
