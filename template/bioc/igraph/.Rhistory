path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
home.url <- Link2Home(yml$home);
############################################################################################################
#####################################  Loading packages and data   #########################################
############################################################################################################
prs <- ImportTable(yml$input$pairs);
igrph <- graph_from_data_frame(prs[, 1:2], FALSE);
if (file.exists(yml$input$background)) bgd <- ImportVector(yml$input$background) else bgd <- NULL;
set.mpp <- ImportList(yml$input$mapping);
set.mpp <- ImportList(yml$input$mapping);
rm(yml)
name.yaml <- 'igraph.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'GenomicRanges', 'RoCA',
'awsomics', 'igraph', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
home.url <- Link2Home(yml$home);
############################################################################################################
#####################################  Loading packages and data   #########################################
############################################################################################################
prs <- ImportTable(yml$input$pairs);
igrph <- graph_from_data_frame(prs[, 1:2], FALSE);
if (file.exists(yml$input$background)) bgd <- ImportVector(yml$input$background) else bgd <- NULL;
set.mpp <- ImportList(yml$input$mapping);
set.ann <- ImportTable(yml$input$annotation);
set.num <- sapply(set.mpp, length);
set.mpp <- set.mpp[set.num>=prms$enrichment$size.min&set.num<=prms$enrichment$size.max];
set.ann <- set.ann[rownames(set.ann) %in% names(set.mpp), , drop=FALSE];
set.mpp <- set.mpp[rownames(set.ann)];
cnm <- colnames(prs);
if ('weight' %in% tolower(cnm)) wgt <- prs[, which(tolower(cnm)=='weight')[1]] else wgt <- rep(1, nrow(prs));
ngb <- table(c(as.vector(prs[, 1]), as.vector(prs[, 2])));
msz <- yml$parameter$cluster$size;
noi <- yml$parameter$cluster$core;
# Summarize graph
nds <- c(as.vector(prs[,1]), as.vector(prs[, 2]));
num <- table(nds);
num.edge <- length(E(igrph));
num.node <- length(V(igrph));
set.all  <- unlist(set.mpp, use.names=FALSE);
bgd <- unique(bgd[bgd %in% set.all]);
if (length(bgd) == 0) bgd <- unique(set.all);
inc.node <- intersect(names(V(igrph)), set.all);
############################################################################################################
label.hub <- function(label, cluster, count) {
top <- lapply(cluster, function(c) rev(sort(count[c])));
top <- as.vector(unlist(lapply(top, function(x) names(x)[x==x[1]])));
label[top] <- top;
label;
};
plot.full.graph <- function(graph, cluster, label, title) {
V(graph)$label <- as.vector(label[V(graph)$name]);
plot(graph, mark.groups = by(seq_along(cluster$membership), cluster$membership, invisible),
vertex.size=3, mark.shape = 0.75, mark.expand = 15);
title(main=title, cex.main=1.5);
};
plot.sub.graph <- function(graph, member, title) {
gr <- induced.subgraph(graph, member);
V(gr)$label <- V(gr)$name;
plot(gr, vertex.size=4);
title(main=title, cex.main=1.5);
};
run.ora <- function(cluster.list, mapping, background, annotation, method, dir) {
ora <- lapply(cluster.list, function(cl) OraWrapper(cl, mapping, background, 1));
ora <- lapply(ora, function(o) o[order(o[, 6]), ]);
ora <- lapply(ora, function(o) cbind(ID=rownames(o), o, annotation[rownames(o), ]));
names(ora) <- paste('Cluster', 1:length(ora), sep='_');
saveRDS(ora, paste(path.r, '/ORA_', method, '.rds', sep=''));
ind <- which(tolower(colnames(ora[[1]]))=='url');
if (length(ind)>0) {
ora <- lapply(ora, function(o) {
o[[1]] <- AddHref(o[[1]], o[, ind]);
o[, -ind];
})
};
ora <- lapply(ora, function(o) o[o[, 'PValue']<0.05, ])
fn <- sapply(1:length(cluster.list), function(i) {
fn <- paste(dir, '/ORA_', method, '_', names(ora)[i], '.html', sep='');
CreateDatatable(ora[[i]], fn, rownames = FALSE, caption = paste(method, '; Cluster_', i, sep=''));
fn;
});
list(file=fn, top=lapply(ora, function(o) o[1, ]));
};
summarize.cluster <- function(cluster.list, ora, ll) {
tp <- do.call('rbind', ora[[2]]);
ll <- ll[ll!=''];
cr <- lapply(cluster.list, function(c) intersect(c, ll));
cr <- as.vector(sapply(cr, function(x) paste(x, collapse="; ")));
cls <- paste('[Cluster_', 1:length(cluster.list), '](', ora[[1]], ')', sep='');
tbl <- data.frame(Cluster=cls, Size=sapply(cluster.list, length), Core_Member=cr, Top_Set=tp[[1]],
Top_OddsRatio=tp$OddsRatio, Top_PValue=tp$PValue, Top_FDR=tp$FDR, stringsAsFactors = FALSE);
ind <- which(tolower(colnames(tp))=='name');
tbl;
};
par(mar=c(5,5,2,2));
hist(num, xlab='Number of edges per node', ylab='Count of nodes', cex.lab=2, main='', col='lightgrey');
cluster.fg <- cluster_fast_greedy(igrph, weights = wgt);
cluster.wt <- cluster_walktrap(igrph, weights = wgt);
cluster.eb <- cluster_edge_betweenness(igrph, weights = wgt);
clusters <- list(fast_greedy=cluster.fg, walk_trap=cluster.wt, edge_betweenness=cluster.eb);
clts     <- lapply(clusters, function(c) {
m <- membership(c);
c <- split(names(m), m);
c[sapply(c, length)>=msz]
});
lbl <- V(igrph)$name;
names(lbl) <- lbl;
if (noi > 0) lbl[lbl %in% names(ngb)[ngb<noi]] <- '';
cl <- clts[[1]];
ll <- label.hub(lbl, cl, ngb);
plot.full.graph(igrph, clusters[[1]], ll, 'Fast greedy');
par(mfrow=c(ceiling(length(cl)/3), 3));
for (i in 1:length(cl)) plot.sub.graph(igrph, cl[[i]], paste('Cluster', i, sep='_'));
ora <- run.ora(cl, set.mpp, bgd, set.ann, 'FastGreedy', path.tbl);
tbl <- summarize.cluster(cl, ora, ll);
cl <- clts[[2]];
ll <- label.hub(lbl, cl, ngb);
plot.full.graph(igrph, clusters[[2]], ll, 'Walktrap');
par(mfrow=c(ceiling(length(cl)/3), 3));
for (i in 1:length(cl)) plot.sub.graph(igrph, cl[[i]], paste('Cluster', i, sep='_'));
ora <- run.ora(cl, set.mpp, bgd, set.ann, 'Walktrap', path.tbl);
tbl <- summarize.cluster(cl, ora, ll);
cl <- clts[[3]];
ll <- label.hub(lbl, cl, ngb);
plot.full.graph(igrph, clusters[[3]], ll, 'Edge Betweenness');
par(mfrow=c(ceiling(length(cl)/3), 3));
for (i in 1:length(cl)) plot.sub.graph(igrph, cl[[i]], paste('Cluster', i, sep='_'));
ora <- run.ora(cl, set.mpp, bgd, set.ann, 'EdgeBetweenness', path.tbl);
tbl <- summarize.cluster(cl, ora, ll);
sessionInfo();
cl <- clts[[1]];
ll <- label.hub(lbl, cl, ngb);
plot.full.graph(igrph, clusters[[1]], ll, 'Fast greedy');
head(ll)
graph <- igrph
cluster <- cl
label <- ll
title <- 'Fast Greedy'
sub <- induced.subgraph(graph, unlist(cl))
class(cluster)
names(cluster)
cl <- clusters[[1]]
cluster <- cl
class(cluster)
str(clusters)
str(cluster)
cluster$membership
dir()
library(RoCA)
dir()
CreateReport('igraph.yaml')
CreateReport('igraph.yaml')
name.yaml <- 'igraph.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'GenomicRanges', 'RoCA',
'awsomics', 'igraph', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
home.url <- Link2Home(yml$home);
############################################################################################################
#####################################  Loading packages and data   #########################################
############################################################################################################
prs <- ImportTable(yml$input$pairs);
igrph <- graph_from_data_frame(prs[, 1:2], FALSE);
if (file.exists(yml$input$background)) bgd <- ImportVector(yml$input$background) else bgd <- NULL;
set.mpp <- ImportList(yml$input$mapping);
set.ann <- ImportTable(yml$input$annotation);
set.num <- sapply(set.mpp, length);
set.mpp <- set.mpp[set.num>=prms$enrichment$size.min&set.num<=prms$enrichment$size.max];
set.ann <- set.ann[rownames(set.ann) %in% names(set.mpp), , drop=FALSE];
set.mpp <- set.mpp[rownames(set.ann)];
cnm <- colnames(prs);
if ('weight' %in% tolower(cnm)) wgt <- prs[, which(tolower(cnm)=='weight')[1]] else wgt <- rep(1, nrow(prs));
ngb <- table(c(as.vector(prs[, 1]), as.vector(prs[, 2])));
msz <- yml$parameter$cluster$size;
noi <- yml$parameter$cluster$core;
# Summarize graph
nds <- c(as.vector(prs[,1]), as.vector(prs[, 2]));
num <- table(nds);
num.edge <- length(E(igrph));
num.node <- length(V(igrph));
set.all  <- unlist(set.mpp, use.names=FALSE);
bgd <- unique(bgd[bgd %in% set.all]);
if (length(bgd) == 0) bgd <- unique(set.all);
inc.node <- intersect(names(V(igrph)), set.all);
############################################################################################################
############################################################################################################
#####################################  Loading packages and data   #########################################
############################################################################################################
prs <- ImportTable(yml$input$pairs);
igrph <- graph_from_data_frame(prs[, 1:2], FALSE);
if (file.exists(yml$input$background)) bgd <- ImportVector(yml$input$background) else bgd <- NULL;
set.mpp <- ImportList(yml$input$mapping);
set.ann <- ImportTable(yml$input$annotation);
set.num <- sapply(set.mpp, length);
set.mpp <- set.mpp[set.num>=prms$enrichment$size.min&set.num<=prms$enrichment$size.max];
set.ann <- set.ann[rownames(set.ann) %in% names(set.mpp), , drop=FALSE];
set.mpp <- set.mpp[rownames(set.ann)];
cnm <- colnames(prs);
if ('weight' %in% tolower(cnm)) wgt <- prs[, which(tolower(cnm)=='weight')[1]] else wgt <- rep(1, nrow(prs));
ngb <- table(c(as.vector(prs[, 1]), as.vector(prs[, 2])));
msz <- yml$parameter$cluster$size;
noi <- yml$parameter$cluster$core;
# Summarize graph
nds <- c(as.vector(prs[,1]), as.vector(prs[, 2]));
num <- table(nds);
num.edge <- length(E(igrph));
num.node <- length(V(igrph));
set.all  <- unlist(set.mpp, use.names=FALSE);
bgd <- unique(bgd[bgd %in% set.all]);
if (length(bgd) == 0) bgd <- unique(set.all);
inc.node <- intersect(names(V(igrph)), set.all);
############################################################################################################
label.hub <- function(label, cluster, count) {
top <- lapply(cluster, function(c) rev(sort(count[c])));
top <- as.vector(unlist(lapply(top, function(x) names(x)[x==x[1]])));
label[top] <- top;
label;
};
plot.full.graph <- function(graph, cluster, label, title) {
V(graph)$label <- as.vector(label[V(graph)$name]);
plot(graph, mark.groups = by(seq_along(cluster$membership), cluster$membership, invisible),
vertex.size=3, mark.shape = 0.75, mark.expand = 15);
title(main=title, cex.main=1.5);
};
plot.sub.graph <- function(graph, member, title) {
gr <- induced.subgraph(graph, member);
V(gr)$label <- V(gr)$name;
plot(gr, vertex.size=4);
title(main=title, cex.main=1.5);
};
run.ora <- function(cluster.list, mapping, background, annotation, method, dir) {
ora <- lapply(cluster.list, function(cl) OraWrapper(cl, mapping, background, 1));
ora <- lapply(ora, function(o) o[order(o[, 6]), ]);
ora <- lapply(ora, function(o) cbind(ID=rownames(o), o, annotation[rownames(o), ]));
names(ora) <- paste('Cluster', 1:length(ora), sep='_');
saveRDS(ora, paste(path.r, '/ORA_', method, '.rds', sep=''));
ind <- which(tolower(colnames(ora[[1]]))=='url');
if (length(ind)>0) {
ora <- lapply(ora, function(o) {
o[[1]] <- AddHref(o[[1]], o[, ind]);
o[, -ind];
})
};
ora <- lapply(ora, function(o) o[o[, 'PValue']<0.05, ])
fn <- sapply(1:length(cluster.list), function(i) {
fn <- paste(dir, '/ORA_', method, '_', names(ora)[i], '.html', sep='');
CreateDatatable(ora[[i]], fn, rownames = FALSE, caption = paste(method, '; Cluster_', i, sep=''));
fn;
});
list(file=fn, top=lapply(ora, function(o) o[1, ]));
};
summarize.cluster <- function(cluster.list, ora, ll) {
tp <- do.call('rbind', ora[[2]]);
ll <- ll[ll!=''];
cr <- lapply(cluster.list, function(c) intersect(c, ll));
cr <- as.vector(sapply(cr, function(x) paste(x, collapse="; ")));
cls <- paste('[Cluster_', 1:length(cluster.list), '](', ora[[1]], ')', sep='');
tbl <- data.frame(Cluster=cls, Size=sapply(cluster.list, length), Core_Member=cr, Top_Set=tp[[1]],
Top_OddsRatio=tp$OddsRatio, Top_PValue=tp$PValue, Top_FDR=tp$FDR, stringsAsFactors = FALSE);
ind <- which(tolower(colnames(tp))=='name');
tbl;
};
par(mar=c(5,5,2,2));
hist(num, xlab='Number of edges per node', ylab='Count of nodes', cex.lab=2, main='', col='lightgrey');
cluster.fg <- cluster_fast_greedy(igrph, weights = wgt);
cluster.wt <- cluster_walktrap(igrph, weights = wgt);
cluster.eb <- cluster_edge_betweenness(igrph, weights = wgt);
clusters <- list(fast_greedy=cluster.fg, walk_trap=cluster.wt, edge_betweenness=cluster.eb);
clts     <- lapply(clusters, function(c) {
m <- membership(c);
c <- split(names(m), m);
c[sapply(c, length)>=msz]
});
lbl <- V(igrph)$name;
names(lbl) <- lbl;
if (noi > 0) lbl[lbl %in% names(ngb)[ngb<noi]] <- '';
cl <- clts[[1]];
ll <- label.hub(lbl, cl, ngb);
plot.full.graph(igrph, clusters[[1]], ll, 'Fast greedy');
par(mfrow=c(ceiling(length(cl)/3), 3));
for (i in 1:length(cl)) plot.sub.graph(igrph, cl[[i]], paste('Cluster', i, sep='_'));
length(cl)
str(cl)
ora <- run.ora(cl, set.mpp, bgd, set.ann, 'FastGreedy', path.tbl);
tbl <- summarize.cluster(cl, ora, ll);
dim(tbl)
tbl
cl -> cluster.list
tp <- do.call('rbind', ora[[2]]);
ll <- ll[ll!=''];
cr <- lapply(cluster.list, function(c) intersect(c, ll));
cr <- as.vector(sapply(cr, function(x) paste(x, collapse="; ")));
cls <- paste('[Cluster_', 1:length(cluster.list), '](', ora[[1]], ')', sep='');
tbl <- data.frame(Cluster=cls, Size=sapply(cluster.list, length), Core_Member=cr, Top_Set=tp[[1]],
Top_OddsRatio=tp$OddsRatio, Top_PValue=tp$PValue, Top_FDR=tp$FDR,
stringsAsFactors = FALSE);
dim(tbl)
head(tbl)
cls
cl
ora[[1]]
names(ora)
path.tbl
label.hub <- function(label, cluster, count) {
top <- lapply(cluster, function(c) rev(sort(count[c])));
top <- as.vector(unlist(lapply(top, function(x) names(x)[x==x[1]])));
label[top] <- top;
label;
};
plot.full.graph <- function(graph, cluster, label, title) {
V(graph)$label <- as.vector(label[V(graph)$name]);
plot(graph, mark.groups = by(seq_along(cluster$membership), cluster$membership, invisible),
vertex.size=3, mark.shape = 0.75, mark.expand = 15);
title(main=title, cex.main=1.5);
};
plot.sub.graph <- function(graph, member, title) {
gr <- induced.subgraph(graph, member);
V(gr)$label <- V(gr)$name;
plot(gr, vertex.size=4);
title(main=title, cex.main=1.5);
};
run.ora <- function(cluster.list, mapping, background, annotation, method, dir) {
ora <- lapply(cluster.list, function(cl) OraWrapper(cl, mapping, background, 1));
ora <- lapply(ora, function(o) o[order(o[, 6]), ]);
ora <- lapply(ora, function(o) cbind(ID=rownames(o), o, annotation[rownames(o), ]));
names(ora) <- paste('Cluster', 1:length(ora), sep='_');
saveRDS(ora, paste(path.r, '/ORA_', method, '.rds', sep=''));
ind <- which(tolower(colnames(ora[[1]]))=='url');
if (length(ind)>0) {
ora <- lapply(ora, function(o) {
o[[1]] <- AddHref(o[[1]], o[, ind]);
o[, -ind];
})
};
ora <- lapply(ora, function(o) o[o[, 'PValue']<0.05, ])
fn <- sapply(1:length(cluster.list), function(i) {
fn <- paste('ORA_', method, '_', names(ora)[i], '.html', sep='');
CreateDatatable(ora[[i]], paste(dir, fn, sep='/'), rownames = FALSE,
caption = paste(method, '; Cluster_', i, sep=''));
paste('table', fn, sep='/');
});
list(file=fn, top=lapply(ora, function(o) o[1, ]));
};
summarize.cluster <- function(cluster.list, ora, ll) {
tp <- do.call('rbind', ora[[2]]);
ll <- ll[ll!=''];
cr <- lapply(cluster.list, function(c) intersect(c, ll));
cr <- as.vector(sapply(cr, function(x) paste(x, collapse="; ")));
cls <- paste('[Cluster_', 1:length(cluster.list), '](', ora[[1]], ')', sep='');
tbl <- data.frame(Cluster=cls, Size=sapply(cluster.list, length), Core_Member=cr, Top_Set=tp[[1]],
Top_OddsRatio=tp$OddsRatio, Top_PValue=tp$PValue, Top_FDR=tp$FDR,
stringsAsFactors = FALSE);
ind <- which(tolower(colnames(tp))=='name');
tbl;
};
ora <- run.ora(cl, set.mpp, bgd, set.ann, 'FastGreedy', path.tbl);
tbl <- summarize.cluster(cl, ora, ll);
ora[[1]]
ora <- run.ora(cl, set.mpp, bgd, set.ann, 'FastGreedy', path.tbl);
tbl <- summarize.cluster(cl, ora, ll);
tbl <- summarize.cluster(cl, ora, ll);
tbl
tp <- do.call('rbind', ora[[2]]);
ll <- ll[ll!=''];
cr <- lapply(cluster.list, function(c) intersect(c, ll));
cr <- as.vector(sapply(cr, function(x) paste(x, collapse="; ")));
cls <- paste('[Cluster_', 1:length(cluster.list), '](', ora[[1]], ')', sep='');
tbl <- data.frame(Cluster=cls, Size=sapply(cluster.list, length), Core_Member=cr, Top_Set=tp[[1]],
Top_OddsRatio=tp$OddsRatio, Top_PValue=tp$PValue, Top_FDR=tp$FDR,
stringsAsFactors = FALSE);
ind <- which(tolower(colnames(tp))=='name');
tbl
str(cluster.list)
nds <- c(as.vector(prs[,1]), as.vector(prs[, 2]));
num <- table(nds);
num.edge <- length(E(igrph));
num.node <- length(V(igrph));
head(num.edge)
head(num)
summary(num)
str(ora)
dim(prs)
head(prs)
table(prs[, 3])
dim(tbl)
c <- cluster.list[[1]]
c
pr <- pairs[paris[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
pairs <- prs
pr <- pairs[paris[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
nm
cbind(names(nm), as.vector(nm));
ora[[1]]
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- paste('table', sub('.html', '.csv', ora[[1]][i]));
write.csv(cbind(names(nm), as.vector(nm)), fn, sep='\t');
fn;
})
summarize.node <- function(cluster.list, pairs, ora, tbl) {
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.csv', ora[[1]][i]);
write.csv(cbind(names(nm), as.vector(nm)), fn, sep='\t');
fn;
})
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.csv', ora[[1]][i]);
write.csv(cbind(names(nm), as.vector(nm)), fn, sep='\t');
fn;
})
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.csv', ora[[1]][i]);
write.csv(cbind(names(nm), as.vector(nm)), paste(path.tbl, fn, sep='/'), sep='\t');
fn;
})
path0
path
dir
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.csv', ora[[1]][i]);
write.csv(cbind(names(nm), as.vector(nm)), paste(path, fn, sep='/'), sep='\t');
fn;
})
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.csv', ora[[1]][i]);
write.csv(cbind(names(nm), as.vector(nm)), paste(path, fn, sep='/'));
fn;
})
fn
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.txt', ora[[1]][i]);
write.table(cbind(Node=names(nm), Link=as.vector(nm)), paste(path, fn, sep='/'), sep='\t',
row.names = FALSE, col.names = TRUE, quote = FALSE);
fn;
})
fn
summarize.node <- function(cluster.list, pairs, ora, tbl) {
fn <- sapply(1:length(cluster.list), function(i) {
c  <- cluster.list[[i]];
pr <- pairs[pairs[, 1] %in% c & pairs[, 2] %in% c, , drop=FALSE];
nm <- table(c(pr[, 1], pr[, 2]));
nm <- rev(sort(nm));
fn <- sub('.html', '.txt', ora[[1]][i]);
write.table(cbind(Node=names(nm), Link=as.vector(nm)), paste(path, fn, sep='/'), sep='\t',
row.names = FALSE, col.names = TRUE, quote = FALSE);
fn;
});
tbl$Size <- paste('[', tbl$Size, '](', fn, ')', sep='');
tbl;
}
library(RoCA)
CreateReport('igraph.yaml')
CreateReport('igraph.yaml')
