cl <- '#A8A8FF';
xs <- 1;
};
#     if (length(sset) > 0) {
#       for (i in 1:length(sset)) {
#         den <- density(v[sset[[i]]]);
#         p <- add_trace(p, x=den$x, y=den$y, name=names(sset)[i], showlegend=TRUE);
#       }
#     };
if (length(high) > 0) {
for (i in 1:length(high)) {
p <- add_trace(p, x=v[high[i]], y=0, type='scatter', hoverinfo = 'text',
text=high[i], marker=list(size=10, symbol=18), name=high[i]);
p <- layout(p, showlegend=TRUE, legend=list(x=xs, y=1, legendgroup = 'g1', font=list(size=sz)))
}
};
p <- layout(p, xaxis=list(title=x), yaxis=list(title='Density'),
legend=list(x=xs, y=1, font=list(size=sz), legendgroup = 'g2'));
p;
x <- paste(rev(colnames(d)), collapse=' - ');
v <- d[, 2] - d[, 1];
names(v) <- rownames(d);
den <- density(v);
if (length(sset) < 3) fll <- 'tozeroy' else fll <- 'none'
p <- plot_ly(x=den$x, y=den$y, type='scatter', mode='line', fill = fll, name='All genes');
ns <- length(sset)+length(high);
if (ns > 0) {
nc <- max(nchar(c(names(sset), names(high))));
sz <- min(15, ceiling(400/nc));
cl <- '#A8A8A8';
xs <- max(0.6, 1 - nc/250);
} else {
sz <- 0;
cl <- '#A8A8FF';
xs <- 1;
};
#     if (length(sset) > 0) {
#       for (i in 1:length(sset)) {
#         den <- density(v[sset[[i]]]);
#         p <- add_trace(p, x=den$x, y=den$y, name=names(sset)[i], showlegend=TRUE);
#       }
#     };
if (length(high) > 0) {
for (i in 1:length(high)) {
p <- add_trace(p, x=v[high[i]], y=0, type='scatter', hoverinfo = 'text',
text=high[i], marker=list(size=10, symbol=18), name=high[i]);
p <- layout(p, showlegend=TRUE, legend=list(x=xs, y=1, legendgroup = 'g1', font=list(size=sz)))
};
p$x$attrs[[1]]$showlegend <- FALSE;
};
p <- layout(p, xaxis=list(title=x), yaxis=list(title='Density'),
legend=list(x=xs, y=1, font=list(size=sz), legendgroup = 'g2'));
p;
x <- paste(rev(colnames(d)), collapse=' - ');
v <- d[, 2] - d[, 1];
names(v) <- rownames(d);
den <- density(v);
if (length(sset) < 3) fll <- 'tozeroy' else fll <- 'none'
p <- plot_ly(x=den$x, y=den$y, type='scatter', mode='line', fill = fll, name='All genes');
ns <- length(sset)+length(high);
if (ns > 0) {
nc <- max(nchar(c(names(sset), names(high))));
sz <- min(15, ceiling(400/nc));
cl <- '#A8A8A8';
xs <- max(0.6, 1 - nc/250);
} else {
sz <- 0;
cl <- '#A8A8FF';
xs <- 1;
};
if (length(sset) > 0) {
for (i in 1:length(sset)) {
den <- density(v[sset[[i]]]);
p <- add_trace(p, x=den$x, y=den$y, name=names(sset)[i], showlegend=TRUE);
}
};
if (length(high) > 0) {
for (i in 1:length(high)) {
p <- add_trace(p, x=v[high[i]], y=0, type='scatter', hoverinfo = 'text',
text=high[i], marker=list(size=10, symbol=18), name=high[i]);
p <- layout(p, showlegend=TRUE, legend=list(x=xs, y=1, legendgroup = 'g1', font=list(size=sz)))
};
};
p <- layout(p, xaxis=list(title=x), yaxis=list(title='Density'),
legend=list(x=xs, y=1, font=list(size=sz), legendgroup = 'g2'));
p;
quartz()
p
ls()
devtools::install_local('~/Documents/awsomicsR/')
x <- readRDS('~/Downloads/x-5.rds')
d <- x[[1]]
s <- x[[9]]
s
h <- s[[10]]
h <- x[[10]]
h
type <- PlotlyPairDiffTypes()[4]
library(awsomics)
type <- PlotlyPairDiffTypes()[4]
type
PlotlyPairDiff(d, type, s, h)
h
s <- h
h <- x[[10]]
h
h <- x[[9]]
s
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
PlotlyPairDiffTypes()
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiffTypes()
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
.libPaths()
devtools::install_local('~/Documents/awsomicsR/')
devtools::install_local('~/Documents/awsomicsR/')
type[4]
type
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
ls()
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
devtools::install_local('~/Documents/awsomicsR/')
PlotlyPairDiff(d, type, s, h)
PlotlyPairDiff(d, PlotlyPairDiffTypes()[3], s, h)
devtools::install_local('~/Documents/awsomicsR/')
library(metacor)
install.packages('metacor')
library(meta)
install.packages('meta')
m1 <- metacor(c(0.85, 0.7, 0.95), c(20, 40, 10))
library(meta)
m1 <- metacor(c(0.85, 0.7, 0.95), c(20, 40, 10))
m1
m1 <- metacor(c(0.9, 0.7, 0.95), c(20, 40, 10))
m1
str(m1)
x <- seq(-1, 1, 0.01)
x <- sample(x, 10000, replace = TRUE)
length(x)
rs <- sapply(1:3, function(i) sample(x, 10000))
dim(rs)
n <- c(10, 20, 15)
system.time(mt <- apply(rs, 1, function(r) metacor(r, n) ))
system.time(mt <- parallel::mclapply(rs, 1, function(r) metacor(r, n),  ))
?parallel::mclapply
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n)))
names(mt[[1]])
mt[[1]]
mt[[1]]
str(mt[[1]])
mean(rs[1,])
x <- mt[[1]]
mean(x$TE.fixed)
x$TE
mean(x$TE)
summary(x)
summary(x)->x
str(x)
x
as.data.frame(x)
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=4))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=4))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=40))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=100))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=10))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=16))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=8))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=10))
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n), mc.cores=4))
x <- mt[[1]]
str(x)
x
summary(x)
summary(summary(x))
summary(x)
summary(x)->y
class(y)
as.list(y)
as.list(x)
n
(exp(2*-4.27)-1)/(exp(2*-4.27)+1)
x <- mt[[1]]
x$comb.fixed
x$comb.random
x$TE
mean(x$TE)
mean(x$TE, w=n)
weighted.mean(x$TE, w=n)
x$w.fixed
x$w.random
x$TE.fixed
x$prediction
x$k
x$Q
x$tau
x$C
mean(rs[1, ])
mean(x$cor)
summary(x)
?summary
str(summary(x))
weighted.mean(x$TE, w=n)
weighted.mean(x$TE, w=n-1)
weighted.mean(x$TE, w=n-2)
weighted.mean(x$cor, w=n-2)
weighted.mean(x$cor, w=n)
weighted.mean(x$cor, w=n-1)
weighted.mean(x$cor, w=n-3)
x$corr
x$cor
weighted.mean(x$cor, w=1/n)
weighted.mean(x$cor, w=1/(n-2))
weighted.mean(x$cor, w=n)
weighted.mean(x$cor, w=n-1)
weighted.mean(x$cor, w=n-2)
weighted.mean(x$cor, w=n-3)
weighted.mean(x$cor, w=n-4)
weighted.mean(x$cor, w=n-5)
weighted.mean(x$cor, w=n/2)
weighted.mean(x$cor, w=n-10)
weighted.mean(x$cor, w=n-6)
weighted.mean(x$cor, w=n-5)
weighted.mean(x$cor, w=n-4)
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n, sm='COR'), mc.cores=4))
x <- mt[[1]]
str(x)
summary(x)
rs[1, ]
corr <- sapply(mt, function(mt) mt$TE)
hist(corr)
max(corr)
rs[corr==max(corr), ]
length(corr)
corr <- sapply(mt, function(mt) mt$TE.fixed)
hist(corr)
rs[corr==max(corr), ]
max(corr)
rs[corr==min(corr), ]
n <- n[c(2, 1, 3)]
n
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n, sm='COR'), mc.cores=4))
corr <- sapply(mt, function(mt) mt$TE.fixed)
hist(corr)
rs[corr==max(corr), ]
rs[corr==min(corr), ]
a <- rs[corr==max(corr), ]
a
metacor(a, n, sm='COR')
n
metacor::metacor.DSL(rs[1, ], n)
?metacor::metacor.DSL
metacor::metacor.DSL(a, n, plot=FALSE)
library(metacor)
a
metacor.DSL(a, n)
a
a[a==-1]
a[a==-1] <- -.99
metacor.DSL(a, n)
a[3] <- -1
metacor.DSL(a, n, c('a', 'b', 'c'))
a
a[3] <- -.99
metacor.DSL(a, n, c('a', 'b', 'c'))
metacor.DSL(a, n, c('a', 'b', 'c'), plot=FALSE)
x <- metacor.DSL(a, n, c('a', 'b', 'c'), plot=FALSE)
x
metacor(c(0.85, 0.7, 0.95), c(20, 40, 10))
metacor(c(0.1, 0.2, -.1), c(20, 40, 10))
metacor(c(0.85, 0.7, -0.95), c(20, 40, 10))
metacor(c(0.85, 0.7, -0.95), c(20, 40, 10)) -> x
str(x)
metacor(c(0.85, 0.7, -0.95), c(20, 40, 10), sm='COR') -> x
str(x)
x
system.time(mt <- parallel::mclapply(1:nrow(rs), function(i) metacor(rs[i, ], n, sm='COR'), mc.cores=4))
str(x)
r1 <- sapply(mt, function(x) x$TE.fixed)
summary(r1)
max(r1)
rs[r1==max(r1), ]
r2 <- sapply(mt, function(x) x$TE.random)
summary(r2)
rs[r2==max(r2), ]
require(KernSmooth);
require(gplots);
?bkde2D
summary(ts[, 1])
dim(ts)
getwd()
library(RoCA)
setwd('~/Documents/RoCA/template/bioc/Rtsne_dbscan/')
dir()
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
args(CreateReport)
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
getwd()
CreateReport('Rtsne_dbscan.yaml')
RoCA::CreatePlotlyReport('Rtsne_dbscan.yaml')
warning()
warnings()
library(RoCA)
CreateReport('Rtsne_dbscan.yaml')
setwd('~/Documents/RoCA/template/bioc/Rtsne_dbscan/')
dir()
CreateReport('Rtsne_dbscan.yaml')
library(devtools)
install_github('zhezhangsh/RoCAR')
install_github('zhezhangsh/RoCAR')
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
ls()
source('~/.active-rstudio-document', echo=TRUE)
cl <- rep("rgb(49,130,189)", length(pt));
cl[sc==max(sc)] <- "rgb(189,0,0)";
plot_ly(x=as.character(pt), y=sc, type='bar', marker=list(color=cl)) %>%
layout(xaxis=list(title='Minimum cluster size'), yaxis=list(title='Silhouette score'));
sc
as.character(pt)
cl <- rep("rgb(49,130,189)", length(pt));
cl[sc==max(sc)] <- "rgb(189,0,0)";
plot_ly(y=sc, type='bar', marker=list(color=cl)) %>%
layout(xaxis=list(title='Minimum cluster size', tickvals = 1:length(sc), ticktext = as.character(pt)),
yaxis=list(title='Silhouette score'));
pt
cl <- rep("rgb(49,130,189)", length(pt));
cl[sc==max(sc)] <- "rgb(189,0,0)";
plot_ly(x=pt, y=sc, type='bar', marker=list(color=cl)) %>%
layout(xaxis=list(title='Minimum cluster size', tickvals = 1:length(sc), ticktext = as.character(pt)),
yaxis=list(title='Silhouette score'));
cl <- rep("rgb(49,130,189)", length(pt));
cl[sc==max(sc)] <- "rgb(189,0,0)";
plot_ly(x=1:length(sc), y=sc, type='bar', marker=list(color=cl)) %>%
layout(xaxis=list(title='Minimum cluster size', tickvals = 1:length(sc), ticktext = as.character(pt)),
yaxis=list(title='Silhouette score'));
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
ls()
table(smp[, 1])
smp
ls()
dim(g)
table(g[, 2])
table(g[, 1])
CreateReport('Rtsne_dbscan.yaml')
library(RoCA)
CreateReport('Rtsne_dbscan.yaml')
ls()
CreateReport('Rtsne_dbscan.yaml')
library(RoCA)
CreateReport('Rtsne_dbscan.yaml')
yml$parameter$Optimization$tsne
ls()
source('~/.active-rstudio-document', echo=TRUE)
ls()
length(ts)
names(ts)
n
yml$parameter$Optimization$tsne
length(ts)
ts[[1]]
ts
dim(ts)
rm(list=ls())
CreateReport('Rtsne_dbscan.yaml')
ts <- tss[[i0]]$Y;
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
library(RoCA)
CreateReport('Rtsne_dbscan.yaml')
dir()
expr <- readRDS('normalized.rds')
expr <- t(expr)
dim(expr)
saveRDS('expr.rds')
dir()
smp <- readRDS('sample.rds')
dim(smp)
dir()
library(RoCA)
CreateReport('Rtsne_dbscan.yaml')
dir()
dim(expr)
saveRDS(expr, 'expr.rds')
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
d <- expr
dim(d)
sz <- ceiling(max(30/ceiling(log(nrow(d))), 2));
sz
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
CreateReport('Rtsne_dbscan.yaml')
cor.test(1:10, 1:10)
cor.test(1:10, 1:10)$p.value
cor.test(1:6, 1:6)$p.value
cor.test(1:4, 1:4)$p.value
dim(expr)
x <- expr[1:6, ]
y <- expr[1:6, ]
dim(x)
dim(y)
r <- cor(x[, 1], y)
which(r==max(r))
rev(sort(r))
head(rev(sort(r)))
which(r[r>=0.99])
r <- as.vector(r)
head(r)
which(r[r>=0.99])
which(r>0.99)
cor(x[, 1], y[, 216])
cor.test(x[, 1], y[, 216])
cor.test(x[, 1], y[, 216])$p.value
which(r>0.99)
r[which(r>0.99)]
cor.test(x[, 1], y[, 24211])$p.value
x <- expr[1:8, ]
y <- expr[1:8, ]
r <- as.vector(cor(x[1,], y))
r <- as.vector(cor(x[, 1], y))
summary(r)
which(r[r>.99])
which(r>.99)
which(r>.98)
cor(x[, 1], y[, 3921])
cor.test(x[, 1], y[, 3921])
cor.test(x[, 1], y[, 3921])$p.value
cor.test(x[, 1], y[, 3921])$p.value*ncol(y)
r <- sapply(1:ncol(x), function(i) {r <- as.vector(cor(x[, i], y[, -i])); max(r)})
summary(r)
which(r==max(r))
which(r==max(r))->z
head(z)
r <- as.vector(cor(x[, 7], y[, -7]))
head(r)
which(r==max(r))
which(r==max(r))[1]
cor(x[, 7], y[, -7][, 131])
max(r)
colnames(x)[7]
x[, 7]
names(r) <- colnames9x
names(r) <- colnames(x)
length(r)
x <- x[, colMeans(x)>6]
dim(x)
y <- y[, colnames(x)]
r <- sapply(1:ncol(x), function(i) {r <- as.vector(cor(x[, i], y[, -i])); max(r)})
which(r==max(r))
z <- cor(x[, 277], y[, -277])
z <- as.vector(z)
max(z)
which(z==max(z))
cor.test(r[, 277, 4372])
cor.test(x[, 277], y[, 4372])
colnames(x)[c(277, 4372)]
plot(x[, 277], y[, 4372])
dim(x)
ncol(x)*ncol(x)*1.89e-09
ncol(x)*ncol(x)*1.89e-09/2
hist(z)
a <- cor(x[, 1], y)
hist(as.vector(a))
a <- as.vector(cor(x[, 277], y))
hist(a)
p <- apply(y, 2, function(z) cor.test(x[, 277], z)$p.value[[1]])
hist(p, br=100)
p <- apply(y, 2, function(z) cor.test(x[, 1], z)$p.value[[1]])
hist(p, br=100)
q <- p.adjust(p, method='BH')
sort(q)[1:10]
length(q[q<0.1])
length(q[q<0.2])
dim(tbl1)
?OptimizeDBSCAN
dim(d)
load("/Users/zhangz/Desktop/MedImmune/2017-06_Obesity_Reanalysis/data/processed/metabolites.rdata")
