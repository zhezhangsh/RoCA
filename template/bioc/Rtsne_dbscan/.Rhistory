text(ts[, 1:2], sil[, 1])
plot(ts[, 1:2], col=sil[, 1], pch=19, cex=4)
plot(ts[, 1], ts[, 2], col=sil[, 1], pch=19, cex=4)
plot(ts[, 1:2], col=sil[, 1], pch=19, cex=4)
text(ts[, 1], ts[, 2], label=sil[, 1])
plot(ts[, 1:2], col=sil[, 1], pch=19, cex=4)
text(ts[, 1], ts[, 2], label=sil[, 1], col='white')
split(sil[, 2], sil[, 1])
c <- sil[, 1];
n <- sapply(0:max(res[, 1]), function(i) length(c[c==i]));
s <- sapply(0:max(res[, 1]), function(i) sil[c==i, 3]);
m <- sapply(s, mean);
names(n) <- names(s) <- paste('Cluster', 0:max(res[, 1]), sep='_');
c
n
s
smm <- sapply(s, summary);
smm
smm <- t(smm)
smm
head(sil)
summary(sil)
sil <- silhouette(cl, dist(ts));
summary(sil)
summary(sil)->x
str(x)
x[[1]]
x[[2]]
x[[3]]
x[[4]]
x[[5]]
x[[6]]
length(x)
x[[7]]
ts <- readRDS(fns[i0])$Y;
p  <- yml$parameter$dbscan;
mn <- yml$parameter$Optimization$dbscan$min;
mx <- yml$parameter$Optimization$dbscan$max;
pt <- mn:mx;
db <- lapply(pt, function(i) {
dbscan <- OptimizeDBSCAN(ts, minPts = i, search = p$search, bucketSize = p$bucketSize,
splitRule = p$splitRule, approx = p$approx);
});
sc <- sapply(db, function(db) mean(silhouette(db$cluster, dist(ts))[, 3]));
db <- db[sc==max(sc)];
db <- db[[length(db)]];
cl <- db$cluster;
sil <- silhouette(cl, dist(ts));
sil <- cbind(cluster=sil[, 1], neighbor=sil[, 2], score=sil[, 3]);
rownames(sil) <- rownames(d);
colnames(ts)  <- paste('ts', 1:ncol(ts), sep='_');
res <- cbind(sil, ts);
c <- sil[, 1];
n <- sapply(0:max(res[, 1]), function(i) length(c[c==i]));
s <- sapply(0:max(res[, 1]), function(i) sil[c==i, 3]);
smm <- sapply(s, summary);
smm <- t(smm);
# names(n) <- names(s) <- paste('Cluster', 0:max(res[, 1]), sep='_');
smm
colnames(smm) <- paste('Width', colnames(smm), sep='_');
smm
smm <- sapply(s, summary);
smm <- t(smm);
colnames(smm) <- paste('Width', colnames(smm), sep='_');
colnames(smm) <- sub('[ \.]', '', colnames(smm));
colnames(smm) <- sub('[ \\.]', '', colnames(smm));
smm
head(sil)
head(res)
ts <- readRDS(fns[i0])$Y;
p  <- yml$parameter$dbscan;
mn <- yml$parameter$Optimization$dbscan$min;
mx <- yml$parameter$Optimization$dbscan$max;
pt <- mn:mx;
db <- lapply(pt, function(i) {
dbscan <- OptimizeDBSCAN(ts, minPts = i, search = p$search, bucketSize = p$bucketSize,
splitRule = p$splitRule, approx = p$approx);
});
sc <- sapply(db, function(db) mean(silhouette(db$cluster, dist(ts))[, 3]));
db <- db[sc==max(sc)];
db <- db[[length(db)]];
cl <- db$cluster;
sil <- silhouette(cl, dist(ts));
sil <- cbind(cluster=sil[, 1], neighbor=sil[, 2], score=sil[, 3]);
rownames(sil) <- rownames(d);
colnames(ts)  <- paste('ts', 1:ncol(ts), sep='_');
res <- cbind(sil, ts);
c <- sil[, 1];
n <- sapply(0:max(res[, 1]), function(i) length(c[c==i]));
s <- sapply(0:max(res[, 1]), function(i) sil[c==i, 3]);
b <- sapply()
smm <- sapply(s, summary);
smm <- t(smm);
colnames(smm) <- paste('Width', colnames(smm), sep='_');
colnames(smm) <- sub('[ \\.]', '', colnames(smm));
tbl <- data.frame(Cluster_ID=paste('Cluster', 0:max(res[, 1]), sep='_'), N = n, Neighbors = b,
smm, stringsAsFactors = FALSE);
split(1:20, 1:20)
b <- sapply(split(res[, 2], res[, 1]), function(x) paste(x, collapse=';'));
b
b <- sapply(split(res[, 2], res[, 1]), function(x) paste(unique(x), collapse=';'));
b
b <- sapply(split(res[, 2], res[, 1]), function(x) paste(sort(unique(x)), collapse=';'));
b
ts <- readRDS(fns[i0])$Y;
p  <- yml$parameter$dbscan;
mn <- yml$parameter$Optimization$dbscan$min;
mx <- yml$parameter$Optimization$dbscan$max;
pt <- mn:mx;
db <- lapply(pt, function(i) {
dbscan <- OptimizeDBSCAN(ts, minPts = i, search = p$search, bucketSize = p$bucketSize,
splitRule = p$splitRule, approx = p$approx);
});
sc <- sapply(db, function(db) mean(silhouette(db$cluster, dist(ts))[, 3]));
db <- db[sc==max(sc)];
db <- db[[length(db)]];
cl <- db$cluster;
sil <- silhouette(cl, dist(ts));
sil <- cbind(cluster=sil[, 1], neighbor=sil[, 2], score=sil[, 3]);
rownames(sil) <- rownames(d);
colnames(ts)  <- paste('ts', 1:ncol(ts), sep='_');
res <- cbind(sil, ts);
c <- sil[, 1];
n <- sapply(0:max(res[, 1]), function(i) length(c[c==i]));
s <- sapply(0:max(res[, 1]), function(i) sil[c==i, 3]);
b <- sapply(split(res[, 2], res[, 1]), function(x) paste(sort(unique(x)), collapse=';'));
smm <- sapply(s, summary);
smm <- t(smm);
colnames(smm) <- paste('Width', colnames(smm), sep='_');
colnames(smm) <- sub('[ \\.]', '', colnames(smm));
tbl <- data.frame(Cluster_ID=paste('Cluster', 0:max(res[, 1]), sep='_'), N = n, Neighbors = b,
smm, stringsAsFactors = FALSE);
ts <- readRDS(fns[i0])$Y;
p  <- yml$parameter$dbscan;
mn <- yml$parameter$Optimization$dbscan$min;
mx <- yml$parameter$Optimization$dbscan$max;
pt <- mn:mx;
db <- lapply(pt, function(i) {
dbscan <- OptimizeDBSCAN(ts, minPts = i, search = p$search, bucketSize = p$bucketSize,
splitRule = p$splitRule, approx = p$approx);
});
sc <- sapply(db, function(db) mean(silhouette(db$cluster, dist(ts))[, 3]));
db <- db[sc==max(sc)];
db <- db[[length(db)]];
cl <- db$cluster;
sil <- silhouette(cl, dist(ts));
sil <- cbind(cluster=sil[, 1], neighbor=sil[, 2], score=sil[, 3]);
rownames(sil) <- rownames(d);
colnames(ts)  <- paste('ts', 1:ncol(ts), sep='_');
res <- cbind(sil, ts);
c <- sil[, 1];
n <- sapply(0:max(res[, 1]), function(i) length(c[c==i]));
s <- sapply(0:max(res[, 1]), function(i) res[c==i, 3]);
b <- sapply(0:max(res[, 1]), function(i)
paste(sort(unique(res[res[, 1]=i, 2])), collapse=';'));
smm <- sapply(s, summary);
smm <- t(smm);
colnames(smm) <- paste('Width', colnames(smm), sep='_');
colnames(smm) <- sub('[ \\.]', '', colnames(smm));
tbl <- data.frame(Cluster_ID=paste('Cluster', 0:max(res[, 1]), sep='_'), N = n, Neighbors = b,
smm, stringsAsFactors = FALSE);
c <- sil[, 1];
x <- max(res[, 1]);
n <- sapply(0:x, function(i) length(c[c==i]));
s <- sapply(0:x, function(i) res[c==i, 3]);
b <- sapply(0:x, function(i) paste(sort(unique(res[res[, 1]=i, 2])), collapse=';'));
ts <- readRDS(fns[i0])$Y;
p  <- yml$parameter$dbscan;
mn <- yml$parameter$Optimization$dbscan$min;
mx <- yml$parameter$Optimization$dbscan$max;
pt <- mn:mx;
db <- lapply(pt, function(i) {
dbscan <- OptimizeDBSCAN(ts, minPts = i, search = p$search, bucketSize = p$bucketSize,
splitRule = p$splitRule, approx = p$approx);
});
sc <- sapply(db, function(db) mean(silhouette(db$cluster, dist(ts))[, 3]));
db <- db[sc==max(sc)];
db <- db[[length(db)]];
cl <- db$cluster;
sil <- silhouette(cl, dist(ts));
sil <- cbind(cluster=sil[, 1], neighbor=sil[, 2], score=sil[, 3]);
rownames(sil) <- rownames(d);
colnames(ts)  <- paste('ts', 1:ncol(ts), sep='_');
res <- cbind(sil, ts);
c <- sil[, 1];
x <- max(res[, 1]);
n <- sapply(0:x, function(i) length(c[c==i]));
s <- sapply(0:x, function(i) res[c==i, 3]);
b <- sapply(0:x, function(i) paste(sort(unique(res[res[, 1]==i, 2])), collapse=';'));
smm <- sapply(s, summary);
smm <- t(smm);
colnames(smm) <- paste('Width', colnames(smm), sep='_');
colnames(smm) <- sub('[ \\.]', '', colnames(smm));
tbl <- data.frame(Cluster_ID=paste('Cluster', 0:max(res[, 1]), sep='_'), N = n, Neighbors = b,
smm, stringsAsFactors = FALSE);
tbl
tbl[1, 3]
smm
ts <- readRDS(fns[i0])$Y;
p  <- yml$parameter$dbscan;
mn <- yml$parameter$Optimization$dbscan$min;
mx <- yml$parameter$Optimization$dbscan$max;
pt <- mn:mx;
db <- lapply(pt, function(i) {
dbscan <- OptimizeDBSCAN(ts, minPts = i, search = p$search, bucketSize = p$bucketSize,
splitRule = p$splitRule, approx = p$approx);
});
sc <- sapply(db, function(db) mean(silhouette(db$cluster, dist(ts))[, 3]));
db <- db[sc==max(sc)];
db <- db[[length(db)]];
cl <- db$cluster;
sil <- silhouette(cl, dist(ts));
sil <- cbind(cluster=sil[, 1], neighbor=sil[, 2], score=sil[, 3]);
rownames(sil) <- rownames(d);
colnames(ts)  <- paste('ts', 1:ncol(ts), sep='_');
res <- cbind(sil, ts);
c <- sil[, 1];
x <- max(res[, 1]);
n <- sapply(0:x, function(i) length(c[c==i]));
s <- sapply(0:x, function(i) res[c==i, 3]);
b <- sapply(0:x, function(i) paste(sort(unique(res[res[, 1]==i, 2])), collapse=';'));
smm <- sapply(s, summary);
smm <- t(smm);
colnames(smm) <- paste('Width', colnames(smm), sep='_');
colnames(smm) <- sub('[ \\.]', '', colnames(smm));
tbl <- data.frame(Cluster_ID=paste('Cluster', 0:max(res[, 1]), sep='_'), N = n, Neighbors = b,
smm[, c(4, 3, 1, 2, 5, 6)], stringsAsFactors = FALSE);
head(res)
db
tbl
res
source('~/.active-rstudio-document', echo=TRUE)
tbl
dim(ts)
ts <- readRDS(fns[i0])$Y;
ts
e
n <- yml$parameter$Optimization$tsne; # Number of repeated runs to obtain best KL distance
p <- yml$parameter$Rtsne;     # Function parameters
m <- max(1, min(floor(nrow(d)/3), p$perplexity));            # Number of neighbors
e <- max(2, min(3, p$dims));    # Output dimensionality (2 or 3)
s <- max(2, min(ncol(d), p$initial_dims)); # number of dimensions in the initial PCA step (default: 50)
h <- max(0, min(1, p$theta)); # Speed/accuracy trade-off (higher=less accuracy, 0 for exact TSNE) (default: 0.5)
# Run tSNE multiple times and save results
fns <- paste(path.tsne, '/ts_', 1:n, '.rds', sep='');
sapply(1:n, function(i) {
ts <- Rtsne(d, dims = e, initial_dims = s, perplexity = m, theta = h, pca = p$pca, max_iter = p$max_iter);
saveRDS(ts, fns[i]);
}) -> x;
e
p$dims
min(3, p$dims)
name.yaml <- 'Rtsne_dbscan.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'plotly', 'RoCA', 'awsomics',
'Rtsne', 'dbscan');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table', 'path.tsne'='tsne');
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
home.url <- Link2Home(yml$home);
prms
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
ts
head(tbl)
head(res)
tbl
res[res[,1]==0, ]
dim(ts)
dim(t0)
t0 <- ts
plot_ly(x = t0[, 1], y = t0[, 2], z = t0[, 3], color=cl);
cl
sz <- ceiling(max(30/ceiling(log(nrow(d))), 2));
mk <- list(symbol=16, size=sz);
xa <- list(zeroline=FALSE, showgrid=TRUE, showline=TRUE);
ya <- list(zeroline=FALSE, showgrid=TRUE, showline=TRUE);
mr <- list(t=40);
if (ncol(g)>0) {
cl <- g[[1]];
w1 <- 6;
w2 <- '600px';
} else {
cl <- NULL;
w1 <- 4.8;
w2 <- '480px';
}
plot_ly(x = t0[, 1], y = t0[, 2], z = t0[, 3], color=cl);
ttl <- paste(paste("Lowest KL-divergence:", round(kl[nrow(kl), i0], 4)), paste('Run', i0), sep='; ');
# plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
#   layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot_ly(x = t0[, 1], y = t0[, 2], z = t0[, 3], color=cl) %>%
layout(xaxis=xa, yaxis=ya, title=ttl);;
ttl <- paste(paste("Lowest KL-divergence:", round(kl[nrow(kl), i0], 4)), paste('Run', i0), sep='; ');
# plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
#   layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot_ly(x = t0[, 1], y = t0[, 2], z = t0[, 3], color=cl) %>%
layout(xaxis=xa, yaxis=ya, title=ttl);
xa
dim(t0)
dim(t1)
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl);
, text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, zaxis=za, margin=mr,
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, zaxis=za, margin=mr, title=ttl);
dim(d)
mk
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl)
layout(xaxis=xa, yaxis=ya, zaxis=za, margin=mr, title=ttl)
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, zaxis=za, margin=mr, title=ttl);
sz <- ceiling(max(30/ceiling(log(nrow(d))), 2));
mk <- list(symbol=16, size=sz);
xa <- list(title='ts_1', zeroline=FALSE, showgrid=TRUE, showline=TRUE);
ya <- list(title='ts_2', zeroline=FALSE, showgrid=TRUE, showline=TRUE);
za <- list(title='ts_3', zeroline=FALSE, showgrid=TRUE, showline=TRUE);
mr <- list(t=40);
if (ncol(g)>0) {
cl <- g[[1]];
w1 <- 6;
w2 <- '600px';
} else {
cl <- NULL;
w1 <- 4.8;
w2 <- '480px';
}
ttl <- paste(paste("Highest KL-divergence:", round(kl[nrow(kl), i1], 4)), paste('Run', i1), sep='; ');
if (ncol(t0) == 2) {
plot_ly(x=t1[, 1], y=t1[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, zaxis=za, margin=mr, title=ttl);
}
ttl <- paste(paste("Lowest KL-divergence:", round(kl[nrow(kl), i0], 4)), paste('Run', i0), sep='; ');
# plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
#   layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot_ly(x = t0[, 1], y = t0[, 2], z = t0[, 3], color=cl) %>%
layout(xaxis=xa, yaxis=ya, title=ttl);
source('~/.active-rstudio-document', echo=TRUE)
sz <- ceiling(max(30/ceiling(log(nrow(d))), 2));
mk <- list(symbol=16, size=sz);
xa <- list(title='ts_1', zeroline=FALSE, showgrid=TRUE, showline=TRUE);
ya <- list(title='ts_2', zeroline=FALSE, showgrid=TRUE, showline=TRUE);
za <- list(title='ts_3', zeroline=FALSE, showgrid=TRUE, showline=TRUE);
mr <- list(t=40);
if (ncol(g)>0) {
cl <- g[[1]];
w1 <- 6;
w2 <- '600px';
} else {
cl <- NULL;
w1 <- 4.8;
w2 <- '480px';
}
xa
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, zaxis=za, margin=mr, title=ttl);
mr
plot_ly(x = t1[, 1], y = t1[, 2], z = t1[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
res
plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=res[, 1]) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot(t0)
plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=res[, 1]) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
if (ncol(t0) == 2) {
cl <- paste('Cluster', res[, 1], sep='_');
plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
}
cl
cl <- paste('Cluster', res[, 1], sep='_');
cl
plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot_ly(x=t0[, 1], y=t0[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
plot_ly(x=ts[, 1], y=ts[, 2], type='histogram2dcontour') %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour') %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
ts
ts <- ts[, 1:2]
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showlegend=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[res[, 1]==1, 1], y=ts[res[, 1]==1, 2], type='histogram2dcontour', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
plot_ly(x=ts[res[, 1]==1, 1], y=ts[res[, 1]==1, 2], type='histogram2dcontour', showscale=FALSE)
plot_ly(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showscale=FALSE) %>%
plot_ly(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showscale=FALSE)
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[res[, 1]==1, 1], y=ts[res[, 1]==1, 2], type='histogram2dcontour', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', colorscale='Greys', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', colorscale='Greys', showscale=FALSE) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', colorscale='Greys', showscale=FALSE, reversescale=TRUE, contours=list(showlines=FALSE)) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', colorscale='Blues', showscale=FALSE, reversescale=TRUE, contours=list(showlines=FALSE)) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
cl <- paste('Cluster', res[, 1], sep='_');
if (ncol(ts) == 2) {
plot_ly(x=ts[, 1], y=ts[, 2], type='scatter', mode='marker', text=rownames(d), marker=mk, color=cl) %>%
add_trace(x=ts[, 1], y=ts[, 2], type='histogram2dcontour', colorscale='Greys', showscale=FALSE, reversescale=TRUE, contours=list(showlines=FALSE)) %>%
layout(xaxis=xa, yaxis=ya, margin=mr, title=ttl);
} else {
plot_ly(x = ts[, 1], y = ts[, 2], z = ts[, 3], text=rownames(d), marker=mk, color=cl) %>%
layout(scene = list(xaxis=xa, yaxis=ya, zaxis=za), margin=mr, title=ttl);
}
