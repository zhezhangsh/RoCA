CreateDatatable(t, paste(path.ora, 'index.html', sep='/'), rownames = FALSE, caption = "Click on number to see list");
t[, 4:5] <- sapply(4:5, function(i) CleanHtmlTags(t[, i]));
t[, 4:5] <- sapply(colnames(t)[4:5], function(nm) {
x <- as.numeric(as.vector(t[, nm]));
y <- paste('[', x, '](ORA/', nm, '/table/', as.vector(t[, 1]), '/', as.vector(t[, 2]), '.html', ')', sep='');
y[x==0] <- '0';
y;
});
head(ora.ind)
ora.ind[1 ]
ora.ind[1, ]
args(CreateDatatable)
ora.ind[, 3] <- as.character(ora.ind[, 3]);
ora.ind[, 4] <- as.character(ora.ind[, 4]);
CreateDatatable(ora.ind, paste(path.ora, 'index.html', sep='/'), rownames = FALSE, caption = "Click on number to see list", );
names(bic)
bic[[1]]
bic[[2]]
nm <- names(bic)[1]
nm
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
path.ora
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))
t <- bic[[nm]];
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t
nm <- names(bic)[2]
nm
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
dim(t)
bic[[]]
bic[[2]]
nm
names(bic)
t <- bic[[nm]];
t
t <- FormatNumeric(t$summary);
t
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.formatted<-lapply(names(bic), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t;
});
fns
bic.formatted<-lapply(names(bic), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste('ORA', nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.png'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
sz <- PlotHeatmap(t3, size.max=Inf, fn=sub('.png$', '', fn[3]), col.min=col.min, col.max='#0000FF');
png(t[3], width = sz[[1]], height = sz[[2]], res=150, unit='in');
PlotHeatmap(t3, size.max=Inf, col.min=col.min, col.max='#0000FF', plot.new = FALSE);
dev.off();
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t;
});
getwd()
i <- 1
fn<- paste('ORA', nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.png'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t1
ora.formatted<-lapply(names(ora.table), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'term', sep='/'))) dir.create(paste(path.ora, nm, 'term', sep='/'));
t<-ora.table[[nm]];
an<-geneset[[1]][rownames(t), ];
if (nrow(t) > 0) {
t$Term<-AddHref(t$Term, an[, 'URL']);
t$Total[1:min(250, nrow(t))] <-
AddHref(t$Total[1:min(250, nrow(t))], paste('./term/term_', 1:min(250, nrow(t)), '.html', sep=''));
sapply(1:min(250, nrow(t)), function(i) {
g<-geneset$list[rownames(t)[i]][[1]];
t1<-stat.slim[rownames(stat.slim) %in% g, , drop=FALSE];
t1<-t1[order(abs(t1[, 'Rank'])), , drop=FALSE];
fn<-paste(path.ora, nm, 'term', paste('term_', i, '.html', sep=''), sep='/');
GeneList2Datatable(t1, fn, genome = genome, title = rownames(t)[i]);
});
}
t<-FormatNumeric(t);
CreateDatatable(t, fn=paste(path.ora, nm, 'term.html', sep='/'), rownames = FALSE);
t;
});
names(ora.formatted)<-names(ora.table);
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
t <- FormatNumeric(t$summary);
dim(t)
fn<- paste('ORA', nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.png'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
t1
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
fn[1]
CreateReport('pairwise_comparison.yaml')
getwd()
dir()
rm(list=ls())
CreateReport('pairwise_comparison.yaml')
CreateReport('pairwise_comparison.yaml')
path.kegg
CreateReport('pairwise_comparison.yaml')
?path.expand
RoCA::CreateReport('pairwise_comparison.yaml')
DeMethods()
library(DEGandMore)
DeMethods()
source('~/Documents/DEGandMore/R/DeWrapper.R')
RoCA::CreateReport('pairwise_comparison.yaml')
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
CreateReport('pairwise_comparison.yaml')
CreateReport('pairwise_comparison.yaml')
source('~/Documents/DEGandMore/R/DeWrapper.R')
CreateReport('pairwise_comparison.yaml')
CreateReport('pairwise_comparison.yaml')
name.yaml <- 'pairwise_comparison.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots', 'pathview', 'PGSEA',
'flexclust', 'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table', 'path.deg'='DEG',
'path.ora'='ORA', 'path.gsea'='GSEA');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
deg.sub <- paste(c('Higher', 'Lower'), 'in', g2.name, sep='_');
inputs<-yml$input;
# All input variables
anno <- inputs$anno <- ImportTable(DownloadFile(inputs$anno, path.input));
expr <- inputs$expr <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
geneset <- inputs$geneset <- ImportR(DownloadFile(inputs$geneset, path.input));
genome  <- prms$genome;
paired  <- prms$paired;
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
if (is.null(paired)) paired <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired <- FALSE;
if (is.null(g1.name)) g1.name <- 'Group_1';
if (is.null(g2.name)) g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
# Re-process gene expression matrix
e1<-expr[, g1.ind, drop=FALSE];
e2<-expr[, g2.ind, drop=FALSE];
e1.2<-cbind(e1, e2);
pctl<-apply(e1.2, 2, function(e) 100*rank(e)/length(e)); # percentile
norm<-NormQQ(e1.2);
inputs$expr <- e1.2;
inputs$anno <- anno[rownames(e1.2), ];
if (!prms$processing$logged) inputs$logged <- e1.2 <- log2(e1.2+1);
if (!prms$processing$normalized) inputs$normalized <- e1.2 <- NormLoess(e1.2);
yml$gsea$jar <- DownloadFile(yml$input$gsea, path.input);
dir.gmt <- paste(path.input, 'gmt', sep='/');
if (file.exists(dir.gmt)) unlink(dir.gmt, recursive = TRUE);
dir.create(dir.gmt, recursive = TRUE);
yml$gsea$gmt <- lapply(yml$input$gmt, function(x) DownloadFile(x, dir.gmt));
# .xml files of KEGG pathway maps
dir.kegg <- paste(path.input, 'kegg', sep='/');
if (file.exists(dir.kegg)) unlink(dir.kegg, recursive = TRUE);
dir.create(dir.kegg, recursive = TRUE);
if (!is.null(yml$input$kegg)) {
if (dir.exists(yml$input$kegg)) {
kegg.fns <- dir(yml$input$kegg);
kegg.fns <- kegg.fns[grep('.xml$', kegg.fns, ignore.case = TRUE)];
file.copy(paste(yml$input$kegg, kegg.fns, sep='/'), paste(dir.kegg, kegg.fns, sep='/'), overwrite = TRUE) -> x;
} else if (url.exists(yml$input$kegg)) {
x <- DownloadFile(yml$input$kegg, dir.kegg);
if (grepl('.zip$', x)) {
fns.xml <- unzip(x, exdir=dir.kegg);
file.rename(fns.xml, paste(dir.kegg, TrimPath(fns.xml), sep='/')) -> x;
}
}
}
inputs$parameters<-prms;
res<-list(inputs=inputs);  # Result set
deg.sub <- paste(c('Higher', 'Lower'), 'in', g2.name, sep='_');
# parameters of differential expression
deg.method <- prms$deg$method;
cutoff.l2r <- prms$deg$cutoff.l2r;
cutoff.p   <- prms$deg$cutoff.p;
cutoff.fdr <- prms$deg$cutoff.fdr;
num.top    <- prms$deg$num.top;
nperm      <- prms$deg$nperm;
means <- cbind(rowMeans(e1.2[, g1.ind]), rowMeans(e1.2[, g2.ind]));
colnames(means) <- c(g1.name, g2.name);
l2r <- means[,2]-means[,1];
l2r[is.na(l2r)] <- 0;
fc <- exp(l2r*log(2));
mn <- cbind(means, l2r, fc);
colnames(mn) <- c(paste('Mean', names(grps), sep='_'), 'LogFC', 'FoldChange');
# Adjust expr matrix if a penalty is given for large between-sample variance
penalty <- prms$deg$penalty;
if (is.na(penalty) | is.null(penalty) | prms$deg$method!='DeRankP') penalty <- 0;
if(penalty>0) {
if (penalty>1) penalty<-1;
colnames(means)<-paste('Mean_', c(g1.name, g2.name), sep='');
if (paired) sd<-apply(e1.2[, g2.ind]-e1.2[, g1.ind], 1, sd) else {
v1<-apply(e1.2[, g1.ind], 1, var);
v2<-apply(e1.2[, g2.ind], 1, var);
df1<-length(g1.ind)-1;
df2<-length(g2.ind)-1;
sd<-sqrt((df1*v1+df2*v2)/(df1+df2));
sd[sd==0]<-min(sd[sd>0])/2;
}
pnl <- quantile(sd, probs=seq(0, 1, 0.01))[100*round(1-penalty,2)+1];
e <- e1.2; # keep the original
e[, g2.ind] <- apply(e[, g2.ind], 2, function(d) means[,1]+(d-means[,1])/(pnl+sd));
} else e<-e1.2;
if (!prms$deg$reprocessed) e <- expr[, colnames(e1.2)];
dim(e)
summary(e[, 1])
e <- log2(e+1)
deg.method
deg.method <- 'DeRankP'
de<-DeWrapper(mtrx=e, grps=grps, mthd=deg.method, paired=paired, logged=prms$processing$logged, args=list(nperm=nperm)); #
prms$processing$logged
prms$processing$logged  <- TRUE
de<-DeWrapper(mtrx=e, grps=grps, mthd=deg.method, paired=paired, logged=prms$processing$logged, args=list(nperm=nperm)); #
grps
deg.method
DeMethods()
paired
de<-DeWrapper(mtrx=e, grps=grps, mthd=deg.method)
head(e)
dim(e)
e <- e[rowMeans(e)>0, ]
dim(e)
grps
deg.method
DeMethods()
de<-DeWrapper(mtrx=e, grps=grps, mthd='DeT')
dim(de)
names(de)
DeWrapper
mtrx <- e
mthd <- 'DeRankP'
grp0 <- colnames(mtrx)[grps[[1]]]
grp1 <- colnames(mtrx)[grps[[2]]]
fun.args <- names(as.list(args(mthd)))
all.args <- list(mtrx = mtrx, grps = grps, paired = paired,
logged = logged)
all.args <- append(all.args, args)
all.args <- all.args[names(all.args) %in% fun.args]
res <- do.call(mthd, all.args)
logged <- TRUE
grp0 <- colnames(mtrx)[grps[[1]]]
grp1 <- colnames(mtrx)[grps[[2]]]
fun.args <- names(as.list(args(mthd)))
all.args <- list(mtrx = mtrx, grps = grps, paired = paired,
logged = logged)
all.args <- append(all.args, args)
all.args <- all.args[names(all.args) %in% fun.args]
res <- do.call(mthd, all.args)
str(all.args)
mthd
deg.method <- DeRankProd
de<-DeWrapper(mtrx=e, grps=grps, mthd=deg.method)
dim(e)
str(grps)
lnk <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/human_string_link.rds")
head(lnk)
mp <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/human_entrez2string.rds")
class(mp)
length(mp)
head(mp)
lnk <- lnk[lnk[, 1] %in% mp, ]
lnk <- lnk[lnk[, 2] %in% mp, ]
dim(lnk)
head(lnk)
length(mp)
length(unique(mp))
x <- split(names(mp), mp)
n <- sapply(x, length)
table(n)
x[n>1]
head(mp)
head(mp)
head(lnk)
l <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/human_string_link.rds")
dim(l)
head(l)
dim(lnk)
x <- pmin(l[, 1], l[, 2])
l[1,1]
l[, 1] <- as.vector(l[, 1])
l[, 2] <- as.vector(l[, 2])
x <- pmin(l[, 1], l[, 2])
y <- pmax(l[, 1], l[, 2])
z <- paste(x, y, sep='_')
l1 <- l[!duplicated(z), ]
dim(l1)
dim(l)
l2 <- l1[l1[, 1] %in% mp, ]
l2 <- l2[l2[, 2] %in% mp, ]
dim(l2)
head(l2)
head(l2)
mp <- split(names(mp), mp)
head(mp)
head(mp)
n <- sapply(mp, length)
table(n)
dim(l2)
head(l2)
dim(l)
a <- l[, 3]
names(a) <- l[, 2]
head(a)
b <- split(a, l[, 1])
length(b)
head(mp)
mp <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/human_entrez2string.rds")
length(b)
c <- b[names(b) %in% mp]
length(c)
head(c)
x <- names(mp)
names(x) <- mp
y <- x[names(c)]
length(y)
length(y)
length(b)
length(x)
head(y)
length(unique(names(y)))
length(y)
length(c)
head(c)
length(c)
class(c)
head(names(c))
length(x)
head(x)
x <- split(names(mp), mp)
y <- x[names(b)]
length(y)
head(y)
length(y)
length(b)
z <- rep(names(y), sapply(y, length))
length(z)
d <- c[z]
head(d)
head(names(d))
length(d)
names(d) <- unlist(y)
length(d)
length(c)
length(d)
length(unique(names(d)))
length(unique(names(mp)))
length(mp)
length(d)
head(d)
head(x)
length(d)
d[1:2]
head(x)
e <- lapply(d, function(d) {u <- x[names(d)]; v <- rep(names(u), sapply(u, length)); e <- d[v]; names(e) <- unlist(u); e; } )
head(e)
length(e)
str(e)
e[[1]]
e[[2]]
n <- sapply(e, length)
summary(n)
min(n)
e[n==0]
length(n[n==0])
mp['29798']
names(e)[n==0]
length(b)
b[1:2]
names(b)[1:2]
names(e)[n==0]
mp['29798']
b['9606.ENSP00000304065']
mp['301']
mp[mp=='9606.ENSP00000304065']
mp[mp=='9606.ENSP00000244769 ']
e <- lapply(e, function(e) e[!is.na(e)])
n <- sapply(e, length)
summary(n)
table(n)
length(n[n==0])
e <- e[n>0]
n1 <- sapply(e, length)
n2 <- sapply(e, function(e) length(unique(names(e))))
table(n1==n2)
e <- lapply(e, sort)
e <- lapply(e, rev)
head(e[[1]])
e[[1]]
dir()
stat <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/stat.rds")
saveRDS(e, '/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/ppi_entrez.rds')
x <- tbl[[8]]
