ex.bic <- ex.bic[ex.bic[,2]*ex.bic[,3]==max(ex.bic[,2]*ex.bic[,3]), , drop=FALSE];
ex.bic <- paste(path.gsea, 'bicluster', names(degs)[2], paste(ex.bic[,1], '_heatmap.png', sep=''), sep='/');
ex.bic
ex.bic <- gsea$bicluster[[2]]$summary
ex.bic
ex.bic <- ex.bic[ex.bic[,2]*ex.bic[,3]==max(ex.bic[,2]*ex.bic[,3]), , drop=FALSE];
dim(ex.bic)
ex.bic
ex.bic <- gsea$bicluster[[2]]$summary
ex.bic
dim(gsea.bic[[2]]$summary)
t<-FormatNumeric(gsea.bic[[nm]]$summary);
t<-FormatNumeric(gsea.bic[[2]]$summary);
t<-FormatNumeric(gsea.bic[[nm]]$summary);
t$ID<-as.vector(t$ID);
t
fns<-sapply(1:nrow(t), function(i) {
fn<-paste(path.bic, paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-gsea.tbl[rownames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
CreateDatatable(FormatNumeric(t1[, 1:6]), fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-gsea.bic[[nm]][[2]][[i]];
rownames(t3)<-paste(gsea.tbl[rownames(t3), 1], gsea.tbl[rownames(t3), 2], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
sz <- PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
png(filename=sub('.pdf$', '.png', fn[3]), width=sz[[1]], height=sz[[2]], unit='in', res=300);
PlotHeatmap(t3, size.max=Inf, col.min=col.min, col.max='#0000FF', plot.new=FALSE);
dev.off();
fn;
});
ls()
gsea.bic.formatted<-lapply(names(gsea.bic), function(nm) {
path.bic<-paste(path.gsea, 'bicluster', nm, sep='/');
if (!file.exists(path.bic)) dir.create(path.bic, recursive = TRUE);
if (identical(NA, gsea.bic[[nm]])) t<-data.frame('No biclusters found'='', stringsAsFactors = FALSE) else {
t<-FormatNumeric(gsea.bic[[nm]]$summary);
t$ID<-as.vector(t$ID);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<-paste(path.bic, paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-gsea.tbl[rownames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
CreateDatatable(FormatNumeric(t1[, 1:6]), fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-gsea.bic[[nm]][[2]][[i]];
rownames(t3)<-paste(gsea.tbl[rownames(t3), 1], gsea.tbl[rownames(t3), 2], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
sz <- PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
png(filename=sub('.pdf$', '.png', fn[3]), width=sz[[1]], height=sz[[2]], unit='in', res=300);
PlotHeatmap(t3, size.max=Inf, col.min=col.min, col.max='#0000FF', plot.new=FALSE);
dev.off();
fn;
});
gsea.bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, paste(t$ID, '_terms.html', sep=''));
t$Num_Genes<-AddHref(t$Num_Genes, paste(t$ID, '_genes.html', sep=''));
t$ID<-AddHref(t$ID, paste(t$ID, '_heatmap.pdf', sep=''));
}
CreateDatatable(t, fn=paste(path.bic, 'index.html', sep='/'), rownames = FALSE);
t;
});
nm <- names(gsea.bic)[2]
path.bic<-paste(path.gsea, 'bicluster', nm, sep='/');
if (!file.exists(path.bic)) dir.create(path.bic, recursive = TRUE);
t<-FormatNumeric(gsea.bic[[nm]]$summary);
t$ID<-as.vector(t$ID);
dim(t)
fns<-sapply(1:nrow(t), function(i) {
fn<-paste(path.bic, paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-gsea.tbl[rownames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
CreateDatatable(FormatNumeric(t1[, 1:6]), fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-gsea.bic[[nm]][[2]][[i]];
rownames(t3)<-paste(gsea.tbl[rownames(t3), 1], gsea.tbl[rownames(t3), 2], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
sz <- PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
png(filename=sub('.pdf$', '.png', fn[3]), width=sz[[1]], height=sz[[2]], unit='in', res=300);
PlotHeatmap(t3, size.max=Inf, col.min=col.min, col.max='#0000FF', plot.new=FALSE);
dev.off();
fn;
});
dim(t)
fns<-sapply(1:nrow(t), function(i) { print(i);
fn<-paste(path.bic, paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-gsea.tbl[rownames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
CreateDatatable(FormatNumeric(t1[, 1:6]), fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(gsea.bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-gsea.bic[[nm]][[2]][[i]];
rownames(t3)<-paste(gsea.tbl[rownames(t3), 1], gsea.tbl[rownames(t3), 2], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
sz <- PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
png(filename=sub('.pdf$', '.png', fn[3]), width=sz[[1]], height=sz[[2]], unit='in', res=300);
PlotHeatmap(t3, size.max=Inf, col.min=col.min, col.max='#0000FF', plot.new=FALSE);
dev.off();
fn;
});
if (!identical(NA, gsea$bicluster[[1]])) {
ex.bic <- gsea$bicluster[[1]]$summary;
ex.bic <- ex.bic[ex.bic[,2]*ex.bic[,3]==max(ex.bic[,2]*ex.bic[,3]), , drop=FALSE];
ex.bic <- paste(path.gsea, 'bicluster', names(degs)[1], paste(ex.bic[1,1], '_heatmap.png', sep=''), sep='/');
} else if (!identical(NA, gsea$bicluster[[2]])) {
ex.bic <- gsea$bicluster[[2]]$summary
ex.bic <- ex.bic[ex.bic[,2]*ex.bic[,3]==max(ex.bic[,2]*ex.bic[,3]), , drop=FALSE];
ex.bic <- paste(path.gsea, 'bicluster', names(degs)[2], paste(ex.bic[,1], '_heatmap.png', sep=''), sep='/');
} else ex.bic <- NA;
if (!identical(NA, ex.bic)) ln <- paste("![](", ex.bic, ")", sep='') else ln <- "No bicluster found";
ex.bic
file.exists(ex.bic)
dir()
CreateReport('pairwise_comparison.yaml')
if (nrow(ora[[1]][[1]]) == 0 & nrow(ora[[2]][[1]]) == 0) {
plot(0:1, 0:1, type='n', axes=FALSE, xlab='', ylab='');
text(0.5, 0.5, label='ORA found no significant gene sets', col='darkblue');
} else {
if (nrow(ora[[1]][[1]]) > 0) {
gs.id <- rownames(ora[[1]][[1]])[1];
id1 <- geneset[[2]][[gs.id]];
id2 <- rownames(degs[[1]]);
l <- paste('DEG, higher in', g2.name);
} else {
gs.id <- rownames(ora[[2]][[1]])[1];
id1 <- geneset[[2]][[gs.id]];
id2 <- rownames(degs[[2]]);
l <- paste('DEG, lower in', g2.name);
}
PlotVenn(id1, id2, c(geneset[[1]][gs.id, 'Name'], l), rownames(anno));
}
path.gsea <- paste(path, 'GSEA', sep='/');
if (dir.exists(path.gsea)) unlink(path.gsea, recursive = TRUE);
dir.create(path.gsea, recursive = TRUE);
file.rename(paste(path, tmp, sep='/'), path.gsea);
gsea.tbl<-readRDS(paste(path.gsea, 'full_table.rds', sep='/'));
for (i in 1:ncol(gsea.tbl)) gsea.tbl[[i]]<-as.vector(gsea.tbl[[i]]);
saveRDS(gsea.tbl, file=paste(path.gsea, 'full_table.rds', sep='/'));
# Load gene lists of gene sets from GMT files
fn.gmt<-sub(tmp, path.gsea, unlist(gsea.yml$gmt));
gmts<-lapply(fn.gmt, readGmt);
gsea.lst<-lapply(gmts, function(gmt) {
nm<-sub(' $', '', sapply(gmt, function(g) g@reference));
lst<-lapply(gmt, function(g) g@ids);
names(lst)<-toupper(nm);
lst;
});
t <- data.frame(Collection=names(gmts), Gene_Set=sapply(gmts, length), rep('List', length(gmts)),
rep('List', length(gmts)),stringsAsFactors = FALSE);
names(t)[3:4] <- c(paste(g1.name, g2.name, sep=' > '), paste(g2.name, g1.name, sep=' > '));
lnk <- sapply(names(gmts), function(nm) {
x <- paste(path.gsea, nm, sep='/');
y <- dir(x);
y <- y[grep('.html$', y)];
z <- sapply(c(g1.name, g2.name), function(x) y[grep(paste('^gsea_report_for_', x, sep=''), y)]);
paste(path.gsea, z, sep='/');
});
t [, 3] <- AddHref(t[, 3], lnk[1, ]);
t [, 4] <- AddHref(t[, 4], lnk[2, ]);
t
dir(path.gsea)
path.gsea
path
source('~/.active-rstudio-document', echo=TRUE)
########################################################################################
ora <- lapply(degs, function(gs) TestGSE(rownames(gs), rownames(expr), geneset$list)); #
########################################################################################
names(ora) <- names(degs);
#saveRDS(ora, paste(path.r, 'ora_all.rds', sep='/'));
ora.table<-lapply(ora, function(ora) {
g<-ora$stat;
lst<-ora$list[rownames(g)];
rand<-sapply(lst, function(l) {
mtrx<-e1.2[rownames(e1.2) %in% l, , drop=FALSE];
randIndex(table(kmeans(t(mtrx), 2)[[1]], rep(1:2, sapply(grps, length))));
})
an<-geneset[[1]][rownames(g), ];
data.frame(row.names = rownames(g), stringsAsFactors = TRUE, Source=an[,1], Collection=an[,2], Term=an[, 'Name'],
Total=rowSums(ora$size[rownames(g), 3:4]), Within=ora$size[rownames(g), 4], Enrichment=g[, 'Odds_Ratio'],
Rand=rand, Pvalue=g[, 'P_HyperGeo'], FDR=g[, 'FDR_BH']);
});
########################################################################################################
# Biclustering
bic<-lapply(ora, function(g) if (nrow(g[[1]])<5) NA else BiclusterFromList(g[[2]][rownames(g[[1]])[1:min(250, nrow(g[[1]]))]]));
ora$bicluster<-bic;
bic2gs<-lapply(bic, function(bic) if (identical(bic, NA)) NA else lapply(bic[[2]], rownames));
gs2bic<-lapply(bic2gs, function(b)
lapply(split(rep(1:length(b), sapply(b, length)), unlist(b, use.names=FALSE)), function(x) sort(unique(x))));
gs2bic<-lapply(gs2bic, function(b) sapply(b, function(b) paste(b, collapse=';')));
########################################################################################################
# Output tables
ora.table<-lapply(names(ora.table), function(nm) {
b<-gs2bic[[nm]];
if (length(b) > 0) {
b<-b[rownames(ora.table[[nm]])];
b[is.na(b)]<-'';
ora.table[[nm]]$Cluster<-b;
}
ora.table[[nm]];
});
names(ora.table)<-names(bic);
# Split results into tables by collections
ora.wrapped<-lapply(names(ora.table), function(nm) {
pth<-paste(path.ora, nm, 'table', sep='/');
if (!file.exists(pth)) dir.create(pth, recursive = TRUE);
t <- ora.table[[nm]];
if (nrow(t) == 0) list(all=t, formatted=list(), file=c()) else WrapGSE(t[, -(1:3)], geneset$meta, pth, TRUE);
});
names(ora.wrapped)<-names(ora.table);
# create index.html file
ora.tbl<-lapply(ora.wrapped, function(o) {
if (length(o$formatted) > 0) {
n<-lapply(o$formatted, function(o) sapply(o, nrow));
fn<-unlist(o$file, use.names=FALSE);
fn<-sub(paste(path.ora, '/', sep=''), '', fn);
s<-rep(names(n), sapply(n, length));
c<-unlist(lapply(n, names), use.names=FALSE);
n<-as.vector(unlist(n, use.names=FALSE));
tbl<-data.frame(Source=s, Collection=c, N=n, stringsAsFactors = FALSE);
tbl$N<- AddHref(tbl$N, fn);
rownames(tbl)<-paste(tbl[[1]], tbl[[2]], sep='_');
} else tbl <- data.frame(Source='', Collection='', N=0, stringsAsFactors = FALSE)[0, , drop=FALSE];
tbl
});
u<-sort(union(rownames(ora.tbl[[1]]), rownames(ora.tbl[[2]])));
ora.tbl<-lapply(ora.tbl, function(t) {
t<-t[u, ];
t[is.na(t[,3]), 3]<-0;
rownames(t)<-u;
t;
});
ora.ind<-cbind(ora.tbl[[1]], N2=ora.tbl[[2]]$N);
ora.ind[is.na(ora.ind[,1]), 1]<-ora.tbl[[2]][is.na(ora.ind[,1]), 1];
ora.ind[is.na(ora.ind[,2]), 2]<-ora.tbl[[2]][is.na(ora.ind[,2]), 2];
names(ora.ind)<-c('Source', 'Collection', names(ora.wrapped));
CreateDatatable(ora.ind, paste(path.ora, 'index.html', sep='/'), rownames = FALSE, caption = "Click on number to see list");
# All tested gene sets
gs.table<-lapply(split(geneset[[1]][, 'Collection'], geneset[[1]][, 'Source']), table);
gs.table<-data.frame(stringsAsFactors = FALSE, Source=rep(names(gs.table), sapply(gs.table, length)),
Collection=unlist(lapply(gs.table, names), use.names=FALSE), Geneset=as.numeric(unlist(gs.table)));
CreateDatatable(gs.table, paste(path.ora, 'geneset.html', sep='/'), rownames = FALSE, caption = "Gene set collections");
# Formatted tables of ORA results
stat.slim<-data.frame(anno[rownames(stat), 1, drop=FALSE], FormatNumeric(stat));
colnames(stat.slim) <- c(names(anno)[1], colnames(stat));
ora.formatted<-lapply(names(ora.table), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'term', sep='/'))) dir.create(paste(path.ora, nm, 'term', sep='/'));
t<-ora.table[[nm]];
an<-geneset[[1]][rownames(t), ];
if (nrow(t) > 0) {
t$Term<-AddHref(t$Term, an[, 'URL']);
t$Total[1:min(250, nrow(t))] <-
AddHref(t$Total[1:min(250, nrow(t))], paste('./term/term_', 1:min(250, nrow(t)), '.html', sep=''));
sapply(1:min(250, nrow(t)), function(i) {
g<-geneset$list[rownames(t)[i]][[1]];
t1<-stat.slim[rownames(stat.slim) %in% g, , drop=FALSE];
t1<-t1[order(abs(t1[, 'Rank'])), , drop=FALSE];
fn<-paste(path.ora, nm, 'term', paste('term_', i, '.html', sep=''), sep='/');
GeneList2Datatable(t1, fn, genome = genome, title = rownames(t)[i]);
});
}
t<-FormatNumeric(t);
CreateDatatable(t, fn=paste(path.ora, nm, 'term.html', sep='/'), rownames = FALSE);
t;
});
names(ora.formatted)<-names(ora.table);
# Formatted table of biclustering
bic.formatted<-lapply(names(bic), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t;
});
# Summary table in the report
rownames(gs.table) <- paste(gs.table[, 1], gs.table[, 2], sep='_');
t <- cbind(ora.ind, Total=gs.table[rownames(ora.ind), 3])[, c(1, 2, 5, 3, 4)];
CreateDatatable(t, paste(path.ora, 'index.html', sep='/'), rownames = FALSE, caption = "Click on number to see list");
t[, 4:5] <- sapply(4:5, function(i) CleanHtmlTags(t[, i]));
t[, 4:5] <- sapply(colnames(t)[4:5], function(nm) {
x <- as.numeric(as.vector(t[, nm]));
y <- paste('[', x, '](ORA/', nm, '/table/', as.vector(t[, 1]), '/', as.vector(t[, 2]), '.html', ')', sep='');
y[x==0] <- '0';
y;
});
head(ora.ind)
ora.ind[1 ]
ora.ind[1, ]
args(CreateDatatable)
ora.ind[, 3] <- as.character(ora.ind[, 3]);
ora.ind[, 4] <- as.character(ora.ind[, 4]);
CreateDatatable(ora.ind, paste(path.ora, 'index.html', sep='/'), rownames = FALSE, caption = "Click on number to see list", );
names(bic)
bic[[1]]
bic[[2]]
nm <- names(bic)[1]
nm
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
path.ora
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))
t <- bic[[nm]];
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t
nm <- names(bic)[2]
nm
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
dim(t)
bic[[]]
bic[[2]]
nm
names(bic)
t <- bic[[nm]];
t
t <- FormatNumeric(t$summary);
t
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.formatted<-lapply(names(bic), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste(path.ora, nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.pdf'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
PlotHeatmap(t3, size.max=Inf, fn=sub('.pdf$', '', fn[3]), col.min=col.min, col.max='#0000FF');
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t;
});
fns
bic.formatted<-lapply(names(bic), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
if (identical(t, NA)) t <- NA else {
t <- FormatNumeric(t$summary);
# write individual files of biclusters
fns<-sapply(1:nrow(t), function(i) {
fn<- paste('ORA', nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.png'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t2<-t2[order(t2[, 'Rank']), , drop=FALSE];
GeneList2Datatable(t2, fn[2], genome = genome, title=paste('Genes of', t[i,1]));
t3<-bic[[nm]][[2]][[i]];
rownames(t3)<-paste(ora.table[[nm]][rownames(t3), 2], ora.table[[nm]][rownames(t3), 3], sep=' - ');
colnames(t3)<-paste(rownames(anno[colnames(t3), , drop=FALSE]), CleanHtmlTags(anno[colnames(t3), 1]), sep=' - ');
if (min(t3)==1) col.min<-'#0000FF' else col.min<-'#999999';
sz <- PlotHeatmap(t3, size.max=Inf, fn=sub('.png$', '', fn[3]), col.min=col.min, col.max='#0000FF');
png(t[3], width = sz[[1]], height = sz[[2]], res=150, unit='in');
PlotHeatmap(t3, size.max=Inf, col.min=col.min, col.max='#0000FF', plot.new = FALSE);
dev.off();
fn;
});
bic.fn<-t(fns);
# write index table
t$Num_Terms<-AddHref(t$Num_Terms, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 1]));
t$Num_Genes<-AddHref(t$Num_Genes, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 2]));
t$ID<-AddHref(t$ID, sub(paste(path.ora, nm, sep='/'), '\\.', bic.fn[, 3]));
CreateDatatable(t, fn=paste(path.ora, nm, 'bicluster.html', sep='/'), rownames = FALSE);
}
t;
});
getwd()
i <- 1
fn<- paste('ORA', nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.png'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
t2<-stat.slim[colnames(bic[[nm]][[2]][[i]]), , drop=FALSE];
t1
ora.formatted<-lapply(names(ora.table), function(nm) {
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'term', sep='/'))) dir.create(paste(path.ora, nm, 'term', sep='/'));
t<-ora.table[[nm]];
an<-geneset[[1]][rownames(t), ];
if (nrow(t) > 0) {
t$Term<-AddHref(t$Term, an[, 'URL']);
t$Total[1:min(250, nrow(t))] <-
AddHref(t$Total[1:min(250, nrow(t))], paste('./term/term_', 1:min(250, nrow(t)), '.html', sep=''));
sapply(1:min(250, nrow(t)), function(i) {
g<-geneset$list[rownames(t)[i]][[1]];
t1<-stat.slim[rownames(stat.slim) %in% g, , drop=FALSE];
t1<-t1[order(abs(t1[, 'Rank'])), , drop=FALSE];
fn<-paste(path.ora, nm, 'term', paste('term_', i, '.html', sep=''), sep='/');
GeneList2Datatable(t1, fn, genome = genome, title = rownames(t)[i]);
});
}
t<-FormatNumeric(t);
CreateDatatable(t, fn=paste(path.ora, nm, 'term.html', sep='/'), rownames = FALSE);
t;
});
names(ora.formatted)<-names(ora.table);
if (!file.exists(paste(path.ora, nm, sep='/'))) dir.create(paste(path.ora, nm, sep='/'));
if (!file.exists(paste(path.ora, nm, 'bicluster', sep='/'))) dir.create(paste(path.ora, nm, 'bicluster', sep='/'));
t <- bic[[nm]];
t <- FormatNumeric(t$summary);
dim(t)
fn<- paste('ORA', nm, 'bicluster', paste(t[i, 1], c('_terms.html', '_genes.html', '_heatmap.png'), sep=''), sep='/');
t1<-ora.formatted[[nm]][rownames(bic[[nm]][[2]][[i]]), ];
t1
CreateDatatable(t1, fn[1], FALSE, caption=paste('Terms of', t[i,1]));
fn[1]
CreateReport('pairwise_comparison.yaml')
getwd()
dir()
rm(list=ls())
CreateReport('pairwise_comparison.yaml')
CreateReport('pairwise_comparison.yaml')
path.kegg
CreateReport('pairwise_comparison.yaml')
?path.expand
RoCA::CreateReport('pairwise_comparison.yaml')
DeMethods()
library(DEGandMore)
DeMethods()
source('~/Documents/DEGandMore/R/DeWrapper.R')
RoCA::CreateReport('pairwise_comparison.yaml')
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
CreateReport('pairwise_comparison.yaml')
CreateReport('pairwise_comparison.yaml')
source('~/Documents/DEGandMore/R/DeWrapper.R')
CreateReport('pairwise_comparison.yaml')
CreateReport('pairwise_comparison.yaml')
