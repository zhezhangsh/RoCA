if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
}
points(mns[, 1], X);
points(X, mns[, 1], col='#FF666666');
plot(1:20, pch=1:20)
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
points(X, mns[, 1], col='#6666FF66', pch=18, cex=2);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
points(X, mns[, 2], col='#6666FF66', pch=18, cex=2);
abline(h=0, col='green');
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
points(X, mns[, 2], col='#6666FF66', pch=18, cex=2);
plot(1:20, pch=1:20)
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
points(X, mns[, 2], col='#6666FF66', pch=18, cex=2);
points(X, mns[, 1], pch=5);
points(X, mns[, 2], pch=5);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
points(X, mns[, 2], col='#6666FF66', pch=18, cex=2);
points(X, mns[, 1], pch=5);
points(X, mns[, 2], pch=5);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF666666', pch=18, cex=2);
points(X, mns[, 2], col='#6666FF66', pch=18, cex=2);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666', pch=18, cex=2);
points(X, mns[, 2], col='#6666FF', pch=18, cex=2);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
x <- sapply(grps, function(x) mean(mns[x, 1]))
x
plot(1:7, x)
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
lines(1:7, x)
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lwd=2);
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lwd=2);
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2);
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2);
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2);
}
?lines
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b');
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b');
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b', pch=18);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b');
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b', pch=18, cex=2);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b');
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=cex/2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=cex/2);
if (mthd != 'pearson' | !is.numeric(phen)) {
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b', pch=18, cex=2);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b');
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=cex/2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=cex/2);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b', pch=18, cex=cex);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b', pch=18, cex=cex);
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=cex/1.5);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=cex/1.5);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b', pch=18, cex=cex);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b', pch=18, cex=cex);
}
mns <- sapply(sel, function(s) {
d <- colMeans(expr[rownames(s), , drop=FALSE], na.rm=TRUE);
});
par(mar=c(6,5,2,2));
plot(0, type='n', xlim=range(X), ylim=range(mns), xlab='', ylab='Average expression (normalized)',
cex.lab=2, xaxt='n');
if (mthd != 'pearson' | !is.numeric(phen)) axis(1, at=1:length(grps), labels=names(grps), las=3) else {
title(xlab=prms$series, cex.lab=2);
axis(1);
};
abline(h=0, col='green');
cex <- min(4, 36/length(X));
points(X, mns[, 1], col='#FF6666DD', pch=18, cex=cex/2);
points(X, mns[, 2], col='#6666FFDD', pch=18, cex=cex/2);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 1], na.rm=TRUE)), col='#FF6666DD', lty=2, lwd=2, type='b', pch=18, cex=cex);
lines(1:length(grps), sapply(grps, function(x) mean(mns[x, 2], na.rm=TRUE)), col='#6666FFDD', lty=2, lwd=2, type='b', pch=18, cex=cex);
}
dir()
CreateReport('series_regression.yaml')
s <- sel[[1]]
e <- expr[rownames(s), , drop=FALSE];
dim(e)
hc <- hclust(as.dist(1-cor(t(e))))
str(hc)
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- sapply(e, function(e) colMeans(e, na.rm=TRUE));
dim(m)
m
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
m
barplot(m)
g <- lapply(grp, function(g) sort(m[g]));
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
g
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
e <- rbind(e[[1]], e[[2]])[, names(do.call('c', g)), drop=FALSE];
do.call('c', g)
unlist(g, use.names=FALSE)
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
e <- rbind(e[[1]], e[[2]])[, unlist(lapply(g, names), use.names=FALSE), drop=FALSE];
e[1:2, ]
x <- max(abs(e), na.rm=TRUE);
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
e <- rbind(e[[1]], e[[2]])[, unlist(lapply(g, names), use.names=FALSE), drop=FALSE];
x <- max(abs(e), na.rm=TRUE);
PlotColoredBlock(e, groups=grps, min=-x, max=x, key='Normalized expression');
heatmap.size <- c(max(6, 0.25*nrow(smpl)), max(8, 0.1*(nrow(sel[[1]])+nrow(sel[[2]]))));
heatmap.size
heatmap.size <- c(min(6, 0.25*nrow(smpl)), min(8, 0.15*(nrow(sel[[1]])+nrow(sel[[2]]))));
heatmap.size
nm <- names(sel)[1]
name.yaml <- 'series_regression.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'rchive', 'awsomics');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table',
'path.ora'='ora');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
gse<-lapply(names(sel), function(nm) {
cl <- sel[[nm]];
mtrx<-expr[cl[[nm]], , drop=FALSE];
gse<-TestGSE(rownames(mtrx), rownames(expr), gset[[2]])[[1]];
gse<-WrapGSE(gse, gset[[1]], paste(path.ora, nm, sep='/'), FALSE);
fn<-TruncatePathPrefix(gse[[3]], path);
sapply(names(gse[[2]]), function(nm) paste('[', nrow(gse[[2]][[nm]]), '](', fn[nm], ')', sep=''));
});
cl <- sel[[nm]];
nm <- names(sel)[1]
nm
names(sel)
ss  <- list(positive = stat[stat[, 3] > 0, , drop=FALSE], negative = stat[stat[, 3] < 0, , drop=FALSE]);
# Select top genes
sel <- lapply(names(ss), function(nm) {
s <- ss[[nm]];
# Select by correlation coefficient
if (nrow(s) > prms$selection$min) {
s <- s[rev(order(abs(s[, 3]))), , drop=FALSE];
s <- s[1:max(prms$selection$min, max(which(abs(s[, 3]) >= prms$selection$corr))), , drop=FALSE];
}
# Select by p value
if (nrow(s) > prms$selection$min) {
s <- s[order(s[, 4]), , drop=FALSE];
s <- s[1:max(prms$selection$min, max(which(s[, 4] <= prms$selection$p))), , drop=FALSE];
}
# Select by FDR
if (nrow(s) > prms$selection$min) {
s <- s[order(s[, 5]), , drop=FALSE];
s <- s[1:max(prms$selection$min, max(which(s[, 5] <= prms$selection$fdr))), , drop=FALSE];
}
# Select by range
if (nrow(s) > prms$selection$min) {
s <- s[rev(order(s[, 2] - s[, 1])), , drop=FALSE];
s <- s[1:max(prms$selection$min, max(which((s[,2]-s[,1]) >= prms$selection$range))), , drop=FALSE];
}
# Limit to maximum number of genes
if (nrow(s) > prms$selection$min) {
s <- s[rev(order(abs(s[, 3]))), , drop=FALSE];
s <- s[1:min(nrow(s), prms$selection$max), , drop=FALSE];
}
CreateDatatable(cbind(anno[rownames(s), , drop=FALSE], s), paste(path.tbl, paste('stat_', nm, '.html', sep=''), sep='/'));
s;
});
smm <- sapply(sel, function(s) c(nrow(s), min(abs(s[, 3])), max(s[, 4]), max(s[, 5]), min(s[, 2]-s[, 1])));
smm <- FormatNumeric(t(smm));
dimnames(smm) <- list(c('Positive', 'Negative'), c('Num_Gene', 'Min_Corr', 'Max_Pval', 'Max_FDR', 'Min_Range'));
tbl <- data.frame(Direction=c('[Positive](table/stat_positive.html)', '[Negative](table/stat_negative.html)'), smm);
saveRDS(sel, file=paste(path.r, 'top_genes.rds', sep='/'));
names(sel)
names(sel) <- names(ss);
gse<-lapply(names(sel), function(nm) {
cl <- sel[[nm]];
mtrx<-expr[cl[[nm]], , drop=FALSE];
gse<-TestGSE(rownames(mtrx), rownames(expr), gset[[2]])[[1]];
gse<-WrapGSE(gse, gset[[1]], paste(path.ora, nm, sep='/'), FALSE);
fn<-TruncatePathPrefix(gse[[3]], path);
sapply(names(gse[[2]]), function(nm) paste('[', nrow(gse[[2]][[nm]]), '](', fn[nm], ')', sep=''));
});
gse<-lapply(names(sel), function(nm) {
s <- sel[[nm]];
mtrx<-expr[rownames(s), , drop=FALSE];
gse<-TestGSE(rownames(mtrx), rownames(expr), gset[[2]])[[1]];
gse<-WrapGSE(gse, gset[[1]], paste(path.ora, nm, sep='/'), FALSE);
fn<-TruncatePathPrefix(gse[[3]], path);
sapply(names(gse[[2]]), function(nm) paste('[', nrow(gse[[2]][[nm]]), '](', fn[nm], ')', sep=''));
});
gs<-sort(unique(unlist(lapply(gse, names), use.names=FALSE)));
str(gs)
tbl<-t(sapply(gse, function(gse) gse[gs]));
tbl
args(DeWrapper)
library(DEGandMore)
args(DeWrapper)
CreateReport('series_regression.yaml')
CreateReport('series_regression.yaml')
CreateReport('series_regression.yaml')
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
e <- rbind(e[[1]], e[[2]])[, unlist(lapply(g, names), use.names=FALSE), drop=FALSE];
x <- max(abs(e), na.rm=TRUE);
PlotColoredBlock(e, groups=grps, min=-x, max=x, key='Normalized expression');
abline(h=nrow(s[[1]]));
abline(h=nrow(s[[1]]), lwd=2);
nrow(s[[1]])
abline(h=nrow(sel[[1]]), lwd=2);
```
nrow(sel[[1]]
)
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
e <- rbind(e[[1]], e[[2]])[, unlist(lapply(g, names), use.names=FALSE), drop=FALSE];
x <- max(abs(e), na.rm=TRUE);
PlotColoredBlock(e, groups=grps, min=-x, max=x, key='Normalized expression');
abline(h=nrow(sel[[2]]), lwd=2);
e <- lapply(sel, function(s) {
e <- expr[rownames(s), , drop=FALSE];
e[hclust(as.dist(1-cor(t(e))))$order, , drop=FALSE];
});
m <- rowMeans(abs(sapply(e, function(e) colMeans(e, na.rm=TRUE))));
g <- lapply(grps, function(g) sort(m[g]));
e <- rbind(e[[1]], e[[2]])[, unlist(lapply(g, names), use.names=FALSE), drop=FALSE];
x <- max(abs(e), na.rm=TRUE);
PlotColoredBlock(e, groups=grps, min=-x, max=x, key='Normalized expression');
abline(h=nrow(sel[[2]]), lwd=1);
