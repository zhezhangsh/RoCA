boxwex=0.6, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=15,
boxwex=0.6, names=rep('', length(ng)));
par(mar=c(8, 5, 1, 1));
sc <- lapply(tbls, function(x) x$NES);
ps <- lapply(sc, function(s) s[s>0]);
ng <- lapply(sc, function(s) s[s<0]);
mx <- max(sapply(sc, max));
cx <- max(strwidth(names(tbls), units = 'inch'))/3;
plot(0, type='n', ylim=c(-mx, mx), xlim=c(0, length(sc)), xaxt='n', xlab='',
ylab='Nominal enrichment score');
boxplot(ps, add=TRUE, at=(1:length(tbls)-0.5), col='#E74C3CBB', pch=15,
boxwex=0.6, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=15,
boxwex=0.6, names=rep('', length(ng)));
axis(1, at=at=(1:length(tbls)-0.5), label=names(tbls), las=3, cex.axis=cx);
par(mar=c(8, 5, 1, 1));
sc <- lapply(tbls, function(x) x$NES);
ps <- lapply(sc, function(s) s[s>0]);
ng <- lapply(sc, function(s) s[s<0]);
mx <- max(sapply(sc, max));
cx <- max(strwidth(names(tbls), units = 'inch'))/3;
plot(0, type='n', ylim=c(-mx, mx), xlim=c(0, length(sc)), xaxt='n', xlab='',
ylab='Nominal enrichment score');
boxplot(ps, add=TRUE, at=(1:length(tbls)-0.5), col='#E74C3CBB', pch=15,
boxwex=0.6, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=15,
boxwex=0.6, names=rep('', length(ng)));
axis(1, at=(1:length(tbls)-0.5), label=names(tbls), las=3, cex.axis=cx);
par(mar=c(8, 5, 1, 1));
sc <- lapply(tbls, function(x) x$NES);
ps <- lapply(sc, function(s) s[s>0]);
ng <- lapply(sc, function(s) s[s<0]);
mx <- max(sapply(sc, max));
cx <- max(strwidth(names(tbls), units = 'inch'))/2;
plot(0, type='n', ylim=c(-mx, mx), xlim=c(0, length(sc)), xaxt='n', xlab='',
ylab='Nominal enrichment score');
boxplot(ps, add=TRUE, at=(1:length(tbls)-0.5), col='#E74C3CBB', pch=15,
boxwex=0.6, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=15,
boxwex=0.6, names=rep('', length(ng)));
axis(1, at=(1:length(tbls)-0.5), label=names(tbls), las=3, cex.axis=cx);
plot(1:20, cex=1:20)
plot(1:20, pch=1:20)
par(mar=c(8, 5, 1, 1));
sc <- lapply(tbls, function(x) x$NES);
ps <- lapply(sc, function(s) s[s>0]);
ng <- lapply(sc, function(s) s[s<0]);
mx <- max(sapply(sc, max));
cx <- max(strwidth(names(tbls), units = 'inch'))/2;
plot(0, type='n', ylim=c(-mx, mx), xlim=c(0, length(sc)), xaxt='n', xlab='',
ylab='Nominal enrichment score');
boxplot(ps, add=TRUE, at=(1:length(tbls)-0.5), col='#E74C3CBB', pch=18,
boxwex=0.6, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=18,
boxwex=0.6, names=rep('', length(ng)));
axis(1, at=(1:length(tbls)-0.5), label=names(tbls), las=3, cex.axis=cx);
abline(h=0);
par(mar=c(8, 5, 1, 1));
sc <- lapply(tbls, function(x) x$NES);
ps <- lapply(sc, function(s) s[s>0]);
ng <- lapply(sc, function(s) s[s<0]);
mx <- max(sapply(sc, max));
cx <- max(strwidth(names(tbls), units = 'inch'))/2;
plot(0, type='n', ylim=c(-mx, mx), xlim=c(0, length(sc)), xaxt='n', xlab='',
ylab='Nominal enrichment score');
boxplot(ps, add=TRUE, at=(1:length(tbls)-0.5), col='#E74C3CBB', pch=18,
boxwex=0.6, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=18,
boxwex=0.6, names=rep('', length(ng)));
axis(1, at=(1:length(tbls)-0.5), label=names(tbls), las=3, cex.axis=cx);
abline(h=0);
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
name.yaml <- 'run_gsea.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'pathview', 'PGSEA', 'flexclust', 'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table',
'path.deg'='DEG', 'path.ora'='ORA', 'path.gsea'='GSEA');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno    <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr    <- expr[rownames(anno), c(g1.ind, g2.ind), drop=FALSE];
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
names(grps) <- c(g1.name, g2.name);
dir.gmt <- paste(path.input, 'gmt', sep='/');
if (file.exists(dir.gmt)) unlink(dir.gmt, recursive = TRUE);
dir.create(dir.gmt, recursive = TRUE, showWarnings = FALSE);
fn.gsea <- PrepareGSEA(expr, grps, paste(path.input, '/', g1.name, '_vs_', g2.name, sep=''), desc = anno[[1]]);
input.gsea               <- yml$gsea;
gsea.yml                 <- list();
gsea.yml$jar             <- DownloadFile(yml$input$jar, path.input);
gsea.yml$preranked       <- FALSE;
gsea.yml$thread          <- prms$thread;
gsea.yml$name            <- paste(g1.name, '_vs_', g2.name, sep='')
gsea.yml$groups$control  <- g1.name;
gsea.yml$groups$case     <- g2.name;
gsea.yml$out             <- path;
gsea.yml$input           <- fn.gsea[1];
gsea.yml$class           <- fn.gsea[2];
gsea.yml$chip            <- c();
gsea.yml$gmt             <- yml$input$gmt;
gsea.yml$options         <- prms$options;
writeLines(as.yaml(gsea.yml), paste(path.input, 'gsea.yaml', sep='/'));
######################################
# gsea.cmmd <- GSEAviaJava(gsea.yml); ##
# ######################################
#
# if (dir.exists(path.gsea)) unlink(path.gsea, recursive = TRUE);
# dir.create(path.gsea, recursive = TRUE);
# file.rename(paste(path, gsea.yml$name, sep='/'), path.gsea);
gsea.tbl <- readRDS(paste(path.gsea, 'full_table.rds', sep='/'));
for (i in 1:ncol(gsea.tbl)) gsea.tbl[[i]] <- as.vector(gsea.tbl[[i]]);
saveRDS(gsea.tbl, file=paste(path.gsea, 'full_table.rds', sep='/'));
# Load gene lists of gene sets from GMT files
fn.gmt <- paste(path.gsea, TrimPath(as.vector(unlist(gsea.yml$gmt))), sep='/');
gmts <- lapply(fn.gmt, readGmt);
gsea.lst <- lapply(gmts, function(gmt) {
nm <- sub(' $', '', sapply(gmt, function(g) g@reference));
lst <- lapply(gmt, function(g) g@ids);
names(lst) <- toupper(nm);
lst;
});
names(gmts) <- names(gsea.lst) <- names(yml$input$gmt);
tbl <- data.frame(Collection=names(gmts), Gene_Set=sapply(gmts, length), rep('List', length(gmts)),
rep('List', length(gmts)),stringsAsFactors = FALSE);
names(tbl)[3:4] <- c(paste(g1.name, g2.name, sep=' > '), paste(g2.name, g1.name, sep=' > '));
lnk <- sapply(names(gmts), function(nm) {
x <- paste(path.gsea, nm, sep='/');
y <- dir(x);
y <- y[grep('.html$', y)];
z <- sapply(c(g1.name, g2.name), function(x) y[grep(paste('^gsea_report_for_', x, sep=''), y)]);
paste('GSEA', nm, z, sep='/');
});
tbl [, 3] <- paste('[', tbl[, 3], '](', lnk[1, ], ')', sep='');
tbl [, 4] <- paste('[', tbl[, 4], '](', lnk[2, ], ')', sep='');
rownames(tbl) <- NULL;
cll <- sort(unique(gsea.tbl$Collection));
tbls <- lapply(cll, function(c) gsea.tbl[gsea.tbl$Collection==c, , drop=FALSE]);
names(tbls) <- cll;
wid1 <- min(9.6, 2 + 0.6 * length(tbls));
out1 <- paste(100*wid1, 'px', sep='');
gsea.ex <- gsea.tbl;
gsea.ex <- gsea.ex[!is.na(gsea.ex$NES), , drop=FALSE];
gsea.ex <- gsea.ex[abs(gsea.ex$NES)==max(abs(gsea.ex$NES)), ];
ex.gsea <- dir(paste(path.gsea, gsea.ex$Collection, sep='/'));
ex.gsea <- ex.gsea[grep(gsea.ex$Gene_set[1], ex.gsea)];
ex.gsea <- paste(path.gsea, gsea.ex$Collection, ex.gsea[grep('^enplot', ex.gsea)][1], sep='/');
par(mar=c(8, 5, 1, 1));
sc <- lapply(tbls, function(x) x$NES);
ps <- lapply(sc, function(s) s[s>0]);
ng <- lapply(sc, function(s) s[s<0]);
mx <- max(sapply(sc, max));
cx <- max(strwidth(names(tbls), units = 'inch'))/2;
plot(0, type='n', ylim=c(-mx, mx), xlim=c(0, length(sc)), xaxt='n', xlab='',
ylab='Nominal enrichment score');
boxplot(ps, add=TRUE, at=(1:length(tbls)-0.5), col='#E74C3CBB', pch=18,
boxwex=0.5, names=rep('', length(ps)));
boxplot(ng, add=TRUE, at=(1:length(tbls)-0.5), col='#16A085BB', pch=18,
boxwex=0.5, names=rep('', length(ng)));
axis(1, at=(1:length(tbls)-0.5), label=names(tbls), las=3, cex.axis=cx);
abline(h=0);
sessionInfo();
prms$num_top
top <- gsea.tbl[order(gsea.tbl$NES), , drop=FALSE];
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
dim(tp1)
top1
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
dim(tp1)
dim(tp2)
length(gsea.lst)
names(gsea.lst)
top <- rbind(tp1, tp2);
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
top[1:2, ]
gns <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
names(gns)
length(gns)
str(gns)
dim(anno)
anno[1:2, ]
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- names(gns[gns>1]);
tb1 <- matrix(0, nc=length(gns), nr=rnow(top), dimnames = list(top$Gene_set, names(gns)));
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- names(gns[gns>1]);
tb1 <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, names(gns)));
dim(tbl1)
dim(tb1)
summary(gns)
gns <- table(unlist(lst, use.names=FALSE));
length(gns)
summary(gns)
summary(as.vector(gns))
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
head(gns)
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
length(gns)
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tb1 <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
tbl
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(top) %in% gns[[i]]] <- 1;
dim(tbl)
n <- colSums(tbl)
summary(n)
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% gns[[i]]] <- 1;
colSums(tbl)
sum(tbl)
colnames(tbl)
gns[[1]]
gns[[2]]
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% lst[[i]]] <- 1;
colSums(tbl)
?heatmap
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% lst[[i]]] <- 1;
dim(tbl)
tbl <- tbl[hclust(as.dist(1-cor(tbl)))$order, ];
tbl <- tbl[, hclust(as.dist(1-cor(tbl)))$order ];
dim(tbl)
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% lst[[i]]] <- 1;
tbl <- tbl[, hclust(as.dist(1-cor(tbl)))$order];
tbl <- tbl[hclust(as.dist(1-cor(t(tbl))))$order, ];
hclust(as.dist(1-cor(t(tbl))))$order
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% lst[[i]]] <- 1;
tbl <- tbl[, hclust(as.dist(1-cor(tbl)))$order];
dim(tbl)
colSums(tbl)
hclust(as.dist(1-cor(t(tbl))))$order
as.dist(1-cor(t(tbl)))
hclust(as.dist(1-cor(t(tbl))))
max(cor(t(tbl)))
r <- cor(t(tbl))
crr <- cor(t(tbl));
apply(crr, 2, function(x) which(is.na(x)))
apply(crr, 2, function(x) which(is.na(x)))[1]
crr[32, ]
crr[, 1]
crr[1, 1]
crr[1, 2]
crr[1, 3]
crr[1, 4]
crr[1, 32]
tbl[, c(1, 32)]
tbl[, c(1, 32)]->x
cor(x[, 1], x[, 2])
tbl[c(1, 32), ]
tbl[c(1, 32), ]->x
cor(x[1, ], x[2, ])
xtabs(~x[1,]+x[2,])
n <- sapply(lst, function(x) legnth(intersect(x, gns)))
n <- sapply(lst, function(x) length(intersect(x, gns)))
n
dim(tbl)
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% lst[[i]]] <- 1;
tbl <- tbl[, hclust(as.dist(1-cor(tbl)))$order];
tbl <- tbl[rowSums(tbl)>0, , drop=FALSE];
crr <- cor(t(tbl));
tbl <- tbl[hclust(as.dist(1-)))$order, ];
crr
tbl <- tbl[hclust(as.dist(1-cor(t(tbl)))))$order, ];
tbl <- tbl[hclust(as.dist(1-cor(t(tbl))))$order, ];
tp1 <- gsea.tbl[gsea.tbl$NES<0, ];
tp2 <- gsea.tbl[gsea.tbl$NES>0, ];
tp1 <- tp1[order(tp1$NES), , drop=FALSE][1:min(nrow(tp1), max(2, prms$num_top)), , drop=FALSE];
tp2 <- tp2[rev(order(tp1$NES)), , drop=FALSE][1:min(nrow(tp2), max(2, prms$num_top)), , drop=FALSE];
top <- rbind(tp1, tp2);
lst <- lapply(1:nrow(top), function(i) gsea.lst[[top[i, 1]]][[top[i, 2]]]);
gns <- table(unlist(lst, use.names=FALSE));
gns <- rev(sort(gns));
gns <- gns[gns>=gns[min(length(gns), 2*nrow(top))]];
gns <- names(gns[gns>1]);
tbl <- matrix(0, nc=length(gns), nr=nrow(top), dimnames = list(top$Gene_set, gns));
for (i in 1:nrow(top)) tbl[i, colnames(tbl) %in% lst[[i]]] <- 1;
tbl <- tbl[, hclust(as.dist(1-cor(tbl)))$order];
tbl <- tbl[rowSums(tbl)>0, , drop=FALSE];
tbl <- tbl[hclust(as.dist(1-cor(t(tbl))))$order, ];
PlotColoredBlock(tbl, -2, 2)
PlotColoredBlock(tbl, -2, 2)
PlotColoredBlock(-tbl, -2, 2)
wid2 <- min(9.6, 3+0.2*ncol(tbl));
wid2
3+0.2*ncol(tbl)
3+0.15*ncol(tbl)
hgt2 <- min(8, 2+0.2*nrow(tbl));
hgt2
hgt2 <- min(8, 2+0.15*nrow(tbl));
hgt2
nrow(tbl)
e <- readRDS('~/Documents/RoCA/data/gex/NCI60/expr.rds')
a <- readRDS('~/Documents/RoCA/data/gex/NCI60/anno.rds')
head(a)
a <- a[rownames(e), ]
e <- data.frame(symbol=a[[1]], e)
e[1:2, ]
e <- data.frame(symbol=CleanHtmlTags(a[[1]]), e[, -1])
e[1:2, ]
saveRDS(e, )
saveRDS(e, '~/Documents/RoCA/data/gex/NCI60/expr_symbol.rds')
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
name.yaml <- 'run_gsea.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'pathview', 'PGSEA', 'flexclust', 'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table',
'path.deg'='DEG', 'path.ora'='ORA', 'path.gsea'='GSEA');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
anno    <- as.vector(expr[[1]]);
expr    <- as.matrix(expr[, -1, drop=FALSE]);
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
head(anno)
# All input variables
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
# All input variables
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
# All input variables
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
name.yaml <- 'run_gsea.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'pathview', 'PGSEA', 'flexclust', 'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table',
'path.deg'='DEG', 'path.ora'='ORA', 'path.gsea'='GSEA');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
expr    <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- ImportR(DownloadFile(inputs$comparison, path.input));
anno    <- expr[, 1]
expr    <- as.matrix(expr[, -1, drop=FALSE]);
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
dim(expr)
head(anno)
