?setequal
grepl(prms$term, names(smpl))
?"split"
x <- sapply(phen, function(x) as.vector(smpl[, x]))
phen
phen <- setdiff(prms$term, names(smpl));
if (length(phen) > 0) stop("Sample phenotype(s): ", paste(phen, collapse=';'), ' not available.\n');
phen
phen <- setdiff(prms$term, names(smpl));
phen
phen <- sapply(prms$term, function(x) as.vector(smpl[, x]));
phen
smpl
phen <- setdiff(prms$term, names(smpl));
if (length(phen) > 0) stop("Sample phenotype(s): ", paste(phen, collapse=';'), ' not available.\n');
phen <- sapply(prms$term, function(x) as.vector(smpl[, x]));
phen <- sapply(phen, 1, function(x) paste(x, collapse='_'));
phen <- sapply(prms$term, function(x) as.vector(smpl[, x]));
phen
phen <- sapply(prms$term[1], function(x) as.vector(smpl[, x]));
phen
phen <- sapply(phen, 1, function(x) paste(x, collapse='_'));
class(phen)
phen <- apply(phen, 1, function(x) paste(x, collapse='_'));
phen
phen <- setdiff(prms$term, names(smpl));
if (length(phen) > 0) stop("Sample phenotype(s): ", paste(phen, collapse=';'), ' not available.\n');
phen <- sapply(prms$term, function(x) as.vector(smpl[, x]));
phen <- apply(phen, 1, function(x) paste(x, collapse='_'));
grp <-split(rownames(smpl), phen)[unique(phen)];
grp
paste0("cbind(", paste(names(dat)[-length(dat)],collapse=","), ")~Group")
x <- prms$term
formula
?formula
form <- paste('e ~', paste(prms$term, collapse='*'), 'data=smpl');
form
form <- formula(paste('e ~ ', paste(prms$term, collapse='*'), ', data=smpl', sep=''));
paste(prms$term, collapse='*')
form <- formula(paste('e ~ ', paste(prms$term, collapse='*'), ' data=smpl', sep=''));
form <- paste('e ~ ', paste(prms$term, collapse='*'), ', data=smpl', sep='');
form
formula(form)
as.formula(form)
form <- formula(paste('e ~ ', paste(prms$term, collapse='*')));
form
frm <- formula(paste('e ~ ', paste(prms$term, collapse='*')));
aov <- apply(expr0, 1, function(e) summary(aov(frm, data=smpl))[[1]]);
frm
e <- expr0[1, ]
aov(frm, data=smpl)
summary(aov(frm, data=smpl))
aov <- apply(expr0, 1, function(e) summary(aov(frm, data=smpl)));
aov[[1]]
aov[[1]][[1]]
aov[[1]][[1]][[1]]
aov <- sapply(aov, function(x) x[[1]])
dim(aov[[1]])
aov[[1]]
aov <- apply(expr0, 1, function(e) summary(aov(frm, data=smpl)));
aov <- sapply(aov, function(x) x[[1]]);
aov[[1]]
length(aov)
dim(aov)
head(aov)
aov <- apply(expr0, 1, function(e) summary(aov(frm, data=smpl)));
aov <- lapply(aov, function(x) x[[1]]);
aov[[1]]
aov[[1]][, 5]
pvs <- sapply(aov, function(x) x[1:(nrow(x)-1), 5]);
dim(pvs)
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
head(pvs)
colnames(pvs) <- rownames(aov[[1]][1:ncol(pvs)]);
rownames(aov[[1]])
rownames(aov[[1]][1:ncol(pvs)])
dim(pvs)
head(pvs)
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
head(pvs)
aov <- apply(expr0, 1, function(e) summary(aov(frm, data=smpl)));
aov <- lapply(aov, function(x) x[[1]]);
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
head(pvs)
aov[[1]]
aov[[2]]
aov <- apply(expr0, 1, function(e) summary(aov(frm, data=smpl)));
aov[[1]]
aov[[2]]
aov <- apply(expr0, 1, function(e) summary(aov(formula(paste('e ~ ', paste(prms$term, collapse='*'))), data=smpl)));
aov[[1]]
aov[[2]]
aov <- lapply(aov, function(x) x[[1]]);
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
head(pvs)
hist(pvs[, 1], br=100)
min(pvs[, 1])
aov[[1]]
cnm <- rownames(aov[[1]]);
cnm
cnm <- gsub(' ', '', cnm[-length(cnm)]);
cnm
cnm <- gsub(':', '*', cnm);
cnm
colnames(pvs) <- cnm;
head(pvs)
qvs <- apply(pvs, 2, function(p) p.adjust(p, method='BH'));
head(qvs)
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
cnm <- rownames(aov[[1]]);
cnm <- gsub(' ', '', cnm[-length(cnm)]);
cnm <- gsub(':', '*', cnm);
qvs <- apply(pvs, 2, function(p) p.adjust(p, method='BH'));
colnames(pvs) <- paste('pANOVA', cnm, sep='_');
colnames(qvs) <- paste('FDR', cnm, sep='_');
head(s)
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(prms$term, function(x) hist(pvs[, x], br=100, xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main=x));
prms$term
pvs[1:2, ]
if (length(prms$term) == 1) {
par(mar=c(5,5,2,2));
hist(p, br=100, xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main='');
} else {
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(prms$term, function(x) hist(pvs[, paste('pANOVA', x, sep='_')], br=100,
xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main=x));
}
ln <- paste(length(p[p<prms$selection$p]), 'genes have p values less than', prms$selection$p);
ln
cnm <- paste('pANOVA', prms$term, sep='_');
cnm
if (length(prms$term) == 1) {
par(mar=c(5,5,2,2));
hist(p, br=100, xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main='');
ln <- paste(length(p[p<prms$selection$p]), 'genes have p values less than', prms$selection$p);
} else {
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i]));
n <- sapply()
}
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i]));
plot(0)
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i]));
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i])) -> x;
n <- apply(1:length(prms$term), 2, function(p) length(p[p<=prms$selection$p]));
n <- apply(pvl[, 1:length(prms$term)], 2, function(p) length(p[p<=prms$selection$p]));
n <- apply(pvs[, 1:length(prms$term)], 2, function(p) length(p[p<=prms$selection$p]));
n
ln <- paste(min(n), 'to', max(n), 'genes have p values less than', prms$selection$p);
ln
prms$term <- prms$term[3]
# Summary statistics and ANOVA
grp <-split(rownames(smpl), phen)[unique(phen)];
m   <-sapply(grp, function(s) rowMeans(expr0[, s, drop=FALSE]));
mn  <-apply(expr0, 1, min);
mx  <-apply(expr0, 1, max);
if (length(prms$term) == 1) { # One way ANOVA
f<-as.factor(phen);
dat<-data.frame(t(expr0));
dat$Group<-f;
formula <- as.formula(paste0("cbind(", paste(names(dat)[-length(dat)],collapse=","), ")~Group") )
aov<-aov(formula, data=dat);
p<-as.vector(sapply(summary(aov), function(x) x[1, 5]));
q<-p.adjust(p, method='BH');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=p, FDR=q);
} else {
aov <- apply(expr0, 1, function(e) summary(aov(formula(paste('e ~ ', paste(prms$term, collapse='*'))), data=smpl)));
aov <- lapply(aov, function(x) x[[1]]);
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
cnm <- rownames(aov[[1]]);
cnm <- gsub(' ', '', cnm[-length(cnm)]);
cnm <- gsub(':', '*', cnm);
qvs <- apply(pvs, 2, function(p) p.adjust(p, method='BH'));
colnames(pvs) <- paste('pANOVA', cnm, sep='_');
colnames(qvs) <- paste('FDR', cnm, sep='_');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=pvs, FDR=qvs);
}
CreateDatatable(cbind(anno, FormatNumeric(stat)), paste(path.tbl, 'anova.html', sep='/'), caption="ANOVA results")
dim(stat)
head(stat)
phen <- setdiff(prms$term, names(smpl));
if (length(phen) > 0) stop("Sample phenotype(s): ", paste(phen, collapse=';'), ' not available.\n');
phen <- sapply(prms$term, function(x) as.vector(smpl[, x]));
phen <- apply(phen, 1, function(x) paste(x, collapse='_'));
# Summary statistics and ANOVA
grp <-split(rownames(smpl), phen)[unique(phen)];
m   <-sapply(grp, function(s) rowMeans(expr0[, s, drop=FALSE]));
mn  <-apply(expr0, 1, min);
mx  <-apply(expr0, 1, max);
if (length(prms$term) == 1) { # One way ANOVA
f<-as.factor(phen);
dat<-data.frame(t(expr0));
dat$Group<-f;
formula <- as.formula(paste0("cbind(", paste(names(dat)[-length(dat)],collapse=","), ")~Group") )
aov<-aov(formula, data=dat);
p<-as.vector(sapply(summary(aov), function(x) x[1, 5]));
q<-p.adjust(p, method='BH');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=p, FDR=q);
} else {
aov <- apply(expr0, 1, function(e) summary(aov(formula(paste('e ~ ', paste(prms$term, collapse='*'))), data=smpl)));
aov <- lapply(aov, function(x) x[[1]]);
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
cnm <- rownames(aov[[1]]);
cnm <- gsub(' ', '', cnm[-length(cnm)]);
cnm <- gsub(':', '*', cnm);
qvs <- apply(pvs, 2, function(p) p.adjust(p, method='BH'));
colnames(pvs) <- paste('pANOVA', cnm, sep='_');
colnames(qvs) <- paste('FDR', cnm, sep='_');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=pvs, FDR=qvs);
}
CreateDatatable(cbind(anno, FormatNumeric(stat)), paste(path.tbl, 'anova.html', sep='/'), caption="ANOVA results")
dim(stat)
head(stat)
colnames(m) <- paste('Mean', colnames(m), sep='_');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=p, FDR=q);
head(stat)
if (length(prms$term) == 1) {
par(mar=c(5,5,2,2));
hist(p, br=100, xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main='');
ln <- paste(length(p[p<prms$selection$p]), 'genes have p values less than', prms$selection$p);
} else {
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i])) -> x;
n <- apply(pvs[, 1:length(prms$term)], 2, function(p) length(p[p<=prms$selection$p]));
ln <- paste(min(n), 'to', max(n), 'genes have p values less than', prms$selection$p);
}
if (length(prms$term) == 1) {
par(mfrow=c(1,1), mar=c(5,5,2,2));
hist(p, br=100, xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main='');
ln <- paste(length(p[p<prms$selection$p]), 'genes have p values less than', prms$selection$p);
} else {
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i])) -> x;
n <- apply(pvs[, 1:length(prms$term)], 2, function(p) length(p[p<=prms$selection$p]));
ln <- paste(min(n), 'to', max(n), 'genes have p values less than', prms$selection$p);
}
e <- expr[q<=prms$selection$fdr, , drop=FALSE];
if (nrow(e) < prms$selection$min) {
q0 <- sort(q);
e <- expr[q <= q0[min(nrow(expr), prms$selection$min)], , drop=FALSE];
};
if (nrow(e) > prms$selection$min) { # continue if there are more selected genes than minimum
s<-stat[rownames(e), , drop=FALSE];
s<-s[order(s[, 'pANOVA']), , drop=FALSE];
e<-e[rownames(s), , drop=FALSE];
e<-e[1:max(prms$selection$min, max(which(s[, 'pANOVA']<=prms$selection$p))), , drop=FALSE];
if (nrow(e) > prms$selection$min) { # continue if there are more selected genes than minimum
s<-stat[rownames(e), , drop=FALSE];
s<-s[rev(order(s[, 'Range'])), , drop=FALSE];
e<-e[rownames(s), , drop=FALSE];
e<-e[1:max(prms$selection$min, max(which(s[, 'Range']>=prms$selection$range))), , drop=FALSE];
}
if (nrow(e) > prms$selection$max) e<-e[1:prms$selection$max, , drop=FALSE]; # trim if more selected genes than maximum
}
dim(e)
head(e)
if (length(prms$term) == 1) e <- select.gene(expr, stat, prms);
select.gene <- function(expr, stat, prms) {
e <- expr[q<=prms$selection$fdr, , drop=FALSE];
if (nrow(e) < prms$selection$min) {
q0 <- sort(q);
e <- expr[q <= q0[min(nrow(expr), prms$selection$min)], , drop=FALSE];
};
if (nrow(e) > prms$selection$min) { # continue if there are more selected genes than minimum
s<-stat[rownames(e), , drop=FALSE];
s<-s[order(s[, 'pANOVA']), , drop=FALSE];
e<-e[rownames(s), , drop=FALSE];
e<-e[1:max(prms$selection$min, max(which(s[, 'pANOVA']<=prms$selection$p))), , drop=FALSE];
if (nrow(e) > prms$selection$min) { # continue if there are more selected genes than minimum
s<-stat[rownames(e), , drop=FALSE];
s<-s[rev(order(s[, 'Range'])), , drop=FALSE];
e<-e[rownames(s), , drop=FALSE];
e<-e[1:max(prms$selection$min, max(which(s[, 'Range']>=prms$selection$range))), , drop=FALSE];
}
if (nrow(e) > prms$selection$max) e<-e[1:prms$selection$max, , drop=FALSE]; # trim if more selected genes than maximum
}
}
if (length(prms$term) == 1) e <- select.gene(expr, stat, prms);
dim(e)
select.gene <- function(expr, stat, prms) {
e <- expr[q<=prms$selection$fdr, , drop=FALSE];
if (nrow(e) < prms$selection$min) {
q0 <- sort(q);
e <- expr[q <= q0[min(nrow(expr), prms$selection$min)], , drop=FALSE];
};
if (nrow(e) > prms$selection$min) { # continue if there are more selected genes than minimum
s<-stat[rownames(e), , drop=FALSE];
s<-s[order(s[, 'pANOVA']), , drop=FALSE];
e<-e[rownames(s), , drop=FALSE];
e<-e[1:max(prms$selection$min, max(which(s[, 'pANOVA']<=prms$selection$p))), , drop=FALSE];
if (nrow(e) > prms$selection$min) { # continue if there are more selected genes than minimum
s<-stat[rownames(e), , drop=FALSE];
s<-s[rev(order(s[, 'Range'])), , drop=FALSE];
e<-e[rownames(s), , drop=FALSE];
e<-e[1:max(prms$selection$min, max(which(s[, 'Range']>=prms$selection$range))), , drop=FALSE];
}
if (nrow(e) > prms$selection$max) e<-e[1:prms$selection$max, , drop=FALSE]; # trim if more selected genes than maximum
}
e;
}
stat[1, ]
if (length(prms$term) == 1) e <- select.gene(expr, stat, prms);
dim(e)
head(e)
pvs[1:2, ]
prms <- yml$parameter
phen <- setdiff(prms$term, names(smpl));
if (length(phen) > 0) stop("Sample phenotype(s): ", paste(phen, collapse=';'), ' not available.\n');
phen <- sapply(prms$term, function(x) as.vector(smpl[, x]));
phen <- apply(phen, 1, function(x) paste(x, collapse='_'));
# Summary statistics and ANOVA
grp <-split(rownames(smpl), phen)[unique(phen)];
m   <-sapply(grp, function(s) rowMeans(expr0[, s, drop=FALSE]));
mn  <-apply(expr0, 1, min);
mx  <-apply(expr0, 1, max);
colnames(m) <- paste('Mean', colnames(m), sep='_');
if (length(prms$term) == 1) { # One way ANOVA
f<-as.factor(phen);
dat<-data.frame(t(expr0));
dat$Group<-f;
formula <- as.formula(paste0("cbind(", paste(names(dat)[-length(dat)],collapse=","), ")~Group") )
aov<-aov(formula, data=dat);
p<-as.vector(sapply(summary(aov), function(x) x[1, 5]));
q<-p.adjust(p, method='BH');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=p, FDR=q);
} else {
aov <- apply(expr0, 1, function(e) summary(aov(formula(paste('e ~ ', paste(prms$term, collapse='*'))), data=smpl)));
aov <- lapply(aov, function(x) x[[1]]);
pvs <- t(sapply(aov, function(x) x[1:(nrow(x)-1), 5]));
cnm <- rownames(aov[[1]]);
cnm <- gsub(' ', '', cnm[-length(cnm)]);
cnm <- gsub(':', '*', cnm);
qvs <- apply(pvs, 2, function(p) p.adjust(p, method='BH'));
colnames(pvs) <- paste('pANOVA', cnm, sep='_');
colnames(qvs) <- paste('FDR', cnm, sep='_');
stat<-cbind(m, Min=mn, Max=mx, Range=mx-mn, pANOVA=pvs, FDR=qvs);
}
CreateDatatable(cbind(anno, FormatNumeric(stat)), paste(path.tbl, 'anova.html', sep='/'), caption="ANOVA results")
if (length(prms$term) == 1) {
par(mfrow=c(1,1), mar=c(5,5,2,2));
hist(p, br=100, xlab='ANOVA p value', ylab='Number of genes', cex.lab=2, main='');
ln <- paste(length(p[p<prms$selection$p]), 'genes have p values less than', prms$selection$p);
} else {
par(mfrow=c(length(prms$term), 1), mar=c(5,5,2,2));
sapply(1:length(prms$term), function(i) hist(pvs[, i], br=100, xlab='ANOVA p value', ylab='Number of genes',
cex.lab=2, main=prms$term[i])) -> x;
n <- apply(pvs[, 1:length(prms$term)], 2, function(p) length(p[p<=prms$selection$p]));
ln <- paste(min(n), 'to', max(n), 'genes have p values less than', prms$selection$p);
}
stat[1:2, ]
es <- lapply(1:ncol(pvs), function(i) {
ss <- cbind(Range=stat[, 'Range'], pANOVA=pvs[, i], FDR=qvs[, i]);
select.gene(expr, ss, prms);
});
sapply(es, nrow)
ids <- Reduce('union', lapply(es, rownames));
length(ids)
e <- expr[ids, , drop=FALSE];
yml <- yaml.load_file('cluster_gene.yaml')
prms <- yml$parameter
ind<-which(smpl[, prms$normalization$control$column]==prms$normalization$control$name);
ind
expr<-t(apply(expr0, 1, function(x) (x-mean(x[ind]))/sd(x)));
expr[1, ]
expr[1:10, ]
expr[1:3, ]
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
prms$selection$fdr
CreateReport('cluster_gene.yaml')
source('~/.active-rstudio-document', echo=TRUE)
ids <- union(ids, rownames(expr)[apply(pvs, 1, min) <= prms$recluster$p]);
d<-expr[ids, , drop=FALSE];
dim(d)
length(ids)
x<-sortColumn(ms, grp);
PlotColoredBlock(x, min=-1*max(abs(x), na.rm=TRUE), max=max(abs(x), na.rm=TRUE), key='Average expression', groups=grp);
reCl<-function(d, cl, r, dif) {
md<-sapply(cl, function(cl) apply(d[cl[cl %in% rownames(d)], , drop=FALSE], 2, median));
corr<-cor(t(d), md);
c<-lapply(1:ncol(corr), function(i) {
mx<-apply(corr[, -i, drop=FALSE], 1, max);
rownames(corr)[corr[, i]>=r & (corr[, i]-mx)>dif];
});
c;
}
cls<-list(cl, reCl(d, cl, prms$recluster$r, prms$recluster$diff));
while (!identical(cls[[length(cls)]], cls[[length(cls)-1]]) & length(cls)<=prms$recluster$times) {
cls[[length(cls)+1]]<-reCl(d, cls[[length(cls)]], prms$recluster$r, prms$recluster$diff);
cat("Reclustering #", length(cls)-1, '\n');
}
sz.min<-max(3, prms$cluster$size*sum(sapply(cl, length))/length(cl));
sz.fit<-sapply(cls[[length(cls)]], length)>=sz.min;
cls<-lapply(cls, function(c) c[sz.fit]);
cl<-cls[[length(cls)]];
names(cl)<-paste('Cluster', 1:length(cl), sep='_');
# summary cluster sizes
n<-sapply(cls, function(c) sapply(c, length));
n<-data.frame(n);
colnames(n)<-paste('Cycle #', 0:(ncol(n)-1), sep='');
ms<-sapply(cl, function(cl) colMeans(expr[cl,  , drop=FALSE]));
ms<-data.frame(t(ms));
colnames(ms)<-colnames(expr);
rownames(ms)<-paste(rownames(ms), ' (n=', sapply(cl, length),  ')', sep='');
if(identical(cls[[length(cls)]], cls[[length(cls)-1]])) ln<-paste("The reclustering converged after", length(cls)-1, 'cycles') else ln<-paste("The reclustering didn't converge after", length(cls)-1, 'cycles')
str(cl)
ms<-sapply(cl, function(cl) colMeans(expr[cl,  , drop=FALSE]));
ms<-data.frame(t(ms));
colnames(ms)<-colnames(e);
rownames(ms)<-paste(rownames(ms), ' (n=', sapply(cl, length),  ')', sep='');
x<-sortColumn(ms, grp);
PlotColoredBlock(x, min=-1*max(abs(x), na.rm=TRUE), max=max(abs(x), na.rm=TRUE), key='Average expression', groups=grp);
ids<-as.vector(unlist(cl));
c<-rep(names(cl), sapply(cl, length));
tbl1<-data.frame(anno[ids, ], Cluster=c, FormatNumeric(expr[ids, ]));
tbl2<-data.frame(anno[ids, ], Cluster=c, FormatNumeric(stat[ids, ]));
write.csv2(tbl1, paste(path.tbl, 'clustered_data.csv', sep='/'));
write.csv2(tbl2, paste(path.tbl, 'clustered_stat.csv', sep='/'));
CreateDatatable(tbl1, paste(path.tbl, 'clustered_data.html', sep='/'));
CreateDatatable(tbl2, paste(path.tbl, 'clustered_stat.html', sep='/'));
saveRDS(tbl1, paste(path.r, 'clustered_data.rds', sep='/'));
saveRDS(tbl2, paste(path.r, 'clustered_stat.rds', sep='/'));
ms<-sapply(names(cl), function(nm) {
mtrx<-expr[cl[[nm]], , drop=FALSE];
mtrx<-sortColumn(mtrx, grp);
ms<-colMeans(mtrx);
m<-matrix(sapply(grp, function(g) mean(ms[g])), nr=1);
se<-matrix(sapply(grp, function(g) sd(ms[g])/sqrt(length(g))), nr=1);
colnames(m)<-names(grp);
fn<-paste(path.cl, '/', nm, '.pdf', sep='');
pdf(fn, w=6, h=12);
par(mfrow=c(3, 1));
# Pattern of group averages
par(mar=c(5, 5, 5, 2));
PlotSeries(m, se, labs=c('', 'Average expression'), title=paste(nm, 'Group average pattern', sep=': '), draw.legend = FALSE);
# Hierarchical clustering
par(mar=c(2, 5, 5, 2));
plot(hclust(as.dist(1-cor(mtrx))), main='Hierarchical sample clustering', xlab='', sub='');
# Heatmap
rownames(mtrx)<-paste(rownames(mtrx), CleanHtmlTags(anno[rownames(mtrx), 1]), sep='_');
PlotColoredBlock(mtrx, min=-1*max(abs(mtrx), na.rm=TRUE), max=max(abs(mtrx), na.rm=TRUE), num.breaks = 127,
groups=grp, key='Expression level');
abline(v=c(0, cumsum(sapply(grp, length))), lwd=1);
dev.off();
m;
});
rownames(ms)<-paste('Mean', names(grp), sep='_');
tbl<-data.frame(Cluster=paste('[', names(cl), '](cluster/', names(cl), '.pdf)', sep=''), Num_Gene=sapply(cl, length), FormatNumeric(t(ms)));
gse<-lapply(names(cl), function(nm) {
mtrx<-expr[cl[[nm]], , drop=FALSE];
mtrx<-sortColumn(mtrx, grp);
gse<-TestGSE(rownames(mtrx), rownames(expr), gset[[2]])[[1]];
gse<-WrapGSE(gse, gset[[1]], paste(path.cl, nm, sep='/'), FALSE);
fn<-TruncatePathPrefix(gse[[3]], path);
sapply(names(gse[[2]]), function(nm) paste('[', nrow(gse[[2]][[nm]]), '](', fn[nm], ')', sep=''));
});
gs<-sort(unique(unlist(lapply(gse, names), use.names=FALSE)));
tbl<-t(sapply(gse, function(gse) gse[gs]));
dimnames(tbl)<-list(names(cl), gs);
tbl[is.na(tbl)]<-'0';
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
length(xx)
expr <- readRDS('expr_adj.rds')
x <- org.Hs.egSYMBOL
# Get the gene symbol that are mapped to an entrez gene identifiers
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
x <- xx[rownames(expr)]
x <- unlist(x)
anno <- data.frame(symbol=x, stringsAsFactors = FALSE)
rownames(anno)<-rownames(expr)
dim(anno)
dim(expr)
expr <- expr[rownames(anno), ]
dim(expr)
saveRDS(expr, 'expr_adj.rds')
saveRDS(anno, 'anno_ajd.rds')
CreateReport('cluster_gene.yaml')
saveRDS(anno, 'anno_adj.rds')
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
x <- ImportTable(DownloadFile('https://raw.githubusercontent.com/zhezhangsh/RoCA/master/data/gex/circadian_rhythm/sample_wt.rds', getwd()))
dim(x)
x
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
CreateReport('cluster_gene.yaml')
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
dim(ps)
dim(stat)
head(ps)
CreateReport('cluster_gene.yaml')
dir()
dir('examples/')
CreateReport('cluster_gene.yaml')
RoCA::CreateReport('cluster_gene.yaml')
RoCA::CreateReport('cluster_gene.yaml')
RoCA::CreateReport('cluster_gene.yaml')
