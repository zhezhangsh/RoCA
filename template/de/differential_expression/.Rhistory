dir()
require(RoCA)
CreateReport('differential_expression.yaml')
deg <- readRDS("/Users/zhangz/Documents/RoCA/template/de/differential_expression/examples/nci60/R/deg.rds")
names(deg)
x <- deg[[1]]
dim(x)
x[1:2, ]
CleanHtmlTags(x[[1]])
xls <- deg
xls <- lapply(xls, function(x) {
for (i in ncol(x)) x[[i]] <- CleanHtmlTags(x[[i]]);
FormatNumeric(x);
});
head(xls[[1]])
CreateReport('differential_expression.yaml')
CreateReport('differential_expression.yaml')
CreateReport('differential_expression.yaml')
CreateReport('differential_expression.yaml')
CreateReport('differential_expression.yaml')
DeMethods()
CreateReport('differential_expression.yaml')
length(xls)
FormatNumeric(xls[[2]])
xls <- lapply(xls, function(x) {
for (i in 1:ncol(x)) x[[i]] <- CleanHtmlTags(x[[i]]);
FormatNumeric(x);
});
x <- xls[[2]]
head(x)
x[1, 10]
x[1, 9]
xls <- lapply(xls, function(x) {
for (i in 1:ncol(x)) x[[i]] <- CleanHtmlTags(x[[i]]);
for (i in 1:ncol(stat)) x[, colnames(stat)[i]] <- as.numeric(x[, colnames(stat)[i]]);
FormatNumeric(x);
});
CreateReport('differential_expression.yaml')
rm(list=ls())
name.yaml <- 'differential_expression.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'RoCA', 'rchive', 'awsomics', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table', 'path.deg'='deg');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
inputs<-yml$input;
# All input variables
anno    <- inputs$anno       <- ImportTable(DownloadFile(inputs$anno, path.input));
expr    <- inputs$expr       <- as.matrix(ImportTable(DownloadFile(inputs$expr, path.input)));
grps    <- inputs$comparison <- ImportR(DownloadFile(inputs$comparison, path.input));
g1.ind  <- intersect(colnames(expr), grps[[1]]);
g2.ind  <- intersect(colnames(expr), grps[[2]]);
g1.name <- gsub('-', '_', names(grps)[1]);
g2.name <- gsub('-', '_', names(grps)[2]);
anno <- anno[rownames(anno) %in% rownames(expr), , drop=FALSE];
expr <- expr[rownames(anno), , drop=FALSE];
paired <- prms$deg$paired;
if (is.null(paired))                         paired  <- FALSE;
if (paired & length(g1.ind)!=length(g2.ind)) paired  <- FALSE;
if (is.null(g1.name))                        g1.name <- 'Group_1';
if (is.null(g2.name))                        g2.name <- 'Group_2';
# Check validity of inputs
if (nrow(expr) < 3)   stop('Less than 3 genes in the data set, cannot continue.\n');
if (is.null(g1.ind))  stop('Error: Index of samples in group 1 unknown\n');
if (is.null(g2.ind))  stop('Error: Index of samples in group 2 unknown\n');
if (length(g1.ind)<2) stop('Error: Not enough samples in group ', g1.name, ' (minimum=2), cannot continue.\n');
if (length(g2.ind)<2) stop('Error: Not enough samples in group ', g2.name, ' (minimum=2), cannot continue.\n');
# Re-process gene expression matrix
e1   <- expr[, g1.ind, drop=FALSE];
e2   <- expr[, g2.ind, drop=FALSE];
e1.2 <- cbind(e1, e2);
inputs <- list(anno=anno, expr=expr);
inputs$parameters <- prms;
res <- list(inputs=inputs);  # Result set
de <- DeWrapper(mtrx=expr, grps=grps[1:2], mthd=prms$deg$method, paired=paired);
stat <- de$results$stat[, 1:6];
stat.table <- cbind(anno[rownames(stat), ], stat);
stat.formatted <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
stat.formatted[, prms$entrez+1] <-
AddHref(stat.formatted[, prms$entrez+1], UrlEntrezGene(stat.formatted[, prms$entrez+1]));
CreateDatatable(stat.formatted, fn = paste(path.deg, 'all_genes.html', sep='/'),
rownames = FALSE, caption = "Differential expression of all genes");
saveRDS(de, file=paste(path.r, 'all_genes.rds', sep='/'));
head(stat)
prms$count
if (prms$count) nrm <- NormalizeRNAseq(round(e1.2), methods = 'NormDESeq')$DESeq else nrm <- e1.2;
par(mfrow=c(3,1), mar=c(4,5,2,2));
# Distribution of average expression level
m <- rowMeans(nrm);
d <- density(m);
x <- d$x;
y <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='A. Distribution of Expression Level', cex.lab=2, cex.main=1.5);
title(xlab='Average expression level of genes', line=2, cex=2);
x0  <- as.vector(summary(m))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <- c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
# Distribution of standard deviation across samples
sd <- apply(nrm, 1, sd);
d  <- density(sd);
x  <- d$x;
y  <- d$y;
plot(d, type='n', yaxs='i', xaxs='i', xlim=c(min(x), max(x)), ylim=c(0, 1.1*max(y)), xlab='', ylab='Density', main='B. Distribution of Variance', cex.lab=2, cex.main=1.5);
title(xlab='Standard deviation of genes', line=2, cex=2);
x0  <- as.vector(summary(sd))[2:5];
y0  <- sapply(x0, function(x0, x, y) y[which(abs(x-x0)==min(abs(x-x0)))], x=x, y=y);
col <-c('blue', 'red', 'orange', 'green');
segments(x0, 0, x0, y0, lty=1, col=col, lwd=1);
lines(d, col='darkgrey', lwd=4);
text(x0, y0/2, srt=90, labels=round(x0, 3));
legend('topright', legend=c('First quantile', 'Median', 'Mean', 'Third quantile'), lty=1, col=col, bty='n', lwd=2);
plot(m, sd, xlab='', ylab='Standard Deviation', main='C. Variance vs. Expression Level', cex.lab=2, cex.main=1.5, cex=0.5, col='darkgrey');
title(xlab='Average expression level of genes', line=2, cex=2);
lines(lowess(m, sd), lwd=3, col=2);
dim(nrm)
summary(nrm)
nrm <- NormalizeRNAseq(round(e1.2), methods = 'NormDESeq')
names(nrm)
summary(nrm[[2]])
min(nrm[[2]])
x <- nrm[[2]]
min(x[x>0])
DeRNAseq
length(nrm[nrm==0])
nrm <- nrm[[2]]
length(nrm[nrm==0])
length(nrm[e1.2==0])
if (prms$count) {
nrm <- NormalizeRNAseq(round(e1.2), methods = 'NormDESeq')$DESeq;
nrm[nrm<=1/3] <- 1/3;
nrm <- log2(nrm);
} else nrm <- e1.2;
boxplot(nrm)
summary(stat[, 1])
min(stat[, 1:2])
x <- stat[, 1]
min(x[x>0])
CreateReport('differential_expression.yaml')
CreateReport('differential_expression.yaml')
CreateReport('differential_expression.yaml')
