cnt0 <- cnt0[, rownames(smpl), drop=FALSE];
for (i in 1:ncol(smpl)) smpl[[i]] <- as.factor(smpl[[i]]);
g0 <- prms$comparison$group0;
g1 <- prms$comparison$group1;
s0 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g0];
s1 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g1];
cnt1 <- cnt0[rowSums(cnt0[, c(s0, s1), drop=FALSE])>=prms$count$total, , drop=FALSE];
cnt1 <- cnt1[rowMeans(cnt1[, c(s0, s1), drop=FALSE])>=prms$count$mean, , drop=FALSE];
anno <- anno[rownames(cnt1), , drop=FALSE];
fml <- formula(prms$formula);
cnd <- unique(c(prms$comparison$condition, gsub(' ', '', strsplit(sub('~', '', prms$formula), '[+*]')[[1]])));
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = fml);
# Estimate size factor
whc <- prms$normalization$column;
# Estimate size factor
whc <- prms$normalization$column;
whc
ind <- which(anno[, whc]==1);
# Estimate size factor
whc <- prms$normalization$column;
ind <- which(anno[, whc]==1);
head(anno)
dim(anno)
anno$normalization <- as.integer(anno[[1]]!='chrX' & anno[[1]]!='chrY')
saveRDS(anno, '/Users/zhangz/Development/RoCA/data/gex/immune_cells_rnaseq/anno.rds')
inputs <- yml$input;
# All input variables
anno    <- inputs$anno      <- ImportTable(DownloadFile(inputs$anno, path.input));
cnt0    <- inputs$count     <- as.matrix(ImportTable(DownloadFile(inputs$count, path.input)));
smpl    <- inputs$sample    <- ImportR(DownloadFile(inputs$sample, path.input));
smpl <- smpl[rownames(smpl) %in% colnames(cnt0), , drop=FALSE];
cnt0 <- cnt0[, rownames(smpl), drop=FALSE];
for (i in 1:ncol(smpl)) smpl[[i]] <- as.factor(smpl[[i]]);
g0 <- prms$comparison$group0;
g1 <- prms$comparison$group1;
s0 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g0];
s1 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g1];
cnt1 <- cnt0[rowSums(cnt0[, c(s0, s1), drop=FALSE])>=prms$count$total, , drop=FALSE];
cnt1 <- cnt1[rowMeans(cnt1[, c(s0, s1), drop=FALSE])>=prms$count$mean, , drop=FALSE];
anno <- anno[rownames(cnt1), , drop=FALSE];
fml <- formula(prms$formula);
cnd <- unique(c(prms$comparison$condition, gsub(' ', '', strsplit(sub('~', '', prms$formula), '[+*]')[[1]])));
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = fml);
# Estimate size factor
whc <- prms$normalization$column;
ind <- which(anno[, whc]==1);
whc
ncol(anno)
whc <- 5
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
}
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
}
length(ind)
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
anno <- anno[, -whc, drop=FALSE];
} ind <- 1:nrow(anno);
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
anno <- anno[, -whc, drop=FALSE];
} else ind <- 1:nrow(anno);
dds <- DESeq2::estimateSizeFactors(dds, controlGenes=ind);
names(pca)
dim(anno)
smpl
head(smpl)
dim(cnt2)
dim(cnt1)
dim(cnt0)
cor(cnt1, cnt2)
deg <- list(sample=smpl, anno=anno, count=list(original=cnt1, normalized=cnt2), stat=stat, parameter=prms);
dim(up)
dim(dn)
stat.table <- cbind(anno[rownames(stat), ], stat, round(cnt2, 2));
head(stat.table)
stat.table <- cbind(anno[rownames(stat), ], stat, round(cnt2, 2));
stat.formatted <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
head(stat.formatted)
ind <- prms$anno$entrez;
ind
if (ind >= 0) stat.formatted[, ind+1] <- AddHref(stat.formatted[, ind+1], UrlEntrezGene(stat.formatted[, ind+1]));
# Write index tables of DEGs
cnm <- c(colnames(anno), colnames(up), 'Samples');
ind <- prms$entrez;
cnm
xls <- list(stat, up, dn);
sapply(xls, nrow)
xls <- list(stat, up, dn);
xls <- lapply(xls, function(x) data.frame(anno[rownames(x), ], x, cnt2[rownames(x), ], stringsAsFactors=FALSE, check.names=FALSE));
sapply(xls, dim)
xls <- list(stat, up, dn);
xls <- lapply(xls, function(x)
data.frame(anno[rownames(x), ], x, cnt2[rownames(x), c(s0, s1)], stringsAsFactors=FALSE, check.names=FALSE));
names(xls) <- c('All genes', paste('Higher in', g1), paste('Lower in', g1));
names(xls)
sapply(xls, dim)
WriteExcel(xls, fileName = paste(path.deg, 'deg', sep='/'));
names(pcca)
names(pca)
xls <- list(stat, up, dn);
xls <- lapply(xls, function(x)
data.frame(anno[rownames(x), ], x, cnt2[rownames(x), c(s0, s1)], stringsAsFactors=FALSE, check.names=FALSE));
xls <- lapply(xls, FormatNumeric);
names(xls) <- c('All genes', paste('Higher in', g1), paste('Lower in', g1));
head(xls[[1]])
WriteExcel(xls, fileName = paste(path.deg, 'deg', sep='/'));
pctl <- apply(cnt2, 2, function(e) 100*rank(e)/length(e)); # percentile
path.deg1 <- paste(path.deg, deg.sub[1], sep='/');
path.deg2 <- paste(path.deg, deg.sub[2], sep='/');
path.deg1.bars <- paste(path.deg1, '/bars', sep='');
path.deg2.bars <- paste(path.deg2, '/bars', sep='');
if (!exists(path.deg1.bars)) dir.create(path.deg1.bars, showWarnings = FALSE, recursive = TRUE);
if (!exists(path.deg2.bars)) dir.create(path.deg2.bars, showWarnings = FALSE, recursive = TRUE);
ids <- c(up=rownames(up), dn=rownames(dn));
names(ids) <- paste(rep(c(path.deg1.bars, path.deg2.bars), c(nrow(up), nrow(dn))), '/', ids, '.pdf', sep='');
ttl <- rownames(anno);
aid <- unlist(prms$anno);
aid <- names(aid[aid>0]);
aid <- aid[aid %in% colnames(anno)];
if (length(aid) > 0) for (i in 1:length(aid)) ttl <- paste(ttl, anno[, aid[i]], sep=' - ');
names(ttl) <- rownames(anno);
col <- rep(c('#16A085BB', '#E74C3CBB'), c(length(s0), length(s1)));
wid <- min(1.8, 8/max(nchar(colnames(cnt2[, c(s0, s1)]))));
fn.barplot <- sapply(names(ids), function(nm) {
pdf(nm, w=8, h=6);
par(mai=c(1.2, 1, 0.6, 0.2));
barplot(cnt2[ids[nm], c(s0, s1)], las=3, col=col, ylab='Normalized read count', cex.lab=2, cex.names=0.75*wid);
title(main=ttl[ids[nm]], cex.main=1);
par(mai=c(1.2, 1.2, 0.6, 0.2));
barplot(pctl[ids[nm], c(s0, s1)], las=3, col=col, ylab='Percentile (%)', ylim=c(0, 100), cex.lab=2, cex.names=0.75*wid);
title(main=ttl[ids[nm]], cex.main=1);
dev.off();
nm;
});
cnm <- c(colnames(anno), colnames(up), 'Samples');
ind <- prms$anno$entrez;
fn.barplot
length(ids)
names(ids)
fn.barplot
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)));
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)));
colnames(up.tbl) <- cnm;
up.tbl$Samples   <- AddHref(up.tbl$Samples, paste('bars/', rownames(up), '.pdf', sep=''));
head(up.tbl)
args(GeneList2Datatable)
GeneList2Datatable
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.tbl$Barplot <- AddHref(up.tbl$Barplot, paste('bars/', rownames(up), '.pdf', sep=''));
up.tbl <- cbind(ID=rownames(up.tbl), up.tbl);
up.tbl[1:2, ]
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.tbl$Barplot <- AddHref(up.tbl$Barplot, paste('bars/', rownames(up), '.pdf', sep=''));
up.tbl <- cbind(ID=rownames(up.tbl), up.tbl);
up.tbl[1:2, ]
prms$anno
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.tbl$Barplot <- AddHref(up.tbl$Barplot, paste('bars/', rownames(up), '.pdf', sep=''));
up.tbl <- cbind(ID=rownames(up.tbl), up.tbl);
up.formatted <- GeneList2Datatable(FormatNumeric(up.tbl), fn=paste(path.deg1, 'index.html', sep='/'),
col.entrez=prms$anno$entrez, col.symbol=prms$anno$symbol, genome=prms$genome);
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
prms$genome
up.formatted <- GeneList2Datatable(FormatNumeric(up.tbl), fn=paste(path.deg1, 'index.html', sep='/'),
col.entrez=prms$anno$entrez, col.symbol=prms$anno$symbol, genome=prms$genome);
up.formatted
up.url <- paste0('[', rownames(up.tbl), '](', paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(up.tbl)), ')');
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.tbl$Barplot <- AddHref(up.tbl$Barplot, paste('bars/', rownames(up), '.pdf', sep=''));
up.url <- paste0('[', rownames(up.tbl), '](', paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(up.tbl)), ')');
up.tbl <- cbind(ID=up.url, up.tbl);
CreateDatatable(up.tbl, paste0(path.deg1, '/index.html'));
up.url <- paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(up.tbl));
up.url
up.url <- AddHref(rownames(up.tbl), paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(up.tbl)));
up.tbl <- cbind(ID=up.url, up.tbl);
CreateDatatable(up.tbl, paste0(path.deg1, '/index.html'))->x;
CreateDatatable(up.tbl, paste0(path.deg1, '/index.html'), rownames = FALSE)->x;
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.tbl$Barplot <- AddHref(up.tbl$Barplot, paste('bars/', rownames(up), '.pdf', sep=''));
up.url <- AddHref(rownames(up.tbl), paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(up.tbl)));
up.tbl <- cbind(ID=up.url, up.tbl);
CreateDatatable(up.tbl, paste0(path.deg1, '/index.html'), rownames = FALSE)->x;
up.tbl[1:2, ]
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.tbl <- data.frame(anno[rownames(up), , drop=FALSE], up, rep('Figure', nrow(up)), stringsAsFactors=FALSE, check.names=FALSE);
up.url <- AddHref(rownames(up.tbl), paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(up.tbl)));
up.fig <- AddHref('Figure', paste('bars/', rownames(up), '.pdf', sep=''));
up.tbl <- cbind(ID=up.url, up.tbl, Barplot=up.fig);
CreateDatatable(up.tbl, paste0(path.deg1, '/index.html'), rownames = FALSE)->x;
dn.tbl <- data.frame(anno[rownames(dn), , drop=FALSE], dn, stringsAsFactors=FALSE, check.names=FALSE);
dn.url <- AddHref(rownames(dn.tbl), paste0('https://www.ncbi.nlm.nih.gov/gene/?term=', rownames(dn.tbl)));
dn.fig <- AddHref('Figure', paste('bars/', rownames(dn), '.pdf', sep=''));
dn.tbl <- cbind(ID=dn.url, dn.tbl, Barplot=dn.fig);
CreateDatatable(dn.tbl, paste0(path.deg2, '/index.html'), rownames = FALSE)->x;
stat.table <- data.frame(anno[rownames(stat), , drop=FALSE], stat, round(cnt2[, c(s0, s1), drop=FALSE], 2),
stringsAsFactors=FALSE, check.names=FALSE);
stat.formatted <- FormatNumeric(cbind(ID=rownames(stat.table), stat.table));
ind <- prms$anno$entrez;
if (ind >= 0) stat.formatted[, ind+1] <- AddHref(stat.formatted[, ind+1], UrlEntrezGene(stat.formatted[, ind+1]));
CreateDatatable(stat.formatted, fn = paste(path.deg, 'all_genes.html', sep='/'), rownames = FALSE);
dim(deg.sub)
deg.sub
paste('deg', deg.sub[1], 'index.html', sep='/')
CreateReport_2('deseq2_multivariate.yaml')
pca$x
### PCA
pca.table <- data.frame(smpl, pca$x[rownames(smpl), , drop=FALSE], stringsAsFactors = FALSE, check.names = FALSE);
pca.table
### PCA
pca.table <- data.frame(smpl, pca$x[rownames(smpl), , drop=FALSE], stringsAsFactors = FALSE, check.names = FALSE);
CreateDatatable(pca.table, paste0(path.tbl, '/pca.html'));
path.tbl
CreateDatatable(FormatNumeric(pca.table), paste0(path.tbl, '/pca.html'));
x <- pca$importance
x
t(x)
round(t(x), 4)
### PCA
pca.table <- data.frame(t(pca$importance), pca$x, stringsAsFactors = FALSE, check.names = FALSE);
### PCA
pca.table <- data.frame(t(pca$importance), pca$x, stringsAsFactors = FALSE, check.names = FALSE);
CreateDatatable(round(pca.table, 3), paste0(path.tbl, '/pca.html'));
CreateDatatable(FormatNumeric(pca.table, 3), paste0(path.tbl, '/pca.html'));
names(pca)
sapply(pca, dim)
dim(pca[[3]])
x <- pca[[2]]
head(x)
summary(x[, 1])
hist(x[,1 ])
saveRDS(deg, file=paste0(path.r, '/deg.rds'));
CreateReport_2('deseq2_multivariate.yaml')
### Zip
# zip(paste(path.fig, 'figure.zip', sep='/'), path.fig, zip = 'zip');
# zip(paste(path.deg, 'deg.zip', sep='/'), path.deg, zip = 'zip');
zip(paste0(path.r, '/R.zip'), path.r, zip = 'zip');
### Zip
# zip(paste(path.fig, 'figure.zip', sep='/'), path.fig, zip = 'zip');
zip(paste0(path.deg, '/deg.zip'), path.deg, zip = 'zip');
path
zip(paste0(path, '/result.zip'), path, zip = 'zip');
CreateReport('deseq2_multivariate.yaml')
?zip
### Zip
fz1 <- paste0(path.deg, '/deg.zip');
file.remove(fz1);
fz1 <- paste0(path.deg, '/deg.zip');
fz2 <- paste0(path.r, '/R.zip');
fz3 <- paste0(path, '/result.zip')
file.remove(c(fz1, fz2, fz3));
try(file.remove(c(fz1, fz2, fz3)));
zip(fz2, path.r, zip = 'zip')
capture.output(zip(fz2, path.r, zip = 'zip'))
capture.output(zip(fz2, path.r, zip = 'zip'))
capture.output(zip(fz2, path.r, zip = 'zip'))->x
suppressForeignCheck(zip(fz2, path.r, zip = 'zip'))->x
suppressMessages(zip(fz2, path.r, zip = 'zip'))->x
fz1 <- paste0(path.deg, '/deg.zip');
fz2 <- paste0(path.r, '/R.zip');
fz3 <- paste0(path, '/result.zip');
if (file.exists(fz1)) file.remove(fz1);
if (file.exists(fz2)) file.remove(fz2);
if (file.exists(fz3)) file.remove(fz3);
zip(fz1, path.deg, zip = 'zip');
zip(fz2, path.r, zip = 'zip');
zip(fz3, path, zip = 'zip');
CreateReport('deseq2_multivariate.yaml')
require(RoCA)
CreateReport('deseq2_multivariate.yaml')
ls()
rm(figure.count)
rm(table.count)
CreateReport('deseq2_multivariate.yaml')
name.yaml <- 'deseq2_multivariate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'RoCA', 'rchive', 'awsomics', 'DESeq2', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table', 'path.deg'='deg');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
home.url <- Link2Home(yml$home);
inputs <- yml$input;
# All input variables
anno    <- inputs$anno      <- ImportTable(DownloadFile(inputs$anno, path.input));
cnt0    <- inputs$count     <- as.matrix(ImportTable(DownloadFile(inputs$count, path.input)));
smpl    <- inputs$sample    <- ImportR(DownloadFile(inputs$sample, path.input));
smpl <- smpl[rownames(smpl) %in% colnames(cnt0), , drop=FALSE];
cnt0 <- cnt0[, rownames(smpl), drop=FALSE];
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
g0 <- prms$comparison$group0;
g1 <- prms$comparison$group1;
s0 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g0];
s1 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g1];
cnt1 <- cnt0[rowSums(cnt0[, c(s0, s1), drop=FALSE])>=prms$count$total, , drop=FALSE];
cnt1 <- cnt1[rowMeans(cnt1[, c(s0, s1), drop=FALSE])>=prms$count$mean, , drop=FALSE];
anno <- anno[rownames(cnt1), , drop=FALSE];
fml <- formula(prms$formula);
cnd <- unique(c(prms$comparison$condition, gsub(' ', '', strsplit(sub('~', '', prms$formula), '[+*]')[[1]])));
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = fml);
# Estimate size factor
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
anno <- anno[, -whc, drop=FALSE];
} else ind <- 1:nrow(anno);
dds <- DESeq2::estimateSizeFactors(dds, controlGenes=ind);
szf <- DESeq2::sizeFactors(dds);
# Run DESeq2 test
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local');
res <- DESeq2::results(dds, contrast = c(cnd[1], g1, g0));
pvl <- 2*pnorm(-abs(res[, 'stat']));
qvl <- res[, 'padj'];
fc0 <- res[, 'log2FoldChange'];
fc1 <- DESeq2::lfcShrink(dds, contrast=c(cnd[1], g1, g0), type = 'normal')[, 2];
pvl[is.na(pvl)] <- 1;
qvl[is.na(qvl)] <- 1;
fc0[is.na(fc0)] <- 0;
fc1[is.na(fc1)] <- 0;
cnt2 <- counts(dds, normalized=TRUE);
nrm0 <- cnt2[, s0, drop=FALSE];
nrm1 <- cnt2[, s1, drop=FALSE];
mn0  <- rowMeans(nrm0);
mn1  <- rowMeans(nrm1);
stat <- cbind(mn0, mn1, mn1-mn0, fc1, pvl, qvl);
colnames(stat) <- c(paste('Mean', c(g0, g1), sep='_'), 'Mean_Change', 'LogFC', 'Pvalue', 'FDR');
saveRDS(stat, paste0(path.r, '/stat.rds'));
smpl
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Cell + Disease);
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Disease + Donor);
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Disease + Cell);
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
inputs <- yml$input;
# All input variables
anno    <- inputs$anno      <- ImportTable(DownloadFile(inputs$anno, path.input));
cnt0    <- inputs$count     <- as.matrix(ImportTable(DownloadFile(inputs$count, path.input)));
smpl    <- inputs$sample    <- ImportR(DownloadFile(inputs$sample, path.input));
smpl <- smpl[rownames(smpl) %in% colnames(cnt0), , drop=FALSE];
cnt0 <- cnt0[, rownames(smpl), drop=FALSE];
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
g0 <- prms$comparison$group0;
g1 <- prms$comparison$group1;
s0 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g0];
s1 <- rownames(smpl)[as.vector(smpl[[prms$comparison$condition]])==g1];
cnt1 <- cnt0[rowSums(cnt0[, c(s0, s1), drop=FALSE])>=prms$count$total, , drop=FALSE];
cnt1 <- cnt1[rowMeans(cnt1[, c(s0, s1), drop=FALSE])>=prms$count$mean, , drop=FALSE];
anno <- anno[rownames(cnt1), , drop=FALSE];
fml <- formula(prms$formula);
cnd <- unique(c(prms$comparison$condition, gsub(' ', '', strsplit(sub('~', '', prms$formula), '[+*]')[[1]])));
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = fml);
# Estimate size factor
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
anno <- anno[, -whc, drop=FALSE];
} else ind <- 1:nrow(anno);
dds <- DESeq2::estimateSizeFactors(dds, controlGenes=ind);
szf <- DESeq2::sizeFactors(dds);
# Run DESeq2 test
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local');
res <- DESeq2::results(dds, contrast = c(cnd[1], g1, g0));
pvl <- 2*pnorm(-abs(res[, 'stat']));
qvl <- res[, 'padj'];
fc0 <- res[, 'log2FoldChange'];
fc1 <- DESeq2::lfcShrink(dds, contrast=c(cnd[1], g1, g0), type = 'normal')[, 2];
pvl[is.na(pvl)] <- 1;
qvl[is.na(qvl)] <- 1;
fc0[is.na(fc0)] <- 0;
fc1[is.na(fc1)] <- 0;
cnt2 <- counts(dds, normalized=TRUE);
nrm0 <- cnt2[, s0, drop=FALSE];
nrm1 <- cnt2[, s1, drop=FALSE];
mn0  <- rowMeans(nrm0);
mn1  <- rowMeans(nrm1);
stat <- cbind(mn0, mn1, mn1-mn0, fc1, pvl, qvl);
colnames(stat) <- c(paste('Mean', c(g0, g1), sep='_'), 'Mean_Change', 'LogFC', 'Pvalue', 'FDR');
saveRDS(stat, paste0(path.r, '/stat.rds'));
require(DESeq2)
model.matrix(~Disease + Cell + Disease:Donor, smpl)
model.matrix(~Disease + Cell + Disease:Donor, smpl)->dsg
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local', full=dsg);
model.matrix(~Disease + Disease:Cell + Disease:Donor, smpl)->dsg
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local', full=dsg);
model.matrix(~Disease + Disease:Donor, smpl)->dsg
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local', full=dsg);
smpl$Refactor <- as.factor(rep(rep(1:3, each=3), 2))
model.matrix(~Disease + Cell + Disease:Refactor, smpl)->dsg
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local', full=dsg);
resultsNames(dds)
smpl[1:2, ]
res <- DESeq2::results(dds, contrast = list('Control', 'Patient'))
res <- DESeq2::results(dds, name = 'DiseasePatient')
head(res)
x <- res[order(res[, 5]), ]
head(x)
cnt2['XIST', ]
barplot(cnt2['XIST', ])
barplot(cnt2['XIST', ], las=3)
smpl
fml
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = fml);
# Estimate size factor
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
anno <- anno[, -whc, drop=FALSE];
} else ind <- 1:nrow(anno);
dds <- DESeq2::estimateSizeFactors(dds, controlGenes=ind);
szf <- DESeq2::sizeFactors(dds);
# Run DESeq2 test
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local');
resultsNames(dds)
cnd
res <- DESeq2::results(dds, contrast = c('Disease_Patient_vs_Control', 'Patient', 'Control'));
res <- DESeq2::results(dds, contrast = c('Disease', 'Patient', 'Control'));
head(res)
x <- res[order(res[, 5]), ]
head(x)
cnt2['MSL1', ]
barplot(cnt2['MSL1', ])
barplot(cnt2['HSPA2', ])
barplot(cnt2['TOB2', ])
dsg
model.matrix(~Disease + Cell + Disease:Refactor, smpl)->dsg
smpl
model.matrix(~Disease + Disease:Cell + Disease:Refactor, smpl)->dsg
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local', full=dsg);
res1 <- res
resultsNames(dds)
res2 <- results(dds, name='DiseasePatient')
head(res2)
y <- res2[order(res2[, 5]), ]
head(y)
barplot(cnt2['HSPA8', ])
barplot(cnt2['HSPA8', ], las=3)
barplot(cnt2['XIST', ], las=3)
barplot(cnt2['TSIX', ], las=3)
fc1 <- DESeq2::lfcShrink(dds, contrast=c("Disease", "Patient", "Control"), type = 'normal')[, 2];
fc1 <- DESeq2::lfcShrink(dds, contrast=c("Disease", "Patient", "Control"), type = 'normal')
?lfcShrink
resultsNames(dds)
fc1 <- DESeq2::lfcShrink(dds, coef=2, type = 'normal')
summary(fc1)
head(fc1)
fc <- fc1[, 2]
fc <- sort(fc)
head(fc)
a <- fc1[order(fc1[, 2]), ]
head(a)
a <- a[nrow(a):1, ]
head(a)
barplot(cnt2['DDX3Y', ])
barplot(cnt2['DDX3Y', ], las=3)
res2['XIST', ]
head(fc1)
fc1['XIST', ]
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Disease + Cell);
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Disease + Cell);
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Disease + Cell);
smpl[[1]]
for (i in 1:ncol(smpl)) smpl[[i]] <- as.factor(smpl[[i]]);
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cnt1, colData = smpl, design = ~ Disease + Cell);
# Estimate size factor
whc <- prms$normalization$column;
if (whc>=1 & whc<=ncol(anno)) {
ind <- which(anno[, whc]==1);
anno <- anno[, -whc, drop=FALSE];
} else ind <- 1:nrow(anno);
dds <- DESeq2::estimateSizeFactors(dds, controlGenes=ind);
szf <- DESeq2::sizeFactors(dds);
# Run DESeq2 test
dds <- DESeq2::DESeq(dds, test='Wald', fitType='local');
cnd[1]
res <- DESeq2::results(dds, contrast = c(cnd[1], g1, g0));
g1
g0
resultsNames(dds)
res <- results(dds, coef=2)
res <- results(dds, name='Disease_Patient_vs_Control')
dim(res)
head(res)
res['XIST', ]
res <- res[order(res[, 5]), ]
head(res)
barplot(cnt2['MSL1', ])
dim(res1)
dim(res2)
res1['MSL1', ]
res2['MSL1', ]
