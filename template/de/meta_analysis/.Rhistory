t <- tbl0[c==nm, -1, drop=FALSE];
s <- nes[c==nm, , drop=FALSE];
fn1 <- paste('collection_', nm, '.html', sep='');
CreateDatatable(t, paste(path.tbl, fn1, sep='/'), rownames = FALSE);
ind <- prms$geneset$collection$comparison;
top <- prms$geneset$collection$top;
if (ind>=1 & ind<=ncol(s) &!is.na(ind) & !is.null(ind)) {
x <- s[rev(order(abs(s[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
x <- x[rev(order(x[, ind])), , drop=FALSE];
} else {
x <- s[rev(order(rowMeans(abs(s), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
x <- x[rev(order(rowMeans(x, na.rm=TRUE))), , drop=FALSE];
}
rownames(x) <- substr(rownames(x), 1, 200);
sz <- CalculateColoredBlockSize(x);
fn2 <- paste('collection_', nm, '.png', sep='');
png(paste(path.fig, fn2, sep='/'), w=sz[1], h=sz[2], units='in', res=150);
PlotColoredBlock(x, min=-3, max=3, num.breaks = 63, key='Enrichment score', groups=colnames(nes));
dev.off();
pdf(paste(path.fig, sub('.png$', '.pdf', fn2), sep='/'), w=sz[1], h=sz[2]);
PlotColoredBlock(x, min=-3, max=3, num.breaks = 63, key='Enrichment score', groups=colnames(nes));
dev.off();
list(nrow(t), fn1, fn2);
});
rownames(nes) <- rownames(pvl) <- nms;
x <- rev(sort(rowMeans(abs(nes))))[1:min(length(p0), prms$geneset$top)];
x <- nes[names(x), , drop=FALSE];
y <- x[hclust(dist(x))$order, , drop=FALSE];
rownames(y) <- substr(rownames(y), 1, 200);
PlotColoredBlock(y, groups=NM, min=-3, max=3, key='Enrichment score');
tbl <- tbl0[tbl0[, 2] %in% rownames(x), , drop=FALSE];
CreateDatatable(tbl, paste(path.tbl, 'gsea_top_mean.html', sep='/'), rownames = FALSE) -> x;
write.csv(tbl, paste(path.tbl, 'gsea_top_mean.csv', sep='/'), row.names = FALSE);
yml <- yaml.load_file('meta_analysis.yaml')
prms <- yml$parameter
prm <- prms$geneset$heatmap
prm
x <- nes
top <- prms$geneset$heatmap$top$overall
top
sort <- 1
top <- 100
sort <- 1
order <- 0
if (ind>=1 & ind <=ncol(x)) x <- x[rev(order(abs(x[, ind]))), , drop=FALSE] else
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
dim(x)
head(x)
ind
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
x <- x[o, , drop=FALSE]
head(x)
x
x
summary(nes[, 2])
sort(abs(nes[, 2]))
ind <- 1
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
x
ind
dim(x)
top <- 50
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
dim(x)
x
summary(nes[, 1])
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
head(x)
dim(nes)
x <- nes
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
head(x)
x[, 1]
summary(x[, 1])
x <- x[o, , drop=FALSE]
head(x)
x <- x[o, , drop=FALSE]
head(x)
x <- nes
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
x <- x[rev(o), , drop=FALSE]
head(x)
x <- x[hclust(dist(x))$order, , drop=FALSE];
head(x)
summary(x[, 3])
top
ind
ind <- 0
ord
sortNES <- function(x, top, ind, ord) {
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
if (ord == -1) x <- x[o, , drop=FALSE] else if (ord == 1) x <- x[rev(o), , drop=FALSE] else
x <- x[hclust(dist(x))$order, , drop=FALSE];
x;
};
sortNES <- function(x, top, ind, ord) {
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
if (ord == -1) x <- x[o, , drop=FALSE] else if (ord == 1) x <- x[rev(o), , drop=FALSE] else
x <- x[hclust(dist(x))$order, , drop=FALSE];
x;
};
x <- sortNES(nes, prms$geneset$heatmap$top$overall, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
dim(x)
head(x)
PlotColoredBlock(x, groups=NM, min=-3, max=3, key='Enrichment score');
sortNES <- function(x, top, ind, ord) {
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
if (ord == -1) x <- x[o, , drop=FALSE] else if (ord == 1) x <- x[rev(o), , drop=FALSE] else
x <- x[hclust(dist(x))$order, , drop=FALSE];
rownames(x) <- substr(rownames(x), 1, 200);
x;
};
x <- sortNES(nes, prms$geneset$heatmap$top$overall, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
PlotColoredBlock(x, groups=NM, min=-3, max=3, key='Enrichment score');
sortNES <- function(x, top, ind, ord) {
if (ind>=1 & ind <=ncol(x)) {
x <- x[rev(order(abs(x[, ind]))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(x[, ind]);
} else {
x <- x[rev(order(rowMeans(abs(x), na.rm=TRUE))), , drop=FALSE];
x <- x[1:min(nrow(x), top), , drop=FALSE];
o <- order(rowMeans(x, na.rm=TRUE));
}
if (ord == -1) x <- x[o, , drop=FALSE] else if (ord == 1) x <- x[rev(o), , drop=FALSE] else
x <- x[hclust(dist(x))$order, , drop=FALSE];
x;
};
rownames(nes) <- rownames(pvl) <- nms;
x <- y <- sortNES(nes, prms$geneset$heatmap$top$overall, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
rownames(y) <- substr(rownames(y), 1, 200);
PlotColoredBlock(y, groups=NM, min=-3, max=3, key='Enrichment score');
tbl <- tbl0[tbl0[, 2] %in% rownames(x), , drop=FALSE];
CreateDatatable(tbl, paste(path.tbl, 'gsea_top_mean.html', sep='/'), rownames = FALSE) -> x;
write.csv(tbl, paste(path.tbl, 'gsea_top_mean.csv', sep='/'), row.names = FALSE);
x <- apply(nes, 1, sd)
x <- rev(sort(x))[1:min(length(p0), prms$geneset$top)];
x <- nes[names(x), , drop=FALSE];
x <- y <- sortNES(x, prms$geneset$heatmap$top$overall, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
dim(x)
head(x)
x <- nes[rev(order(apply(nes, 1, sd))), , drop=FALSE];
head(x)
x <- nes[rev(order(apply(nes, 1, sd))), , drop=FALSE];
x <- x[1:min(length(p0), prms$geneset$heatmap$top$overall), , drop=FALSE];
dim(x)
head(x)
x <- nes[rev(order(apply(nes, 1, sd))), , drop=FALSE];
x <- x[1:min(length(p0), prms$geneset$heatmap$top$overall), , drop=FALSE];
x <- y <- sortNES(x, prms$geneset$heatmap$top$overall, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
dim(x)
head(x)
rownames(y) <- substr(rownames(y), 1, 200);
PlotColoredBlock(y, groups=NM, min=-3, max=3, key='Enrichment score');
ind
args(sortNES)
nm
t <- tbl0[c==nm, -1, drop=FALSE];
s <- nes[c==nm, , drop=FALSE];
fn1 <- paste('collection_', nm, '.html', sep='');
CreateDatatable(t, paste(path.tbl, fn1, sep='/'), rownames = FALSE);
ind <- prms$geneset$collection$comparison;
top <- prms$geneset$collection$top;
x <- sortNES(t, prms$geneset$heatmap$top$collection, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
dim(t)
head(t)
x <- sortNES(s, prms$geneset$heatmap$top$collection, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
dim(x)
x
c <- as.vector(tbl0[, 1]);
coll <- lapply(sort(unique(c)), function(nm) {
t <- tbl0[c==nm, -1, drop=FALSE];
s <- nes[c==nm, , drop=FALSE];
fn1 <- paste('collection_', nm, '.html', sep='');
CreateDatatable(t, paste(path.tbl, fn1, sep='/'), rownames = FALSE);
x <- sortNES(s, prms$geneset$heatmap$top$collection, prms$geneset$heatmap$sort$comparison, prms$geneset$heatmap$sort$order);
rownames(x) <- substr(rownames(x), 1, 200);
sz <- CalculateColoredBlockSize(x);
fn2 <- paste('collection_', nm, '.png', sep='');
png(paste(path.fig, fn2, sep='/'), w=sz[1], h=sz[2], units='in', res=150);
PlotColoredBlock(x, min=-3, max=3, num.breaks = 63, key='Enrichment score', groups=colnames(nes));
dev.off();
pdf(paste(path.fig, sub('.png$', '.pdf', fn2), sep='/'), w=sz[1], h=sz[2]);
PlotColoredBlock(x, min=-3, max=3, num.breaks = 63, key='Enrichment score', groups=colnames(nes));
dev.off();
list(nrow(t), fn1, fn2);
});
coll
coll[[1]]
sapply(coll, function(x) x[[1]])
table(tbl0[, 1])
x <- do.call('rbind', coll);
dim(x)
head(x)
names(coll)
a <- sort(unique(c));
a
names(coll) <- a;
x
x[1, ]
x
x[1,1]
x <- sapply(coll, function(x) x[[1]]);
y <- sapply(coll, function(x) x[[2]]);
z <- sapply(coll, function(x) x[[3]]);
x
y
z
y
z
l <- paste('  - [', a, '](figure/', z, ')', sep='');
l
l <- paste('  - [', a, '](figure/', z, '): [', x, ' gene sets](', y, ')', sep='');
l
lns <- paste(l, collapse='\n');
lns
dir()
CreateReport('meta_analysis.yaml')
min(pvl)
args(heatmap)
prms$geneset$heatmap
prms$geneset$heatmap$top$overall
prms$geneset$heatmap$sort$comparison
prms$geneset$heatmap$sort$order
prms$geneset$heatmap$sort$comparison
CreateReport('meta_analysis.yaml')
CreateReport('meta_analysis.yaml')
gid <- lapply(stat, rownames);
if (prms$gene$union) gid <- Reduce('union', gid) else gid <- Reduce('intersect', gid);
# Combined annotation
cnm  <- Reduce('intersect', lapply(anno, colnames));
anno <- lapply(anno, function(anno) anno[, cnm, drop=FALSE]);
ids  <- unlist(lapply(anno, rownames), use.names=FALSE);
anno <- Reduce('rbind', anno);
dup  <- duplicated(ids);
anno <- anno[!dup, , drop=FALSE];
rownames(anno) <- ids[!dup];
anno <- anno[gid, , drop=FALSE];
rownames(anno) <- gid;
# Combine p values
pvl <- lapply(de, function(de) {
p <- de$results$stat[, 'Pvalue'];
m <- min(p[!is.na(p) & p>0]);
p[p==0 & !is.na(p)] <- m;
names(p) <- rownames(de$results$stat);
p;
});
pvl <- sapply(pvl, function(x) x[gid]);
# Combine log2 fold change
l2r <- lapply(de, function(de) {
l <- de$results$stat[, 'LogFC'];
names(l) <- rownames(de$results$stat);
l;
});
l2r <- sapply(l2r, function(x) x[gid]);
n  <- apply(pvl, 1, function(x) length(x[!is.na(x)]));
sq <- -2*rowSums(log(pvl), na.rm=TRUE);
p0 <- exp(log(10)*pchisq(sq, df=2*n, lower.tail = FALSE, log.p = TRUE));
p1 <- apply(pvl, 1, function(x) max(x, na.rm=TRUE));
l0 <- rowMeans(abs(l2r), na.rm=TRUE);
l1 <- apply(l2r, 1, function(x) min(abs(x), na.rm=TRUE));
# Rank genes
x <- pvl;
y <- l2r;
x[is.na(x)] <- 1;
y[is.na(y)] <- 0;
if (prms$gene$rank == 'fc') rnk <- y else
if (prms$gene$rank == 'p') rnk <- -sign(y)*log10(x) else
rnk <- sign(y)*sqrt(abs(sign(y)*log10(x)));
# Prepare table
meta <- cbind(N_Comp=n, Pval_Max=p1, Pval_Meta=p0, Abs_LogFC_Min=l1, Abs_LogFC_Avg=l0);
temp <- cbind(l2r, pvl)[, as.vector(rbind(1:N, N+(1:N)))];
colnames(temp) <- paste(rep(NM, 2), rep(c('Log2FC', 'Pval'), N), sep='_');
# Write out table
tbl <- tbl0 <- cbind(anno, meta, temp);
CreateDatatable(tbl[order(tbl[, 'Pval_Meta']), , drop=FALSE], paste(path.tbl, 'gene_stat_all.html', sep='/'));
for (i in 1:ncol(anno)) tbl[, i] <- CleanHtmlTags(anno[, i], remove.empty = FALSE);
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
x <- rev(sort(rowMeans(abs(rnk))))[1:min(length(p0), prms$gene$top)];
x <- rnk[names(x), , drop=FALSE];
x <- x[hclust(dist(x))$order, , drop=FALSE];
y <- round(max(abs(x), na.rm=TRUE), 1);
PlotColoredBlock(x, groups=NM, min=-y, max=y, key='Differential expression');
dim(x)
CalculateColoredBlockSize(x)
out.width=paste(min(6, 0.5*N+2), '00px', sep='')
paste(min(6, 0.5*N+2), '00px', sep='')
max(4, 0.5*(N+1))
paste(100*min(6, 0.5*N+2), 'px', sep='')
CreateReport('meta_analysis.yaml')
CreateReport('meta_analysis.yaml')
library(RoCA)
CreateReport('meta_analysis.yaml')
library(RoCA)
CreateReport('meta_analysis.yaml')
dir()
library(yaml)
yml <- yaml.load_file('meta_analysis.yaml')
x <- yml$input
a <- names(x)
b <- sapply(x, function(x) x[[1]])
c <- sapply(x, function(x) x[[2]])
b
c
c <- unlist(c)
c
a
b
b <- as.vector(b)
b
x <- cbind(a, b)
x
write.csv(x, 'comparison.csv', row.names = FALSE, col.names = FALSE, sep='\t', qu=F)
args(write.csv)
?write.csv
write.table(x, 'comparison.csv', row.names = FALSE, col.names = FALSE, sep='\t', qu=F)
ls()
rm(list=ls())
name.yaml <- 'meta_analysis.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots', 'RoCA', 'DEGandMore', 'rchive');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
knitr::opts_chunk$set(eval=TRUE, dpi=300, fig.pos="H", fig.width=8, fig.height=6, echo=FALSE, warning=FALSE, message=FALSE, fig.path='FIGURE/');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input));
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
comp
yml$input$comparison <- 'comparison.txt'
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
comp
comp[[1]]
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
NM <- comp[[1]];
N  <- length(NM);
c <- as.vector(comp[, 2]);
names(c) <- as.vector(comp[, 1]);
c
nm <- names(c)[1]
nm
f <- c[[nm]];
f
f <- c[nm];
f
f <- c[[nm]];
f
fn <- DownloadFile(f, path.input);
fn
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
NM <- comp[[1]];
N  <- length(NM);
c <- as.vector(comp[, 2]);
names(c) <- as.vector(comp[, 1]);
res <- lapply(names(c), function(nm) {
f <- c[[nm]];
if (dir.exists(f)) {
res <- ImportR(paste(f, 'R', 'result.rds', sep='/'));
} else {
fn <- DownloadFile(f, path.input);
res <- ImportR(fn);
};
saveRDS(res, paste(path.input, paste('result_', nm, '.rds', sep=''), sep='/'));
res;
});
length(res)
names(res)
paste('[', tbl[, 1], '](', as.vector(comp[, 3]), ')', sep='');
# Loading results from pairwsie DEG analysis
# yml$input <- lapply(yml$input, function(c) {
#   if (is.list(c)) c else {
#     if (is.character(c) & dir.exists(c[1]))
#       list(result=paste(c, 'R/result.rds', sep='/'), index=paste(c, 'index.html', sep='/')) else
#         stop('Error: comparison results not found\n');
#   }
# });
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
NM <- comp[[1]];
N  <- length(NM);
c <- as.vector(comp[, 2]);
names(c) <- as.vector(comp[, 1]);
res <- lapply(names(c), function(nm) {
f <- c[[nm]];
if (dir.exists(f)) {
res <- ImportR(paste(f, 'R', 'result.rds', sep='/'));
} else {
fn <- DownloadFile(f, path.input);
res <- ImportR(fn);
};
saveRDS(res, paste(path.input, paste('result_', nm, '.rds', sep=''), sep='/'));
res;
});
expr <- lapply(res, function(res) res$inputs$expr);
anno <- lapply(res, function(res) res$inputs$anno);
comp <- lapply(res, function(res) res$inputs$comparison);
de   <- lapply(res, function(res) res$de);
ora  <- lapply(res, function(res) res$ora);
gsea <- lapply(res, function(res) res$gsea);
stat <- lapply(de, function(de) de$results$stat);
deg  <- lapply(de, function(de) de$DEG);
names(res) <- names(expr) <- names(anno) <- names(comp) <- names(de) <- NM;
names(ora) <- names(gsea) <- names(stat) <- names(deg) <- NM;
nms <- sapply(comp, names);
szs <- sapply(comp, function(c) sapply(c, length));
gns <- sapply(expr, nrow);
mtd <- sub('^De', '', sapply(de, function(de) de$method));
prd <- sapply(de, function(de) de$parameter$paired);
nds <- sapply(deg, function(x) sapply(x, nrow));
tbl <- data.frame(Name=names(comp), Group1=nms[1, ], Group2=nms[2, ], Num1=szs[1,], Num2=szs[2,], Num_Gene=sapply(expr, nrow),
Test=mtd, Paired=prd, DEG_Higher=nds[1, ], DEG_Lower=nds[2, ], stringsAsFactors = FALSE);
if (ncol(comp) >=3) tbl[, 1] <- paste('[', tbl[, 1], '](', as.vector(comp[, 3]), ')', sep='');
dim(comp)
comp
yml$input$comparison
ImportTable('comparison.txt')
ImportTable('comparison.txt', rownames = F, colnames = F)
comp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
comp
if (ncol(cp) >=3) tbl[, 1] <- paste('[', tbl[, 1], '](', as.vector(cp[, 3]), ')', sep='');
cp <- ImportTable(DownloadFile(yml$input$comparison, path.input), rownames = FALSE, colnames = FALSE);
if (ncol(cp) >=3) tbl[, 1] <- paste('[', tbl[, 1], '](', as.vector(cp[, 3]), ')', sep='');
tbl
paste('[', tbl[, 1], '](', as.vector(cp[, 3]), ')', sep='');
cp[, 3] <- 'index.html'
if (ncol(cp) >=3) tbl[, 1] <- paste('[', tbl[, 1], '](', as.vector(cp[, 3]), ')', sep='');
tbl
?data.frame
