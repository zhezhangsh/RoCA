home.url <- Link2Home(yml$home);
fns <- sapply(1:10, function(i) {
rnm <- rownames(ct1)[rnk>=num[i]];
writeLines(rnm, paste0(yml$output, '/table/removed_step_', i, '.txt'));
});
tbl <- round(sfs, 3);
colnames(tbl) <- paste0('[Step', 0:10, '](', 'table/removed_step_', 0:10, '.txt)');
colnames(tbl)[1] <- 'Original';
kable(tbl) %>% kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE)
require(RoCA)
CreateReport('normalize_deseq2.yaml')
dir()
CreateReport('normalize_deseq2.yaml')
fns <- sapply(1:10, function(i) {
rnm <- rownames(ct1)[rnk<=num[i]];
writeLines(rnm, paste0(yml$output, '/table/removed_step_', i, '.txt'));
});
tbl <- round(sfs, 3);
colnames(tbl) <- paste0('[Step', 0:10, '](', 'table/removed_step_', 0:10, '.txt)');
colnames(tbl)[1] <- 'Original';
kable(tbl) %>% kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE)
CreateReport('normalize_deseq2.yaml')
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
s1
s2
smm
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
ct1[, 4] <- ct1[, 4]*10
dds <- DESeqDataSetFromMatrix(ct1, DataFrame(f=rep(1, ncol(ct1))), ~1);
dds <- estimateSizeFactors(dds);
ct2 <- counts(dds, normalized=TRUE);
szf <- sizeFactors(dds);
tt1 <- round(colSums(ct1), 2);
tt2 <- round(colSums(ct2), 2);
mn1 <- round(colMeans(ct1), 2);
mn2 <- round(colMeans(ct2), 2);
md1 <- round(apply(ct1, 2, median), 2);
md2 <- round(apply(ct2, 2, median), 2);
sd1 <- round(apply(log2(ct1+1), 2, sd), 2);
sd2 <- round(apply(log2(ct2+1), 2, sd), 2);
smm <- cbind(tt1, tt2, mn1, mn2, md1, md2, sd1, sd2, round(szf, 3));
colnames(smm) <- c(paste(rep(c('Total', 'Mean', 'Median', 'Variance'), each=2),
rep(c('B', 'A'), 4), sep='_'), 'Size_Factor');
kable(smm) %>% kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE)
par(mfrow=c(1, 2), mar=c(4,4,2,2));
plot(smm[, 'Mean_B'], smm[, 'Size_Factor'], pch='*', col='darkblue', cex=2,
xlab='Mean read count', ylab='Size factor');
plot(smm[, 'Median_B'], smm[, 'Size_Factor'], pch='*', col='darkblue', cex=2,
xlab='Median read count', ylab='Size factor');
yml$parameter$top <- round(yml$parameter$top, 2);
top <- min(0.25, max(0.01, yml$parameter$top));
num <- ceiling(seq(1, ceiling(top*nrow(ct1)), length.out=10));
rnk <- rank(-rowSums(ct1));
sfs <- sapply(num, function(n) {
ct3 <- ct1[rnk>=n, , drop=FALSE];
ds0 <- DESeqDataSetFromMatrix(ct3, DataFrame(f=rep(1, ncol(ct3))), ~1);
ds0 <- estimateSizeFactors(ds0);
sizeFactors(ds0);
});
sfs <- cbind(szf, sfs);
yml$parameter$top <- round(yml$parameter$top, 2);
top <- min(0.25, max(0.01, yml$parameter$top));
num <- ceiling(seq(1, ceiling(top*nrow(ct1)), length.out=10));
rnk <- rank(-rowSums(ct1));
sfs <- sapply(num, function(n) {
ct3 <- ct1[rnk>=n, , drop=FALSE];
ds0 <- DESeqDataSetFromMatrix(ct3, DataFrame(f=rep(1, ncol(ct3))), ~1);
ds0 <- estimateSizeFactors(ds0);
sizeFactors(ds0);
});
sfs <- cbind(szf, sfs);
fns <- sapply(1:10, function(i) {
rnm <- rownames(ct1)[rnk<=num[i]];
writeLines(rnm, paste0(yml$output, '/table/removed_step_', i, '.txt'));
});
tbl <- round(sfs, 3);
colnames(tbl) <- paste0('[Step', 0:10, '](', 'table/removed_step_', 0:10, '.txt)');
colnames(tbl)[1] <- 'Original';
kable(tbl) %>% kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE)
par(mar=c(5,5,2,2));
plot(1, type='n', ylim=c(min(sfs), max(sfs)), xlim=c(0, 12), axes=FALSE, cex.lab=1.5, log='y',
ylab='Size factor', xlab='Top variables removed (%)                    ');
pch <- rep(1:15, ceiling(nrow(sfs)/15))[1:nrow(sfs)];
col <- topo.colors(nrow(sfs));
for (i in 1:nrow(sfs)) {
lines(0:10, sfs[i, ], col=col[i], lwd=2);
points(0:10, sfs[i, ], pch=pch[i], cex=0.8);
};
text(rep(10, nrow(sfs)), sfs[, ncol(sfs)], pos=4, rownames(sfs), cex=1.2);
axis(2);
axis(1, at=c(0:10), label=(0:10)/100/yml$parameter$top);
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(0, 1);
abline(0, 10);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(0, 1);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(0, 1);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(0, log2(10));
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(1, 1);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
colMeans(ct1)
ct1[, 4] <- ct1[, 4]/5
ct1[, 2] <- 1.5 * ct1[, 2]
ct1[, 3] <- 1.25 * ct1[, 3]
saveRDS(ct1, 'count.rds')
name.yaml <- 'normalize_deseq2.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'DESeq2', 'RoCA', 'awsomics');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table', 'path.deg'='deg');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
ct1 <- ImportTable(DownloadFile(yml$input$count, path.input));
dds <- DESeqDataSetFromMatrix(ct1, DataFrame(f=rep(1, ncol(ct1))), ~1);
ct1 <- round(ct1)
saveRDS(ct1, 'count.rds')
name.yaml <- 'normalize_deseq2.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots',
'colorspace', 'DESeq2', 'RoCA', 'awsomics');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table', 'path.deg'='deg');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path='figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
ct1 <- ImportTable(DownloadFile(yml$input$count, path.input));
dds <- DESeqDataSetFromMatrix(ct1, DataFrame(f=rep(1, ncol(ct1))), ~1);
dds <- estimateSizeFactors(dds);
ct2 <- counts(dds, normalized=TRUE);
szf <- sizeFactors(dds);
tt1 <- round(colSums(ct1), 2);
tt2 <- round(colSums(ct2), 2);
mn1 <- round(colMeans(ct1), 2);
mn2 <- round(colMeans(ct2), 2);
md1 <- round(apply(ct1, 2, median), 2);
md2 <- round(apply(ct2, 2, median), 2);
sd1 <- round(apply(log2(ct1+1), 2, sd), 2);
sd2 <- round(apply(log2(ct2+1), 2, sd), 2);
smm <- cbind(tt1, tt2, mn1, mn2, md1, md2, sd1, sd2, round(szf, 3));
colnames(smm) <- c(paste(rep(c('Total', 'Mean', 'Median', 'Variance'), each=2),
rep(c('B', 'A'), 4), sep='_'), 'Size_Factor');
kable(smm) %>% kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE)
par(mfrow=c(1, 2), mar=c(4,4,2,2));
plot(smm[, 'Mean_B'], smm[, 'Size_Factor'], pch='*', col='darkblue', cex=2,
xlab='Mean read count', ylab='Size factor');
plot(smm[, 'Median_B'], smm[, 'Size_Factor'], pch='*', col='darkblue', cex=2,
xlab='Median read count', ylab='Size factor');
yml$parameter$top <- round(yml$parameter$top, 2);
top <- min(0.25, max(0.01, yml$parameter$top));
num <- ceiling(seq(1, ceiling(top*nrow(ct1)), length.out=10));
rnk <- rank(-rowSums(ct1));
sfs <- sapply(num, function(n) {
ct3 <- ct1[rnk>=n, , drop=FALSE];
ds0 <- DESeqDataSetFromMatrix(ct3, DataFrame(f=rep(1, ncol(ct3))), ~1);
ds0 <- estimateSizeFactors(ds0);
sizeFactors(ds0);
});
sfs <- cbind(szf, sfs);
fns <- sapply(1:10, function(i) {
rnm <- rownames(ct1)[rnk<=num[i]];
writeLines(rnm, paste0(yml$output, '/table/removed_step_', i, '.txt'));
});
tbl <- round(sfs, 3);
colnames(tbl) <- paste0('[Step', 0:10, '](', 'table/removed_step_', 0:10, '.txt)');
colnames(tbl)[1] <- 'Original';
kable(tbl) %>% kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=FALSE)
par(mar=c(5,5,2,2));
plot(1, type='n', ylim=c(min(sfs), max(sfs)), xlim=c(0, 12), axes=FALSE, cex.lab=1.5, log='y',
ylab='Size factor', xlab='Top variables removed (%)                    ');
pch <- rep(1:15, ceiling(nrow(sfs)/15))[1:nrow(sfs)];
col <- topo.colors(nrow(sfs));
for (i in 1:nrow(sfs)) {
lines(0:10, sfs[i, ], col=col[i], lwd=2);
points(0:10, sfs[i, ], pch=pch[i], cex=0.8);
};
text(rep(10, nrow(sfs)), sfs[, ncol(sfs)], pos=4, rownames(sfs), cex=1.2);
axis(2);
axis(1, at=c(0:10), label=(0:10)/100/yml$parameter$top);
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(1, 1);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
sessionInfo();
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(1, 1);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
szf
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(log10(szf[s2]/szf[s1]), 1);
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1);
s1 <- rownames(smm)[which(smm[, 1]==min(smm[, 1]))[1]];
s2 <- rownames(smm)[which(smm[, 1]==max(smm[, 1]))[1]];
par(mfrow=c(1, 2), mar=c(4,4,2,2));
PlotLogScatter(ct1[, s1], ct1[, s2], xlab = s1, ylab = s2, main = 'Before normalization');
abline(log10(szf[s2]/szf[s1]), 1);
abline(0, 1, lty=2, col='darkblue');
PlotLogScatter(ct2[, s1], ct2[, s2], xlab = s1, ylab = s2, main = 'After normalization');
abline(0, 1, lty=2, col='darkblue');
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, main='Before normalization');
boxplot(log2(ct1+1), las=3, col=col, main='After normalization');
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization');
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization');
plot(1:20, pch=1:20)
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization', pch=18);
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization', pch=18);
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization', pch=18);
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization', pch=18);
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization', pch=18, names.cex=0.5);
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization', pch=18);
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization', pch=18, names.cex=0.2);
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization', pch=18);
par(mfrow=c(1, 2), mar=c(5, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization', pch=18, cex.lab=0.2);
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization', pch=18);
?boxplot
par(mfrow=c(1, 2), mar=c(8, 4, 2, 2));
boxplot(log2(ct1+1), las=3, col=col, ylab='log2(count+1)', main='Before normalization', pch=18, boxwex=0.6);
boxplot(log2(ct2+1), las=3, col=col, ylab='log2(count+1)', main='After normalization', pch=18, boxwex=0.6);
plotDispEsts(dds)
plotDispEsts(dds)
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
par(mfrow=c(1, 2), mar=c(8, 4, 2, 2));
plot(rowMeans(log2(ct1+1)), sd1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(8, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))));
plot(rowMeans(log2(ct1+1)), sd1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
plot(rowMeans(log2(ct1+1)), sd1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
boxplot(sd1, sd2)
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
abline(lowess(mn1, sd1))
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
abline(lowess(mn1, sd1))
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
abline(loess(mn1, sd1))
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
abline(loess(sd1~mn1))
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(loess(sd1~mn1))
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd1~mn1))
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd1~mn1))
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd2~mn2))
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd1~mn1))
abline(h=1);
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd2~mn2))
abline(h=1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd1, mn1))
abline(h=1);
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd2~mn2))
abline(h=1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn1, sd1))
abline(h=1);
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(sd2~mn2))
abline(h=1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn1, sd1))
abline(h=1);
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn2, sd2))
abline(h=1);
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn1, sd1))
abline(h=mean(sd1));
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn2, sd2))
abline(h=mean(sd2));
sd1 <- apply(log2(ct1+1), 1, sd);
sd2 <- apply(log2(ct2+1), 1, sd);
mn1 <- rowMeans(log2(ct1+1));
mn2 <- rowMeans(log2(ct2+1));
par(mfrow=c(1, 2), mar=c(4, 4, 2, 2));
plot(mn1, sd1, pch=19, cex=0.5, col='#88888888', main='Before normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn1, sd1), lty=2, col='darkblue');
# abline(h=mean(sd1));
plot(mn2, sd2, pch=19, cex=0.5, col='#88888888', main='After normalization', xlim=c(0, max(c(mn1, mn2))), ylim=c(0, max(c(sd1, sd2))),
xlab='Average of log2(count+1)', ylab='Between-sample variance');
lines(lowess(mn2, sd2), lty=2, col='darkblue');
# abline(h=mean(sd2));
write.csv(ct1, paste0(yml$output, '/table/count_before.csv'));
CreateReport('normalize_deseq2.yaml')
