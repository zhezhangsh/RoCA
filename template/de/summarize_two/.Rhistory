dim(smpl)
grps
c
name.yaml <- 'summarize_two_v2.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots', 'RoCA', 'awsomics', 'rchive', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure',
'path.tbl'='table', 'path.deg'='deg');
knitr::opts_chunk$set(eval=TRUE, dpi=300, fig.pos="H", fig.width=8, fig.height=6, echo=FALSE, warning=FALSE, message=FALSE, fig.path='FIGURE/');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
yml
names(yml)
names(yml$input)
rm(list=ls())
name.yaml <- 'summarize_two_v2.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots', 'RoCA', 'awsomics', 'rchive', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure',
'path.tbl'='table', 'path.deg'='deg');
knitr::opts_chunk$set(eval=TRUE, dpi=300, fig.pos="H", fig.width=8, fig.height=6, echo=FALSE, warning=FALSE, message=FALSE, fig.path='FIGURE/');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
file.exists(name.yaml)
name.yaml
d <- expr.all;
name.yaml <- 'summarize_two_v2.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'MASS', 'gplots', 'RoCA', 'awsomics', 'rchive', 'DEGandMore');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure',
'path.tbl'='table', 'path.deg'='deg');
knitr::opts_chunk$set(eval=TRUE, dpi=300, fig.pos="H", fig.width=8, fig.height=6, echo=FALSE, warning=FALSE, message=FALSE, fig.path='FIGURE/');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
# Load gene sets
gset <- ImportR(DownloadFile(yml$input$geneset, path.input));
# Load results from individual comparisons
c <- yml$input$comparison;
res <- lapply(names(c), function(nm) {
f <- c[[nm]];
if (dir.exists(f)) {
res <- ImportR(paste(f, 'R', 'result.rds', sep='/'));
} else {
fn <- DownloadFile(f, path.input);
res <- ImportR(fn);
};
saveRDS(res, paste(path.input, paste('result_', nm, '.rds', sep=''), sep='/'));
res;
});
comp <- names(c);
# Prepare sample grouping (very awkward code)
grps <- lapply(res, function(res) res$input$comparison);
smpl <- data.frame(ID = as.vector(unlist(grps)),
rep(comp, sapply(grps, function(g) length(unlist(g)))),
unlist(lapply(grps, function(g) rep(names(g), sapply(g, length)))), stringsAsFactors = FALSE)
colnames(smpl)[-1] <- c(prms$name$meta[1], prms$name$group[1]);
CreateDatatable(smpl, paste(path.tbl, 'sample.html', sep='/'), rownames = FALSE);
grp <- lapply(res, function(res) names(res$inputs$comparison));
smp <- lapply(res, function(x) x$inputs$comparison);
names(res) <- names(grp) <- names(smp) <- names(c);
invisible(
sapply(names(res), function(nm) saveRDS(res[[nm]], paste(path.input, paste('result_', nm, '.rds', sep=''), sep='/')))
);
grps <- do.call('c', lapply(res, function(res) res$inputs$comparison));
smps <- lapply(comp, function(c) {
s <- smpl[smpl[, 2]==c, ];
rownames(s) <- s[, 1];
s[unlist(smp[[c]]), ];
});
smpl <- rbind(smps[[1]], smps[[2]]);
rownames(smpl) <- 1:nrow(smpl);
s0 <- setdiff(unlist(smp), smpl$ID);
if (length(s0) > 0) stop('Error: missing metadata of sample(s): ', paste(s0, collapse='; '), '\n');
# comparison results
de <- lapply(res, function(res) res$de);
ora <- lapply(res, function(res) res$ora);
gsea <- lapply(res, function(res) res$gsea);
# Combined matrix
expr.all <- lapply(res, function(res) res$inputs$expr[, c(res$inputs$comparison[[1]], res$inputs$comparison[[2]])]);
g <- Reduce('intersect', lapply(expr.all, rownames));
expr.all <- lapply(expr.all, function(e) e[g, ]);
expr.all <- cbind(expr.all[[1]], expr.all[[2]]);
nms <- sapply(res, function(res) names(res$inputs$comparison));
szs <- sapply(res, function(res) sapply(res$inputs$comparison, length));
gns <- sapply(res, function(res) nrow(res$inputs$expr));
mtd <- sub('^De', '', sapply(de, function(de) de$method));
prd <- sapply(de, function(de) de$parameter$paired);
nds <- sapply(de, function(de) sapply(de$DEG, nrow));
tbl <- data.frame(Name=comp, Group1=nms[1, ], Group2=nms[2, ], Num1=szs[1,], Num2=szs[2,], Num_Gene=gns,
Test=mtd, Paired=prd, DEG_Higher=nds[1, ], DEG_Lower=nds[2, ], stringsAsFactors = FALSE);
# Index page of individual comparisons
pind <- prms$index;
pind[pind==''] <- NA;
if (length(pind[!is.na(pind)])>0) {
i <- which(!is.na(pind));
l <- as.vector(sapply(pind[i], function(path) ConvertPath2Relative(path, yml$output)));
tbl[i, 1] <- paste('[', tbl[, 1], '](', l, ')', sep='');
}
# Get gene level annotation and analysis results from both comparisons
de   <- lapply(res, function(res) res$de);
stat <- lapply(de, function(de) de$result$stat);
deg  <- lapply(de, function(de) de$DEG);
anno <- lapply(res, function(res) res$input$anno);
gid  <- lapply(stat, rownames);
if (setequal(rownames(stat[[1]]), rownames(stat[[2]]))) gid <- rownames(stat[[1]]) else {
if (prms$gene$union) gid <- Reduce('union', lapply(stat, rownames)) else
gid <- Reduce('intersect', lapply(stat, rownames))
}
anno[[2]] <- anno[[2]][!(rownames(anno[[2]]) %in% rownames(anno[[1]])), , drop=FALSE];
anno <- rbind(anno[[1]], anno[[2]])[gid, , drop=FALSE];
names(stat) <- names(de) <- comp;
l2r <- sapply(stat, function(stat) as.matrix(stat)[, 'LogFC'][gid]);
pvl <- sapply(stat, function(stat) as.matrix(stat)[, 'Pvalue'][gid]);
fdr <- sapply(stat, function(stat) as.matrix(stat)[, 'FDR'][gid]);
l2r[is.na(l2r)] <- 0;
pvl[is.na(pvl)] <- 1;
fdr[is.na(fdr)] <- 1;
rnk <- apply(-sign(l2r)*log10(pvl), 2, rank);
rownames(l2r) <- rownames(pvl) <- rownames(fdr) <- rownames(rnk) <- gid;
corr <- round(cor(l2r[, 1], l2r[, 2]), 3);
p0 <- prms$gene$pvalue;
tbl <- lapply(stat, function(s) s[, c(1,2,4,5,6)]);
tbl  <- lapply(tbl, function(s) {
x <- matrix(0, nr=length(gid), nc=5, dimnames = list(gid, colnames(s)));
x[, 4:5] <- 1;
x[rownames(s), ] <- as.matrix(s);
x;
});
cnm <- lapply(tbl, colnames);
tbl <- do.call('cbind', tbl);
rownames(tbl) <- gid;
tbl <- cbind(anno[rownames(tbl), ], tbl);
colnames(tbl)[ncol(anno)+c(1:10)] <- paste(rep(names(grp), each=5), unlist(cnm), sep=', ');
for (i in 1:ncol(anno)) tbl[, i] <- CleanHtmlTags(tbl[, i], FALSE);
tbl0 <- tbl;
write.csv(tbl0, paste(path.tbl, 'gene_stat.csv', sep='/'));
saveRDS(tbl0, paste(path.r, 'gene_stat.rds', sep='/'));
tbl <- cbind(ID=rownames(tbl));
tbl[, 1] <- AddHref(tbl[, 1], UrlEntrezGene(rownames(tbl)));
CreateDatatable(FormatNumeric(tbl), rownames = FALSE, paste(path.tbl, 'gene_table.html', sep='/'),
caption='Gene-level differential expression of both pairwise comparisons')->fn;
corr <- round(cor(l2r[, 1], l2r[, 2], use='pair'), 4);
lns  <- paste('  - Corr(', comp[1], ':', comp[2], ') = ', corr, sep='');
lns  <- paste(lns, collapse='\n');
par(mar=c(5,5,2,2));
labs <- sapply(names(grp), function(nm) paste(nm, paste(grp[[nm]], collapse=' vs.'), sep=', '));
rng  <- range(l2r);
d <- Reduce('intersect', lapply(stat, function(s) rownames(s)[s[, 5]<=p0]));
plot(l2r[!(rownames(l2r) %in% d), , drop=FALSE], cex=0.6, col='#88888888', pch=19,
xlim=rng, ylim=rng, xlab=labs[1], ylab=labs[2], cex.lab=1.25);
abline(h=0, v=0, lty=2);
legend('topleft', bty='n', pch=19, col='#FF222288', legend=paste('DEG, p<', p0, sep=''));
# d <- Reduce('intersect', lapply(deg, function(deg) unlist(lapply(deg, rownames))));
points(l2r[d, , drop=FALSE], cex=0.9, col='#FF222288', pch=19);
deg.n <- t(sapply(deg, function(deg) sapply(deg, nrow)));
colnames(deg.n) <- paste(comp, c('G2 > G1', 'G2 < G1'), sep='::');
n0 <- sapply(stat, nrow);
n1 <- apply(pvl, 2, function(x) length(x[!is.na(x) & x<= prms$gene$pvalue]));
deg.n <- cbind(n0, n1, deg.n);
colnames(deg.n)[1:2] <- c('Total_gene', paste('P <', prms$gene$pvalue));
deg1 <- lapply(deg[[1]], rownames);
deg2 <- lapply(deg[[2]], rownames);
ind  <- cbind(c(1, 1, 2, 2), c(1, 2, 1, 2));
rownames(ind)<-c('up-up', 'up-down', 'down-up', 'down-down');
par(mfrow=c(2,2));
apply(ind, 1, function(i)
PlotVenn(deg1[[i[1]]], deg2[[i[2]]],
paste(names(grp), c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), gid))->vnn;
ol <- sapply(rownames(ind), function(nm) {
i <- ind[nm, ];
g <- intersect(deg1[[i[1]]], deg2[[i[2]]]);
f <- paste('DEG/', 'gene_', nm, '.html', sep='');
t <- tbl[g, , drop=FALSE];
c <- paste(paste(comp, c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), collapse=' and ')
fn <- CreateDatatable(t, paste(path, f, sep='/'), caption=c);
list(c, f);
});
ind
nm
rownames(ind)[1]->nm
i <- ind[nm, ];
g <- intersect(deg1[[i[1]]], deg2[[i[2]]]);
f <- paste('DEG/', 'gene_', nm, '.html', sep='');
t <- tbl[g, , drop=FALSE];
g
dim(tbl)
head(tbl)
tbl <- cbind(ID=rownames(tbl), tbl);
tbl[, 1] <- AddHref(tbl[, 1], UrlEntrezGene(rownames(tbl)));
ol <- sapply(rownames(ind), function(nm) {
i <- ind[nm, ];
g <- intersect(deg1[[i[1]]], deg2[[i[2]]]);
f <- paste('DEG/', 'gene_', nm, '.html', sep='');
t <- tbl[g, , drop=FALSE];
c <- paste(paste(comp, c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), collapse=' and ')
fn <- CreateDatatable(t, paste(path, f, sep='/'), caption=c);
list(c, f);
});
ol <- sapply(rownames(ind), function(nm) {
i <- ind[nm, ];
g <- intersect(deg1[[i[1]]], deg2[[i[2]]]);
f <- paste('DEG/', 'gene_', nm, '.html', sep='');
t <- tbl0[g, , drop=FALSE];
c <- paste(paste(comp, c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), collapse=' and ')
fn <- CreateDatatable(t, paste(path, f, sep='/'), caption=c);
list(c, f);
});
ol[[1]][1:2, ]
length(ol)
dim(ol[[1]])
str(ol)
dim(ol)
ol
deg1 <- lapply(deg[[1]], rownames);
deg2 <- lapply(deg[[2]], rownames);
ind  <- cbind(c(1, 1, 2, 2), c(1, 2, 1, 2));
rownames(ind)<-c('up-up', 'up-down', 'down-up', 'down-down');
par(mfrow=c(2,2));
apply(ind, 1, function(i)
PlotVenn(deg1[[i[1]]], deg2[[i[2]]],
paste(names(grp), c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), gid))->vnn;
ol <- sapply(rownames(ind), function(nm) {
i <- ind[nm, ];
g <- intersect(deg1[[i[1]]], deg2[[i[2]]]);
f <- paste('DEG/', 'gene_', nm, '.html', sep='');
t <- tbl0[g, , drop=FALSE];
c <- paste(paste(comp, c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), collapse=' and ')
fn <- CreateDatatable(t, paste(path, f, sep='/'), caption=c);
list(c, f);
});
lns <- paste('  - [', ol[1, ], ']', sep='');
lns <- paste(lns, '(', ol[2, ], ')', sep='');
lns <- paste(lns, collapse='\n');
d <- expr.all;
# Prepare for ANOVA
s<-smpl[colnames(d), ]
for (i in 1:ncol(s)) s[[i]]<-as.factor(s[[i]]);
d <- expr.all;
# Prepare for ANOVA
s<-smpl[colnames(d), ]
for (i in 1:ncol(s)) s[[i]]<-as.factor(s[[i]]);
d <- expr.all;
# Prepare for ANOVA
s <- smpl[colnames(d), ]
for (i in 1:ncol(s)) s[[i]] <- as.factor(s[[i]]);
s$d <- d[1, ];
d0  <- d;
if (!prms$gene$processing$logged) d0 <- log2(d0+1);
if (!prms$gene$processing$normalized) d0 <- NormLoess(d0);
d.anova<-lapply(1:nrow(d0), function(i) d0[i, ]);
f <- formula(prms$gene$anova$formula);
dim(d)
prms$gene$anova$formula
smpl1
smpl
prms$gene$anova$interaction
d <- expr.all;
# Prepare for ANOVA
f1 <- as.factor(smpl[, 2]);
f2 <- as.factor(smpl[, 3]);
if (prms$gene$anova$interaction) f <- 'd ~ f1 * f2' else f <- 'd ~ f1 + f2';
f  <- formula(f);
s  <- smpl[colnames(d), ];
d0 <- d;
if (!prms$gene$processing$logged) d0 <- log2(d0+1);
if (!prms$gene$processing$normalized) d0 <- NormLoess(d0);
d.anova <- lapply(1:nrow(d0), function(i) d0[i, ]);
# Run ANOVA
paov <- parallel::mclapply(d.anova, function(x) {
s$d<-x;
smm<-summary(aov(f, data=s))[[1]];
if (length(smm)==1) smm[[1]] else smm;
}, mc.cores=prms$gene$anova$core);
dim(paov)
length(paov)
head(paov)
rownames(paov[[1]]);
cnm  <- rownames(paov[[1]]);
cnm  <- gsub(' ', '', cnm[-length(cnm)]);
cnm
# sort column names
cnm  <- rownames(paov[[1]]);
cnm  <- gsub(' ', '', cnm[-length(cnm)]);
cnm
prms$name$meta
if (prms$gene$anova$interaction) cnm0 <- c(cnm0, if (prms$gene$anova$interaction));
cnm0
cnm0 <- c(colnames(smpl)[-1], paste(prms$name$meta, prms$name$group, sep=':'));
if (prms$gene$anova$interaction) cnm0 <- c(cnm0, paste(cnm0, collapse=':'));
cnm0
cnm0 <- colnames(smpl)[-1];
if (prms$gene$anova$interaction) cnm0 <- c(cnm0, paste(cnm0, collapse=':'));
cnm0
paov <- t(sapply(paov, function(x) x[-nrow(x), 5]));
dimnames(paov) <- list(rownames(d), cnm0);
paov <- paov[order(paov[, 3]), ];
colnames(paov) <- paste('P', colnames(paov), sep='_');
sig.aov <- paov[paov[, 3]<=prms$gene$anova$p, , drop=FALSE];
dim(paov)
head(paov)
aov <- parallel::mclapply(d.anova, function(x) {
s$d<-x;
smm<-summary(aov(f, data=s))[[1]];
if (length(smm)==1) smm[[1]] else smm;
}, mc.cores=prms$gene$anova$core);
cnm  <- rownames(aov[[1]]);
cnm  <- gsub(' ', '', cnm[-length(cnm)]);
cnm0 <- colnames(smpl)[-1];
if (prms$gene$anova$interaction) cnm0 <- c(cnm0, paste(cnm0, collapse=':'));
dim(cnm0)
cnm0
# p value table
paov <- t(sapply(aov, function(x) x[-nrow(x), 5]));
dim(paov)
head(paov)
dimnames(paov) <- list(rownames(d), cnm0);
paov <- paov[order(paov[, 3]), ];
colnames(paov) <- paste('P', colnames(paov), sep='_');
head(paov)
sig.aov <- paov[paov[, 3]<=prms$gene$anova$p, , drop=FALSE];
dim(sig.aov)
d['641455', ]
f1
f2
aov(d['641455', ] ~ f1*f2)
summary(aov(d['641455', ] ~ f1*f2))
prms$gene$processing$logged
if (!prms$gene$processing$logged) d0 <- log2(d0+1);
if (!prms$gene$processing$normalized) d0 <- NormLoess(d0);
d <- expr.all;
# Prepare for ANOVA
f1 <- as.factor(smpl[, 2]);
f2 <- as.factor(smpl[, 3]);
if (prms$gene$anova$interaction) f <- 'd ~ f1 * f2' else f <- 'd ~ f1 + f2';
f  <- formula(f);
s  <- smpl[colnames(d), ];
d0 <- d;
if (!prms$gene$processing$logged) d0 <- log2(d0+1);
if (!prms$gene$processing$normalized) d0 <- NormLoess(d0);
d.anova <- lapply(1:nrow(d0), function(i) d0[i, ]);
# Run ANOVA
aov <- parallel::mclapply(d.anova, function(x) {
s$d<-x;
smm<-summary(aov(f, data=s))[[1]];
if (length(smm)==1) smm[[1]] else smm;
}, mc.cores=prms$gene$anova$core);
# sort column names
cnm  <- rownames(aov[[1]]);
cnm  <- gsub(' ', '', cnm[-length(cnm)]);
cnm0 <- colnames(smpl)[-1];
if (prms$gene$anova$interaction) cnm0 <- c(cnm0, paste(cnm0, collapse=':'));
# p value table
paov <- t(sapply(aov, function(x) x[-nrow(x), 5]));
dimnames(paov) <- list(rownames(d), cnm0);
paov <- paov[order(paov[, 3]), ];
colnames(paov) <- paste('P', colnames(paov), sep='_');
sig.aov <- paov[paov[, 3]<=prms$gene$anova$p, , drop=FALSE];
head(sig.aov)
d.anova[['641455']]
d0['641455', ]
summary(aov(d0['641455', ] ~ f1*f2))
f1
f2
summary(aov(d1['641455', ] ~ f1*f2))
summary(aov(d['641455', ] ~ f1*f2))
# full table
m <- sapply(grps, function(g) exp(log(2)*rowMeans(d0[, g, drop=FALSE])));
aov.stat <- cbind(m[rownames(paov), ], paov);
cnm <- c(colnames(anno), colnames(aov.stat));
aov.tbl <- data.frame(tbl[rownames(paov), colnames(anno)], FormatNumeric(aov.stat), stringsAsFactors = FALSE);
m
dim(m)
head(m)
aov.stat[1:2, ]
cnm <- c(colnames(anno), colnames(aov.stat));
cnm
dim(tbl)
head(tbl)
# Get gene level annotation and analysis results from both comparisons
de   <- lapply(res, function(res) res$de);
stat <- lapply(de, function(de) de$result$stat);
deg  <- lapply(de, function(de) de$DEG);
anno <- lapply(res, function(res) res$input$anno);
gid  <- lapply(stat, rownames);
if (setequal(rownames(stat[[1]]), rownames(stat[[2]]))) gid <- rownames(stat[[1]]) else {
if (prms$gene$union) gid <- Reduce('union', lapply(stat, rownames)) else
gid <- Reduce('intersect', lapply(stat, rownames))
}
anno[[2]] <- anno[[2]][!(rownames(anno[[2]]) %in% rownames(anno[[1]])), , drop=FALSE];
anno <- rbind(anno[[1]], anno[[2]])[gid, , drop=FALSE];
names(stat) <- names(de) <- comp;
l2r <- sapply(stat, function(stat) as.matrix(stat)[, 'LogFC'][gid]);
pvl <- sapply(stat, function(stat) as.matrix(stat)[, 'Pvalue'][gid]);
fdr <- sapply(stat, function(stat) as.matrix(stat)[, 'FDR'][gid]);
l2r[is.na(l2r)] <- 0;
pvl[is.na(pvl)] <- 1;
fdr[is.na(fdr)] <- 1;
rnk <- apply(-sign(l2r)*log10(pvl), 2, rank);
rownames(l2r) <- rownames(pvl) <- rownames(fdr) <- rownames(rnk) <- gid;
corr <- round(cor(l2r[, 1], l2r[, 2]), 3);
p0 <- prms$gene$pvalue;
tbl <- lapply(stat, function(s) s[, c(1,2,4,5,6)]);
tbl  <- lapply(tbl, function(s) {
x <- matrix(0, nr=length(gid), nc=5, dimnames = list(gid, colnames(s)));
x[, 4:5] <- 1;
x[rownames(s), ] <- as.matrix(s);
x;
});
cnm <- lapply(tbl, colnames);
tbl <- do.call('cbind', tbl);
rownames(tbl) <- gid;
tbl <- cbind(anno[rownames(tbl), ], tbl);
colnames(tbl)[ncol(anno)+c(1:10)] <- paste(rep(names(grp), each=5), unlist(cnm), sep=', ');
for (i in 1:ncol(anno)) tbl[, i] <- CleanHtmlTags(tbl[, i], FALSE);
tbl0 <- tbl;
write.csv(tbl0, paste(path.tbl, 'gene_stat.csv', sep='/'));
saveRDS(tbl0, paste(path.r, 'gene_stat.rds', sep='/'));
tbl <- cbind(ID=rownames(tbl), tbl);
tbl[, 1] <- AddHref(tbl[, 1], UrlEntrezGene(rownames(tbl)));
CreateDatatable(FormatNumeric(tbl), rownames = FALSE, paste(path.tbl, 'gene_table.html', sep='/'),
caption='Gene-level differential expression of both pairwise comparisons')->fn;
corr <- round(cor(l2r[, 1], l2r[, 2], use='pair'), 4);
lns  <- paste('  - Corr(', comp[1], ':', comp[2], ') = ', corr, sep='');
lns  <- paste(lns, collapse='\n');
tbl[1:2, ]
ol <- sapply(rownames(ind), function(nm) {
i <- ind[nm, ];
g <- intersect(deg1[[i[1]]], deg2[[i[2]]]);
f <- paste('DEG/', 'gene_', nm, '.html', sep='');
t <- tbl[g, , drop=FALSE];
c <- paste(paste(comp, c(names(deg1)[i[1]], names(deg2)[i[2]]), sep=', '), collapse=' and ')
fn <- CreateDatatable(t, paste(path, f, sep='/'), caption=c);
list(c, f);
});
m <- sapply(grps, function(g) exp(log(2)*rowMeans(d0[, g, drop=FALSE])));
aov.stat <- cbind(m[rownames(paov), ], paov);
cnm <- c(colnames(anno), colnames(aov.stat));
aov.tbl <- data.frame(tbl[rownames(paov), colnames(anno)], FormatNumeric(aov.stat), stringsAsFactors = FALSE);
colnames(aov.tbl) <- cnm;
CreateDatatable(aov.tbl, paste(path.tbl, 'anova_table.html', sep='/'), caption='ANOVA results');
saveRDS(d, paste(path.r, 'expr.rds', sep='/'));
saveRDS(anno[rownames(d), ], paste(path.r, 'anno.rds', sep='/'));
saveRDS(aov.stat, paste(path.r, 'anova_stat.rds', sep='/'));
write.csv(d, paste(path.tbl, 'expr.csv', sep='/'));
write.csv(anno[rownames(d), ], paste(path.tbl, 'anno.csv', sep='/'));
write.csv(aov.stat, paste(path.tbl, 'anova_stat.csv', sep='/'));
mn <- apply(pvl, 1, min);
sg <- paov[rownames(paov) %in% rownames(pvl)[mn < 0.05], , drop=FALSE];
id <- rownames(sg)[1:min(4, nrow(sg))];
ttl <- sapply(id, function(id) if (is.na(anno[id, 1])) id else paste(id, CleanHtmlTags(anno[id, 1]), sep=': '));
par(mar=c(8, 2, 2, 2), mfrow=c(2,2), omi=c(0, 1, 0, 0));
c<-rep(c("#FF666633", "#FF000088", "#66FF6633", "#00FF0088"), sapply(grps, length));
for (i in 1:length(id)) {
barplot(d0[id[i], ], col=c, las=3, ylab='Normalized expression level', cex.lab=1.5, main=ttl[i], cex.main=1.5);
if (i==1) legend('topleft', legend=names(grps), pch=15, col=unique(c), bty='n', cex = 0.5);
}
title(ylab='Normalized expression level', outer=TRUE, line=1, cex.lab=2);
names(grps)
CreateReport('summarize_two_v2.yaml')
CreateReport('summarize_two_v2.yaml')
library(RoCA)
CreateReport('summarize_two_v2.yaml')
