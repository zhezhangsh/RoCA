knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
mtrx <- ImportTable(DownloadFile(yml$input$matrix, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
if (class(mtrx) != 'matrix') mtrx <- as.matrix(mtrx);
dim(mtrx)
dim(smpl)
mtrx <- ImportTable(DownloadFile(yml$input$matrix, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
if (class(mtrx) != 'matrix') mtrx <- as.matrix(mtrx);
smpl <- smpl[rownames(smpl) %in% colnames(mtrx), , drop=FALSE];
mtrx <- mtrx[, rownames(smpl), , drop=FALSE];
mtrx <- ImportTable(DownloadFile(yml$input$matrix, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
if (class(mtrx) != 'matrix') mtrx <- as.matrix(mtrx);
smpl <- smpl[rownames(smpl) %in% colnames(mtrx), , drop=FALSE];
mtrx <- mtrx[, rownames(smpl), drop=FALSE];
dim(mtrx)
dim(smpl)
smpl[1:10, ]
s <- smpl[, c(5, 1, 2, 3, 4, 8, 9)]
s$Batch <- paste(s[[8]], s[[9]], sep='_')
dim(s)
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]])
s$Batch <- paste(s[[8]], s[[9]], sep='_')
dim(s)
s$Batch <- paste(s[[6]], s[[7]], sep='_')
s
dim(s)
table(s[, 8])
s[1:4, ]
s$Group <- paste(s[[2]], s[[3]], s[[4]], sep='_')
s$Group
table(s$Group)
s[1:2, ]
s$Group <- paste(s[[2]], s[[3]], s[[4]], s[[5]], sep='_')
table(s$Group)
x <- s$Group
a <- unique(x)
a
b <- paste('Group', 1:6, sep='_')
names(b) <- a
b
b[s$Group]
b[s$Group]->s$Group
s
s[1:2, ]
dim(s)
s <- s[, c(1, 9, 8)]
names(s)
names(s) <- c('Sample', 'Group', 'Batch')
s[1:2, ]
dir()
saveRDS(s, 'sample_rnaseq_lane.rds')
mtrx <- ImportTable(DownloadFile(yml$input$matrix, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
if (class(mtrx) != 'matrix') mtrx <- as.matrix(mtrx);
smpl <- smpl[rownames(smpl) %in% colnames(mtrx), , drop=FALSE];
mtrx <- mtrx[, rownames(smpl), drop=FALSE];
smpl
grps <- split(smpl, rownames(smpl))
grps[1:2]
grps <- split(rownames(smpl[, -2]), as.vector(smpl[[2]]))[unique(as.vector(smpl[[2]]))];
grps[1:2]
grps <- split(smpl[, -2], as.vector(smpl[[2]]))[unique(as.vector(smpl[[2]]))];
grps[1:2]
names(grps)
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
library(data.tree)
install.packages('data.tree')
install.packages('data.tree')
library(data.tree)
name.yaml <- 'technical_replicate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'awsomics', 'data.tree');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
detach("package:htmlwidgets", unload=TRUE)
name.yaml <- 'technical_replicate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'awsomics', 'data.tree');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
library("htmlwidgets", lib.loc="~/Library/R/3.2/library")
library("htmlwidgets", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:htmlwidgets", unload=TRUE)
name.yaml <- 'technical_replicate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'awsomics', 'data.tree');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
fileName <- system.file("extdata", "useR15.csv", package="data.tree")
useRdf <- read.csv(fileName, stringsAsFactors = FALSE)
#define the hierarchy (Session/Room/Speaker)
useRdf$pathString <- paste("useR", useRdf$session, useRdf$room, useRdf$speaker, sep="|")
#convert to Node
useRtree <- as.Node(useRdf, pathDelimiter = "|")
#plot with networkD3
useRtreeList <- ToListExplicit(useRtree, unname = TRUE)
radialNetwork( useRtreeList)
name.yaml <- 'technical_replicate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'awsomics', 'data.tree', 'networkD3);
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
name.yaml <- 'technical_replicate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'awsomics', 'data.tree', 'networkD3');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
fileName <- system.file("extdata", "useR15.csv", package="data.tree")
useRdf <- read.csv(fileName, stringsAsFactors = FALSE)
#define the hierarchy (Session/Room/Speaker)
useRdf$pathString <- paste("useR", useRdf$session, useRdf$room, useRdf$speaker, sep="|")
#convert to Node
useRtree <- as.Node(useRdf, pathDelimiter = "|")
#plot with networkD3
useRtreeList <- ToListExplicit(useRtree, unname = TRUE)
radialNetwork( useRtreeList)
useRtreeList
length(useRtreeList)
names(useRtreeList)
useRtreeList[[1]]
useRtreeList[[2]]
x <- useRtreeList[[2]]
class(useRtree)
useRtree[[1]]
length(useRtree)
useRtree
class(useRdf)
dim(useRdf)
useRdf[1:2, ]
smpl[1:2, ]
name.yaml <- 'technical_replicate.yaml';
name.packages <- c('rmarkdown', 'knitr', 'yaml', 'DT', 'htmlwidgets', 'RoCA', 'awsomics', 'data.tree', 'networkD3');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
mtrx <- ImportTable(DownloadFile(yml$input$matrix, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
if (class(mtrx) != 'matrix') mtrx <- as.matrix(mtrx);
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
smpl <- smpl[rownames(smpl) %in% colnames(mtrx), , drop=FALSE];
mtrx <- mtrx[, rownames(smpl), drop=FALSE];
grps <- split(smpl[, -2], as.vector(smpl[[2]]))[unique(as.vector(smpl[[2]]))];
CreateDatatable(smpl, paste(path.tbl, 'sample.html', sep='/'))
smpl[1:2, ]
smpl$pathString <- paste('AllSamples', smpl$Group, smpl$Sample, rownames(smpl), sep='|');
smpl.tree <- as.Node(smpl, pathDelimiter = "|");
smpl.list <- ToListExplicit(smpl.tree, unname = TRUE);
radialNetwork(smpl.tree);
radialNetwork(smpl.list);
CreateReport('technical_replicate.yaml')
CreateReport('technical_replicate.yaml')
CreateReport('technical_replicate.yaml')
CreateReport('technical_replicate.yaml')
CreateReport('technical_replicate.yaml')
CreateReport('technical_replicate.yaml')
?radialNetwork
CreateReport('technical_replicate.yaml')
smpl$pathString <- paste('AllSamples', smpl$Group, smpl$Sample, rownames(smpl), sep='|');
smpl.tree <- as.Node(smpl, pathDelimiter = "|");
smpl.list <- ToListExplicit(smpl.tree, unname = TRUE);
radialNetwork(smpl.list, height = 600, width = 600, nodeColour = rainbow(3));
smpl$pathString <- paste('AllSamples', smpl$Group, smpl$Sample, rownames(smpl), sep='|');
smpl.tree <- as.Node(smpl, pathDelimiter = "|");
smpl.list <- ToListExplicit(smpl.tree, unname = TRUE);
radialNetwork(smpl.list, height = 600, width = 600, nodeColour = '#f88');
CreateReport('technical_replicate.yaml')
smpl$pathString <- paste('AllSamples', smpl$Group, smpl$Sample, rownames(smpl), sep='|');
smpl.tree <- as.Node(smpl, pathDelimiter = "|");
smpl.list <- ToListExplicit(smpl.tree, unname = TRUE);
radialNetwork(smpl.list, height = 600, width = 600, nodeColour = '#f88', textColour = '#88f');
smpl$pathString <- paste('AllSamples', smpl$Group, smpl$Sample, rownames(smpl), sep='|');
smpl.tree <- as.Node(smpl, pathDelimiter = "|");
smpl.list <- ToListExplicit(smpl.tree, unname = TRUE);
radialNetwork(smpl.list, height = 600, width = 600, nodeColour = '#f88', textColour = '#44f');
CreateReport('technical_replicate.yaml')
pca <- prcomp(t(mtrx));
pca <- prcomp(t(mtrx));
X <- pca$x[,1];
Y <- pca$x[,2];
per <- round(summary(pca)$importance[2, 1:2]*100, 2);
pca$importance <- summary(pca)$importance;
res$pca <- pca;
pca <- prcomp(t(mtrx));
X <- pca$x[,1];
Y <- pca$x[,2];
per <- round(summary(pca)$importance[2, 1:2]*100, 2);
pca$importance <- summary(pca)$importance;
col<-1;
layout(matrix(1:2, nrow=1), width=c(3,1));
par(mai=c(1,1,.25,.25));
cx<-max(0.5, min(3, 64/length(X)))
plot(X, Y, col=col, pch=19, cex=cx, xlim=c(min(X)*1.1, max(X)*1.1), ylim=c(min(Y)*1.1, max(Y)*1.1),
xlab=paste('PC1', ', ', per[1], '%', sep=''), ylab=paste('PC2', ', ', per[2], '%', sep=''), cex.lab=1.5);
text(X, Y, label=1:length(X), col='white', cex=.3*cx);
par(mai=c(1, 0, 0.25, 0));
plot(0, type='n', xlim=c(0, 100), ylim=c(1, 100), axes=FALSE, bty='n', xaxs='i', yaxs='i', xlab='', ylab='');
w<-strwidth(1:length(X), cex=1.2);
w0<-1.2*80/max(w, 80);
h0<-1.2*(100/length(X))/4.0;
cex<-min(1.2, w0, h0);
points(rep(5, length(X)), 100-(1:length(X))*4.0*cex, col=col, pch=19, cex=1.5*cex);
text(5+cex*5, 100-(1:length(X))*4.0*cex, labels=colnames(e1.2), adj=0, col=col, pch=19, cex=cex);
pca <- prcomp(t(mtrx));
X <- pca$x[,1];
Y <- pca$x[,2];
per <- round(summary(pca)$importance[2, 1:2]*100, 2);
pca$importance <- summary(pca)$importance;
col<-1;
layout(matrix(1:2, nrow=1), width=c(3,1));
par(mai=c(1,1,.25,.25));
cx<-max(0.5, min(3, 64/length(X)))
plot(X, Y, col=col, pch=19, cex=cx, xlim=c(min(X)*1.1, max(X)*1.1), ylim=c(min(Y)*1.1, max(Y)*1.1),
xlab=paste('PC1', ', ', per[1], '%', sep=''), ylab=paste('PC2', ', ', per[2], '%', sep=''), cex.lab=1.5);
text(X, Y, label=1:length(X), col='white', cex=.3*cx);
quartz()
layout(matrix(1:2, nrow=1), width=c(3,1));
par(mai=c(1,1,.25,.25));
cx<-max(0.5, min(3, 64/length(X)))
plot(X, Y, col=col, pch=19, cex=cx, xlim=c(min(X)*1.1, max(X)*1.1), ylim=c(min(Y)*1.1, max(Y)*1.1),
xlab=paste('PC1', ', ', per[1], '%', sep=''), ylab=paste('PC2', ', ', per[2], '%', sep=''), cex.lab=1.5);
text(X, Y, label=1:length(X), col='white', cex=.3*cx);
layout(matrix(1:2, nrow=1), width=c(3,1));
par(mai=c(1,1,.25,.25));
cx<-max(0.5, min(3, 64/length(X)))
plot(X, Y, col=col, pch=19, cex=cx, xlim=c(min(X)*1.1, max(X)*1.1), ylim=c(min(Y)*1.1, max(Y)*1.1),
xlab=paste('PC1', ', ', per[1], '%', sep=''), ylab=paste('PC2', ', ', per[2], '%', sep=''), cex.lab=1.5);
text(X, Y, label=1:length(X), col='white', cex=.3*cx);
length(X)
plot(X, y)
plot(X, Y)
library(gplots)
GetColorTypes()
GetColorPanelTypes()
awsomics::GetBluePinkOGramColors(3)
smp[1:2, ]
smpl[1:2, ]
cx<-max(0.5, min(3, 64/length(X)))
cx
GetColorPanelTypes()
cl2 <- GetColors(length(unique(smpl[[2]])), 'silver-gold');
names(cl2) <- unique(smpl[[2]]);
cl2 <- cl2[smpl[[2]]];
cl2
table(cl2)
pca <- prcomp(t(mtrx));
Y <- pca$x[,2];
per <- round(summary(pca)$importance[2, 1:2]*100, 2);
pca$importance <- summary(pca)$importance;
cl1 <- GetBluePinkOGramColors(length(unique(smpl[[1]])));
names(cl1) <- unique(smpl[[1]]);
cl1 <- cl1[smpl[[1]]];
cl2 <- GetColors(length(unique(smpl[[2]])), 'silver-gold');
names(cl2) <- unique(smpl[[2]]);
cl2 <- cl2[smpl[[2]]];
layout(matrix(1:2, nrow=1), width=c(3,1));
par(mai=c(1,1,.25,.25));
cx<-max(0.5, min(3, 96/length(X)))
plot(X, Y, col=cl1, pch=19, cex=cx, xlim=c(min(X)*1.1, max(X)*1.1), ylim=c(min(Y)*1.1, max(Y)*1.1),
xlab=paste('PC1', ', ', per[1], '%', sep=''), ylab=paste('PC2', ', ', per[2], '%', sep=''), cex.lab=1.5);
points(X, Y, cex=cx, col=cl2);
text(X, Y, label=1:length(X), col='black', cex=.3*cx);
par(mai=c(1, 0, 0.25, 0));
plot(0, type='n', xlim=c(0, 100), ylim=c(1, 100), axes=FALSE, bty='n', xaxs='i', yaxs='i', xlab='', ylab='');
w<-strwidth(1:length(X), cex=1.2);
w0<-1.2*80/max(w, 80);
h0<-1.2*(100/length(X))/4.0;
cex<-min(1.2, w0, h0);
points(rep(5, length(X)), 100-(1:length(X))*4.0*cex, col=col, pch=19, cex=1.5*cex);
text(5+cex*5, 100-(1:length(X))*4.0*cex, labels=colnames(mtrx), adj=0, col=col, pch=19, cex=cex);
cex
text(5+cex*5, 100-(1:length(X))*4.0*cex, labels=colnames(mtrx), adj=0, col=col, pch=19, cex=cex);
points(rep(5, length(X)), 100-(1:length(X))*4.0*cex, col=col, pch=19, cex=1.5*cex);
args(GetColors)
GetColorTypes()
cl1[seq(1, length(cl1)), 2]
cl1[seq(1, length(cl1), 2)]
cl1 <- GetBluePinkOGramColors(length(unique(smpl[[1]])));
cl1
cl1[seq(1, length(cl1), 2)]
cl1[seq(2, length(cl1), 2)]
plot(1:20, pch=1:20)
per
sum(per[1:2])
corr <- cor(mtrx)
plot(hclust(as.dist(1-corr)))
heatmap(-corr)
corr <- cor(mtrx);
heatmap(-corr, ColSideColors = cl1, RowSideColors = cl2);
length(cl1)
length(cl2)
cl1 <- GetBluePinkOGramColors(length(unique(smpl[[1]])));
names(cl1) <- unique(smpl[[1]]);
cl1 <- cl1[smpl[[1]]];
length(cl1)
length(cl2)
corr <- cor(mtrx);
heatmap(-corr, ColSideColors = cl1, RowSideColors = cl2);
cl1
table(cl1)
corr <- cor(mtrx);
heatmap(-corr, ColSideColors = cl1, RowSideColors = cl1);
max(corr)
min(corr)
CreateReport('technical_replicate.Rmd')
CreateReport('technical_replicate.yaml')
id <- smpl[10, 1]
s <- smpl[smpl[[1]]==id, ];
s
s <- smpl[smpl[[1]]==id, , drop = FALSE];
rr <- cor(mtrx[, rownames(s)]);
rr
combn(1:3, 2)
r1 <- apply(combn(1:nrow(s), 2), function(i) rr[i[1], i[2]]);
r1 <- apply(combn(1:nrow(s), 2), 2, function(i) rr[i[1], i[2]]);
r1
rm(s)
s1 <- smpl[smpl[[1]]==id, , drop = FALSE];
if (nrow(s1) == 1) r1 <- c() else {
rr <- cor(mtrx[, rownames(s1)]);
r1 <- apply(combn(1:nrow(s1), 2), 2, function(i) rr[i[1], i[2]]);
};
s2
s1
r1
s2 <- smpl[smpl[[1]]!=id & smpl[[2]]==s1[1, 2], , drop=FALSE];
s2
s2 <- smpl[smpl[,1]!=s1[i,1] & smpl[,2]==s1[i,2], , drop=FALSE];
i <- 2
s2 <- smpl[smpl[,1]!=s1[i,1] & smpl[,2]==s1[i,2], , drop=FALSE];
s2
if (ncol(smpl)>2) s2 <- s2[s2[, 3]==s1[i, 3], , drop=FALSE];
s2
cor(mtrx[, rownames(s1)[i]], mtrx[, rownames(s2)]);
as.vector(cor(mtrx[, rownames(s1)[i]], mtrx[, rownames(s2)]));
s1 <- smpl[smpl[[1]]==id, , drop = FALSE];
if (nrow(s1) == 1) r1 <- c() else {
rr <- cor(mtrx[, rownames(s1)]);
r1 <- apply(combn(1:nrow(s1), 2), 2, function(i) rr[i[1], i[2]]);
};
r2 <- lapply(1:nrow(s1), function(i) {
s2 <- smpl[smpl[,1]!=s1[i,1] & smpl[,2]==s1[i,2], , drop=FALSE];
if (ncol(smpl)>2) s2 <- s2[s2[, 3]==s1[i, 3], , drop=FALSE];
if (nrow(s2) == 0) c() else as.vector(cor(mtrx[, rownames(s1)[i]], mtrx[, rownames(s2)]));
});
r1
r2
s1 <- smpl[smpl[[1]]==smpl[id, 1] & rownames(smpl)!=id, , drop = FALSE];
s1
id <- rownames(smpl)
id <- rownames(smpl)[4]
s1 <- smpl[smpl[[1]]==smpl[id, 1] & rownames(smpl)!=id, , drop = FALSE];
s
s1
if (nrow(s1) == 1) r1 <- c() else r1 <- as.vector(cor(mtrx[, id], mtrx[, rownames(s1)]));
s1
r1
s2 <- smpl[smpl[, 1]!=smpl[id, 1] & smpl[, 2]==smpl[id, 2], ];
s2
smpl[1:4, ]
smpl[id, ]
if (ncol(smpl) > 3) s2 <- s2[s2[, 3]==smpl[id, 3], , drop=FALSE];
s2
if (nrow(s2) == 0) c() else as.vector(cor(mtrx[, id], mtrx[, rownames(s2)]));
s1 <- smpl[smpl[[1]]==smpl[id, 1] & rownames(smpl)!=id, , drop = FALSE];
if (nrow(s1) == 1) r1 <- c() else r1 <- as.vector(cor(mtrx[, id], mtrx[, rownames(s1)]));
s2 <- smpl[smpl[, 1]!=smpl[id, 1] & smpl[, 2]==smpl[id, 2], ];
if (ncol(smpl) > 3) s2 <- s2[s2[, 3]==smpl[id, 3], , drop=FALSE];
if (nrow(s2) == 0) r2 <- c() else r2 <- as.vector(cor(mtrx[, id], mtrx[, rownames(s2)]));
crr <- lapply(rownames(smpl), function(id) {
s1 <- smpl[smpl[[1]]==smpl[id, 1] & rownames(smpl)!=id, , drop = FALSE];
if (nrow(s1) == 1) r1 <- c() else r1 <- as.vector(cor(mtrx[, id], mtrx[, rownames(s1)]));
s2 <- smpl[smpl[, 1]!=smpl[id, 1] & smpl[, 2]==smpl[id, 2], ];
if (ncol(smpl) > 3) s2 <- s2[s2[, 3]==smpl[id, 3], , drop=FALSE];
if (nrow(s2) == 0) r2 <- c() else r2 <- as.vector(cor(mtrx[, id], mtrx[, rownames(s2)]));
list(technical=r1, biological=r2);
});
crr
crr[1:2]
crr[[1]]
names(crr) <- rownames(smpl);
crr[1:2]
strwidth(rownames(smpl))
mx <- max(unlist(crr));
mn <- max(unlist(crr));
mx
mn
mn <- min(unlist(crr));
mx <- max(unlist(crr));
mn <- min(unlist(crr));
mx
mn
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.96, 1))
for (i in 1:length(crr)) points(i, crr[[i]][[1]])
crr[[1]][1]
crr[[1]][[1]]
for (i in 1:length(crr)) points(rep(i, crr[[i]][[1]]), crr[[i]][[1]])
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]])
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.96, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2)
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='b')
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.96, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='b')
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='l')
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.99, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='l')
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.98, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='l')
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.985, 0.995))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='l')
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.98, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.2, type='l')
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.5, type='l')
?lines
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.98, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.5, type='b')
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.5, type='o')
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[2]])), crr[[i]][[2]], pch=19, cex=.5, type='o', col=4)
plot(0, type='n', xlim=c(0, nrow(smpl)), ylim=c(0.96, 1))
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[1]])), crr[[i]][[1]], pch=19, cex=.5, type='o')
for (i in 1:length(crr)) points(rep(i, length(crr[[i]][[2]])), crr[[i]][[2]], pch=19, cex=.5, type='o', col=4)
