fn<-TrimPath(sub('.zip$', '', unlist(fns.zip, use.names=FALSE), ignore.case = TRUE));
stats<-do.call('c', stat.all);
names(stats)<-fn;
fn
nm<-names(stats)[1]
nm
pth<-paste(path.input, nm, 'table', sep='/');
if (!dir.exists(pth)) dir.create(pth, recursive = TRUE);
s<-stats[[nm]];
cll<-sapply(s, class);
s<-s[cll=='matrix' | cll=='data.frame'];
names(s)<-tolower(gsub(' ', '_', names(s)));
names(s)
pth
names(s)
sapply(names(s), function(f) CreateDatatable(s[[f]], paste(pth, f, sep='/')));
dir('examples/low_alignment_rate/input/CtrlM201A2_S16_L001_R1_001_fastqc/table/')
CreateReport('summarize_fastqc.yaml')
fn.img<-c('Sequence_quality'='per_sequence_quality.png', 'GC_content' = 'per_sequence_gc_content.png',
'Length_distribution' = 'sequence_length_distribution.png', 'Duplication' = 'duplication_levels.png');
tbl<-sapply(fn.img, function(img) paste('[image](input/', fn, '/Images/', img, ')', sep=''));
tbl<-cbind(Library=paste('[', snm, '](input/', fn, '/fastqc_report.html', ')', sep=''), tbl);
tbl[1,1]
tbl[1, 2]
fn<-TrimPath(sub('.zip$', '', unlist(fns.zip, use.names=FALSE), ignore.case = TRUE));
stats<-do.call('c', stat.all);
names(stats)<-fn;
fns<-sapply(names(stats), function(nm) {
pth<-paste(path.input, nm, 'table', sep='/');
if (!dir.exists(pth)) dir.create(pth, recursive = TRUE);
s<-stats[[nm]];
cll<-sapply(s, class);
s<-s[cll=='matrix' | cll=='data.frame'];
names(s)<-tolower(gsub(' ', '_', names(s)));
sapply(names(s), function(f) CreateDatatable(s[[f]], paste(pth, f, sep='/')));
});
length(fns)
str(fns)
names(fns[[1]])
dim(fns)
fns[[1]]
fns[[1]]->x
TrimPath(x)->x
x
x<-as.vector(x)
x
fn[1]
snm
fn
f<-fn[1]
lnk.img<-paste('input/', f, '/Images/', fn.img, sep='');
lnk.tbl<-paste('input/', f, '/table/', fn.tbl, sep='');
lnk.img
lnk.tbl
fn.tbl
fn.tbl<-c('Base_quality' = 'per_base_sequence_quality.html', 'Tile_quality' = 'per_tile_sequence_quality.html',
'GC_content' = 'per_base_sequence_content.html', 'N_content' = '',
'Kmer_profile' = 'kmer_content.html', 'Adapter_content' = 'adapter_content.html');
lnk.tbl<-paste('input/', f, '/table/', fn.tbl, sep='');
lnk.tbl
lnk.img[!file.exists(paste(path, lnk.img, sep='/'))]<-'';
lnk.tbl[!file.exists(paste(path, lnk.tbl, sep='/'))]<-'';
lnk.img
lnk.tbl
fn.img<-c('Base_quality' = 'per_base_quality.png', 'Tile_quality' = 'per_tile_quality.png',
'GC_content' = 'per_base_sequence_content.png', 'N_content' = 'per_base_n_content.png',
'Kmer_profile' = 'kmer_profiles.png', 'Adapter_content' = 'adapter_content.png');
fn.tbl<-c('Base_quality' = 'per_base_sequence_quality.html', 'Tile_quality' = 'per_tile_sequence_quality.html',
'GC_content' = 'per_base_sequence_content.html', 'N_content' = '',
'Kmer_profile' = 'kmer_content.html', 'Adapter_content' = 'adapter_content.html');
lnk.img<-paste('input/', f, '/Images/', fn.img, sep='');
lnk.tbl<-paste('input/', f, '/table/', fn.tbl, sep='');
lnk.img[!file.exists(paste(path, lnk.img, sep='/'))]<-'';
lnk.tbl[!file.exists(paste(path, lnk.tbl, sep='/'))]<-'';
lnk.tbl
lnk.img
fn.img<-c('Base_quality' = 'per_base_quality.png', 'Tile_quality' = 'per_tile_quality.png',
'GC_content' = 'per_base_sequence_content.png', 'N_content' = 'per_base_n_content.png',
'Kmer_profile' = 'kmer_profiles.png', 'Adapter_content' = 'adapter_content.png');
fn.tbl<-c('Base_quality' = 'per_base_sequence_quality.html', 'Tile_quality' = 'per_tile_sequence_quality.html',
'GC_content' = 'per_base_sequence_content.html', 'N_content' = NA,
'Kmer_profile' = 'kmer_content.html', 'Adapter_content' = 'adapter_content.html');
lnk.img<-paste('input/', f, '/Images/', fn.img, sep='');
lnk.tbl<-paste('input/', f, '/table/', fn.tbl, sep='');
lnk.img[!file.exists(paste(path, lnk.img, sep='/'))]<-'';
lnk.tbl[!file.exists(paste(path, lnk.tbl, sep='/'))]<-'';
lnk.tbl
lnk.img<-paste('[image](input/', f, '/Images/', fn.img, , ')', sep='');
lnk.tbl<-paste('[table](input/', f, '/table/', fn.tbl, ')', sep='');
lnk.img[!file.exists(paste(path, lnk.img, sep='/'))]<-'image';
lnk.tbl[!file.exists(paste(path, lnk.tbl, sep='/'))]<-'table';
lnk.img<-paste('[image](input/', f, '/Images/', fn.img, ')', sep='');
lnk.tbl<-paste('[table](input/', f, '/table/', fn.tbl, ')', sep='');
lnk.img[!file.exists(paste(path, lnk.img, sep='/'))]<-'image';
lnk.tbl[!file.exists(paste(path, lnk.tbl, sep='/'))]<-'table';
lnk.img
f.img<- paste('input/', f, '/Images/', fn.img, sep='');
f.tbl<- paste('input/', f, '/table/', fn.tbl, sep='');
lnk.img<-paste('[image](', f.img, ')', sep='');
lnk.tbl<-paste('[table](', f.tbl, ')', sep='');
lnk.img[!file.exists(paste(path, lnk.img, sep='/'))]<-'image';
lnk.tbl[!file.exists(paste(path, lnk.tbl, sep='/'))]<-'table';
lnk.img
f.img<- paste('input/', f, '/Images/', fn.img, sep='');
f.tbl<- paste('input/', f, '/table/', fn.tbl, sep='');
lnk.img<-paste('[image](', f.img, ')', sep='');
lnk.tbl<-paste('[table](', f.tbl, ')', sep='');
lnk.img[!file.exists(paste(path, f.img, sep='/'))]<-'image';
lnk.tbl[!file.exists(paste(path, f.tbl, sep='/'))]<-'table';
lnk.img
lnk.tbl
fn.img<-c('Base_quality' = 'per_base_quality.png', 'Tile_quality' = 'per_tile_quality.png',
'GC_content' = 'per_base_sequence_content.png', 'N_content' = 'per_base_n_content.png',
'Kmer_profile' = 'kmer_profiles.png', 'Adapter_content' = 'adapter_content.png');
fn.tbl<-c('Base_quality' = 'per_base_sequence_quality.html', 'Tile_quality' = 'per_tile_sequence_quality.html',
'GC_content' = 'per_base_sequence_content.html', 'N_content' = NA,
'Kmer_profile' = 'kmer_content.html', 'Adapter_content' = 'adapter_content.html');
tbl<-sapply(fn, function(f) {
f.img<- paste('input/', f, '/Images/', fn.img, sep='');
f.tbl<- paste('input/', f, '/table/', fn.tbl, sep='');
lnk.img<-paste('[image](', f.img, ')', sep='');
lnk.tbl<-paste('[table](', f.tbl, ')', sep='');
lnk.img[!file.exists(paste(path, f.img, sep='/'))]<-'image';
lnk.tbl[!file.exists(paste(path, f.tbl, sep='/'))]<-'table';
paste(lnk.img, lnk.tbl, sep='; ');
});
dim(tbl)
tbl[1, 1]
tbl[1, 2]
rownames(tbl)
colnames(tbl)
tbl<-cbind(Library=paste('[', snm, '](input/', fn, '/fastqc_report.html', ')', sep=''), t(tbl));
tbl[1, 2]
CreateReport('summarize_fastqc.yaml')
fns[, 1]
fns[[1]]
as.vector(fns[[1]])
TrimPath(as.vector(fns[[1]]))
CreateReport('summarize_fastqc.yaml')
fns[[1]]
TrimPath(fns[[1]])
as.vector(TrimPath(fns[[1]]))
CreateReport('summarize_fastqc.yaml')
as.vector(TrimPath(fns[[1]]))
CreateReport('summarize_fastqc.yaml')
CreateReport('summarize_fastqc.yaml')
CreateReport('summarize_fastqc.yaml')
names(s)
x<-s[[10]]
dim(x)
head(x)
k<-lapply(stats, function(s) rownames(s[['kmer_content']]))
str(k)
rownames(x)
s<-stats[[1]]
rownames(s[['kmer_content']])
names(s)
k<-lapply(stats, function(s) rownames(s[['Kmer Content']]))
str(k)
x<-unique(unlist(k))
x
length(x)
length(unique(x))
DNase
dim(DNase)
head(DNase)
library(Biostrings)
DNAString(x)
x
DNAStringSet(x)
DNAStringSet(x)->a
library(Biostrings)
b<- reverseComplement(a)
b
intersect(b, a)
b<-as.vector(b)
b
a<-as.vector(a)
intersect(a, b)
sort(a)
sort(b)
intersect(a, b)
k
a<-stats[[1]][['Kmer content']]
a
names(s)
a<-stats[[1]][['Kmer Content']]
a
k<-lapply(do.call('c', stats), function(s) s[['Kmer Content']]);
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
length(k)
sapply(k, dim)
k[[1]]
names(k)<-snm;
names(k)
k[[1]]
pos<-sapply(k, function(k) k[, 4])
dim(pos)
boxplot(data.frame(pos))
pos
pos<-sapply(k, function(k) as.numeric(k[, 4])
)
pos
pos[1:2, ]
boxplot(data.frame(pos))
colMeans(pos)
kmer<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(kmer)<-snm;
kmer
mer<-unlist(lapply(k, rownames), use.names=FALSE);
length(mer)
table(mer)
mer<-sort(table(unlist(lapply(k, rownames), use.names=FALSE)));
mer
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
## Load required R packages
require(yaml);
require(knitr);
require(rmarkdown);
require(RCurl);
require(gplots);
require(GtUtility);
require(awsomics);
require(RoCA);
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                                  # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists('summarize_fastqc.yaml'))           # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file('summarize_fastqc.yaml');   # rename the YAML file to fit this template
## Create directory and sub-directories where the output files will be
path<-yml$output;
path.r<-paste(path, 'R', sep='/');
path.tbl<-paste(path, 'table', sep='/');
path.fig<-paste(path, 'figure', sep='/');
path.input<-paste(path, 'input', sep='/');
sapply(c(path, path.r, path.tbl, path.fig, path.input), function(f) if (!dir.exists(f)) dir.create(f, recursive = TRUE));
## Load input data
fns.zip<-lapply(yml$input$fastqc, function(f) sapply(f, function(f) {
fn<-paste(path.input, TrimPath(f), sep='/');
if (!file.exists(fn)) DownloadFile(f, path.input) else fn;
}));
N<-length(fns.zip);
if (min(sapply(fns.zip, length))>=2) paired<-TRUE else paired<-FALSE;
stat.all<-lapply(fns.zip, function(fns) {
stat<-lapply(fns, function(f) parseFastQC(f, path.input));
names(stat)<-paste('R', 1:length(stat), sep='');
stat;
});
if (paired) stat.all<-lapply(stat.all, function(x) x[1:2]) else stat.all<-lapply(stat.all, function(x) x[1]);
saveRDS(stat.all, paste(path.r, 'stat_all_libraries.rds', sep='/'));
snm<-names(stat.all);
if (paired) snm<-paste(rep(snm, each=2), rep(c('R1', 'R2'), length(snm)), sep='_');
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
if (is.null(yml$home)) home.url<-'' else
home.url<-paste("<div align='right'>_[Go to project home](", yml$home, ")_</div>", sep='');
## Use the information provided by the YAML file to create a <Description> section in the report
lns<-lapply(names(yml$description), function(nm) {
c(paste('##', nm), '\n', yml$description[[nm]], '\n');
});
lns<-paste(do.call('c', lns), collapse='\n');
rm(yml)
yml<- yaml.load_file('summarize_fastqc.yaml')
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
mer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])]
mer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-names(mer[mer>=min(length(mer), mer[yml$parameter$kmer])]);
kmer
mer
m<-kmer[1]
m
kmer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer<-unlist(lapply(split(names(kmer), kmer), sort), use.names=FALSE);
kmer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer<- lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c]))
kmer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer<-unlist(lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c])));
kmer
m<-kmer[1]
m
s<-sapply(k, function(k) k[m, ]);
s
dim(s)
s<-t(sapply(k, function(k) k[m, ]));
s
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s
s<-s[!is.na(s[, 1]), , drop=FALSE];
s
k[[1]]
kmer.stat<-sapply(kmer, function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
kmer.stat
tbl<-t(kmer.stat);
head(tbl)
colnames(tbl)<-c('Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
tbl[1:2, ]
kmer
mer
mer[kmer]
names(k)
dim(k[[1]])
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer<-unlist(lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c])));
kmer.stat<-sapply(kmer, function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
tbl<-cbind(Library=mer[kmer], t(kmer.stat));
colnames(tbl)<-c('Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer<-unlist(lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c])));
kmer.stat<-sapply(kmer, function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
tbl<-cbind(mer[kmer], t(kmer.stat));
colnames(tbl)<-c('Library', 'Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
tbl[1:2, ]
CreateReport('summarize_fastqc.yaml')
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
kmer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
mer
kmer.stat<-sapply(mer, function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
dim(kmer.stat)
tbl<-cbind(mer, t(kmer.stat));
colnames(tbl)<-c('Library', 'Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
dim(tbl)
head(tbl)
args(order)
tbl<-tbl0[order(tbl0, rownames(tbl0)), ]
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
#kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
#kmer<-unlist(lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c])));
kmer.stat<-sapply(mer, function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
tbl0<-cbind(mer, t(kmer.stat));
colnames(tbl0)<-c('Library', 'Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
tbl<-tbl0[order(tbl0, rownames(tbl0)), ]
tbl<-tbl0[order(tbl0[, 1], rownames(tbl0)), ]
tbl
tbl0<-tbl0[order(rownames(tbl0)), ];
tbl0[1:2, ]
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
#kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
#kmer<-unlist(lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c])));
kmer.stat<-sapply(mer, function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
tbl0<-cbind(mer, t(kmer.stat));
colnames(tbl0)<-c('Library', 'Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
tbl0<-tbl0[order(rownames(tbl0)), ];
tbl0<-tbl0[order(tbl0[, 1], decreasing = TRUE), ];
tbl0
mer
k<-lapply(do.call('c', stat.all), function(s) s[['Kmer Content']]);
names(k)<-snm;
mer<-rev(sort(table(unlist(lapply(k, rownames), use.names=FALSE))));
#kmer<-mer[mer>=min(length(mer), mer[yml$parameter$kmer])];
#kmer<-unlist(lapply(kmer[1]:kmer[length(kmer)], function(c) sort(names(kmer)[kmer==c])));
kmer.stat<-sapply(names(mer), function(m) {
s<-t(sapply(k, function(k) as.numeric(k[m, ])));
s<-s[!is.na(s[, 1]), , drop=FALSE];
c(mean(s[, 1]), mean(s[, 3]), mean(s[, 4]), min(s[, 4]), max(s[, 4]));
});
tbl0<-cbind(as.vector(mer), t(kmer.stat));
colnames(tbl0)<-c('Library', 'Count', 'Obs/Exp', 'Position_Mean', 'Position_Min', 'Position_Max');
tbl0<-tbl0[order(rownames(tbl0)), ];
tbl0<-tbl0[order(tbl0[, 1], decreasing = TRUE), ];
tbl0[1:2, ]
tbl0[1:5, ]
tbl<-tbl0[tbl0[, 1]>=tbl0[min(nrow(tbl0, yml$parameter$kmer, 1]), , drop=FALSE];
tbl<-tbl0[tbl0[, 1]>=tbl0[min(nrow(tbl0), yml$parameter$kmer, 1]), , drop=FALSE];
tbl<-tbl0[tbl0[, 1]>=tbl0[min(nrow(tbl0), yml$parameter$kmer), , drop=FALSE];
tbl<-tbl0[tbl0[, 1]>=min(nrow(tbl0), yml$parameter$kmer), , drop=FALSE];
tbl
dim(tbl)
min(nrow(tbl0), yml$parameter$kmer)
tbl<-tbl0[tbl0[, 1]>=tbl0[min(nrow(tbl0), yml$parameter$kmer), 1], , drop=FALSE];
tbl
dim(tbl)
CreateReport('summarize_fastqc.yaml')
ks<-do.call('rbind', k);
dim(ks)
head(ks)
bs<-unlist(lapply(k, rownames), use.names=FALSE);
length(bs)
head(bs)
xtabs(~bs+ks[, 1])
xtabs(~bs+ks[, 1])->x
dim(x)
tabs
tab
mer
head(ks)
names(k)
tbl0[1:2, ]
mtr<-matrix(NA, nr=nrow(tbl0), nc=length(k)+1, dimnames = list(rownames(tbl0), c('Num_library', snm)));
mtr[, 1]<-tbl0[, 1];
head(mtr)
rnm<-unlist(lapply(k, rownames), use.names=FALSE);
head(rnm)
cnm<-rep(snm, sapply(k, nrow));
length(cnm)
length(rnm)
mtr[rnm, cnm]<-ks[, 1]
mtr[1:2, ]
k[[1]][1:2, ]
mtr<-matrix(NA, nr=nrow(tbl0), nc=length(k)+1, dimnames = list(rownames(tbl0), c('Num_library', snm)));
mtr[, 1]<-tbl0[, 1];
mtrs<-lapply(c(1, 3, 4), function(c) {
for (i in 1:length(k)) mtr[rownames(k[[i]]), snm[i]]<-k[[i]][, c];
mtr;
});
x <- mtrs[[1]]
head(x)
fn<-sapply(names(mtrs), function(nm) {
CreateDatatable(mtrs[[nm]], paste(path.tbl, '/kmer_', nm, sep=''));
});
fn
names(mtrs)<-c('count', 'enrichment', 'positioin');
fn<-sapply(names(mtrs), function(nm) {
CreateDatatable(mtrs[[nm]], paste(path.tbl, '/kmer_', nm, sep=''));
});
fn
CreateReport('summarize_fastqc.yaml')
mp<-c('PASS'=1, 'WARN'=2, 'FAIL'=3);
nm<-unique(unlist(lapply(stat.all, function(s) sapply(s, function(s) names(s$Summary))), use.names=FALSE));
code<-lapply(stat.all, function(s) {
s<-sapply(s, function(s) mp[s$Summary[nm]]);
});
code<-do.call('cbind', code);
rownames(code)<-nm;
colnames(code)<-snm;
code[code==0 | is.na(code)]<-4;
tbl<-t(code);
fn.tbl<-CreateDatatable(tbl, paste(path.tbl, 'quick_evaluation.html', sep='/'), rownames = TRUE, caption = "Quick evaluation");
tbl
dim(code)
code
t<-apply(tbl, 1, function(x) names(mp)[x])
t
t<-apply(tbl, 2, function(x) names(mp)[x])
dim(t)
t
t<-apply(tbl, 2, function(x) names(mp)[x]);
rownames(t)<-snm;
dim(t)
t[1:2, ]
names(mp)[4]
tbl<-apply(code, 2, function(x) names(mp)[x])
tbl
tbl<-apply(code, 1, function(x) names(mp)[x])
tbl
CreateReport('summarize_fastqc.yaml')
CreateReport('summarize_fastqc.yaml')
CreateReport('summarize_fastqc.yaml')
CreateReport('summarize_fastqc.yaml')
