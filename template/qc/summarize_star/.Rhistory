if (!file.exists(path.script)) dir.create(path.script, recursive=TRUE);
fn.sam<-paste(path.pass[i], '/', nms, '_Aligned.out.sam',  sep='');
fn.sam<-sub(qsub.path[1], qsub.path[2], fn.sam);
writeLines(paste('rm', fn.sam), paste(path.script, 'delete_sam.sh', sep='/'));
fn.junc<-paste(path.pass[i], '/', nms, '_SJ.out.tab',  sep='');
fn.junc<-sub(qsub.path[1], qsub.path[2], fn.junc);
fn.junc<-paste('"', fn.junc, '"', sep='');
fn.junc<-paste('\t"', nms, '" = ', fn.junc, sep='');
lns<-paste(fn.junc, collapse=',\n');
lns<-c('fn.junc<-c(', lns, ');', '\n\nlibrary(Rnaseq);\n');
if (i>1) junc$unannotated<-FALSE
l<-paste(c('canonical.only', 'unannotated.only', 'min.sample', 'min.unique', 'min.unique.total', 'min.overhang'),
c(junc$canonical, junc$unannotated, junc$minimum$sample, junc$minimum$read, junc$minimum$total, junc$minimum$overhang), sep='=');
l<-paste(l, collapse=', ');
l<-paste('"', paste(path.pass[i], junc$filename, sep='/'), '", ', l, sep='');
l<-paste('sj<-CombineStarSj(fn.junc, output=', l, ')', sep='');
lns<-c(lns, l);
l<-paste('saveRDS(sj, "', paste(path.script, 'sj.rds', sep='/'), '")', sep='');
lns<-c(lns, l);
lns<-gsub(qsub.path[1], qsub.path[2], lns);
writeLines(lns, paste(path.script, 'combined_junction.r', sep='/'));
############################################################################################################################################
lines;
});
yaml1$output <- path.smm;
yaml1$home <- yaml$home;
yaml1$analyst <- yaml$analyst;
yaml1$description <- yaml$description;
yaml1$input <- as.list(fn.log);
yaml1$parameter$program <- yaml$star;
yaml1$parameter$output <- path.pass[n];
yaml1$parameter$genome <- yaml$genome;
yaml1$parameter$transcriptome <- yaml$transcriptome;
yaml1$parameter$star <- yaml$options;
path.smm <- paste(path, 'summarize_star', sep='/');
if (!dir.exists(path.smm)) dir.create(path.smm);
fn.yaml1 <- DownloadFile(yaml$summarize, path = path.smm);
yaml1 <- yaml.load_file(fn.yaml1);
fn.log <- paste(path, paste('pass', n, sep='_'), paste(nms, '_Log.final.out', sep=''), sep='/');
names(fn.log) <- nms;
yaml1$output <- path.smm;
yaml1$home <- yaml$home;
yaml1$analyst <- yaml$analyst;
yaml1$description <- yaml$description;
yaml1$input <- as.list(fn.log);
yaml1$parameter$program <- yaml$star;
yaml1$parameter$output <- path.pass[n];
yaml1$parameter$genome <- yaml$genome;
yaml1$parameter$transcriptome <- yaml$transcriptome;
yaml1$parameter$star <- yaml$options;
writeLines(as.yaml(yaml1), fn.yaml1);
fn.bam <- paste(path, paste('pass', n, sep='_'), paste(nms, '_Aligned.sortedByCoord.out.bam', sep=''), sep='/')
fn.bam
fn.bam <- paste(path, paste('pass', n, sep='_'), paste(nms, '_Aligned.sortedByCoord.out.bam', sep=''), sep='/');
fn.bam
path.load <- paste(path, 'load_bam', sep='/');
if (!dir.exists(path.load)) dir.create(path.load);
fn.bam <- paste(path, paste('pass', n, sep='_'), paste(nms, '_Aligned.sortedByCoord.out.bam', sep=''), sep='/');
names(fn.bam) <- nms;
yaml2 <- list();
fn <- sapply(names(fn.bam), function(nm) {
pth<-paste(path, nm, sep='/');
if (!file.exists(pth)) dir.create(pth, recursive = TRUE);
fn.r<-paste(pth, 'LoadBam.r', sep='/');
fn.sh<-paste(pth, 'LoadBam.sh', sep='/');
fn.yml<-paste(pth, 'LoadBam.yml', sep='/');
y<-list(name=nm, bam=fn.bam[[nm]]);
yml<-c(y, yaml2);
writeLines(as.yaml(yml), fn.yml);
writeLines(paste(yml$R, fn.r), fn.sh);
lns<-c(paste('##', nm), 'require("GenomicRanges");', 'require("GenomicAlignments");', 'require("Rnaseq");', '');
lns<-c(lns, paste('fn.yaml <- ("', fn.yml, '");', sep=''));
lns<-c(lns, 'ct<-LoadBam(fn.yaml);', '');
writeLines(lns, fn.r);
fn.sh;
});
path.load <- paste(path, 'load_bam', sep='/');
if (!dir.exists(path.load)) dir.create(path.load);
fn.bam <- paste(path, paste('pass', n, sep='_'), paste(nms, '_Aligned.sortedByCoord.out.bam', sep=''), sep='/');
names(fn.bam) <- nms;
yaml2 <- list();
fn <- sapply(names(fn.bam), function(nm) {
pth<-paste(path.load, nm, sep='/');
if (!file.exists(pth)) dir.create(pth, recursive = TRUE);
fn.r<-paste(pth, 'LoadBam.r', sep='/');
fn.sh<-paste(pth, 'LoadBam.sh', sep='/');
fn.yml<-paste(pth, 'LoadBam.yml', sep='/');
y<-list(name=nm, bam=fn.bam[[nm]]);
yml<-c(y, yaml2);
writeLines(as.yaml(yml), fn.yml);
writeLines(paste(yml$R, fn.r), fn.sh);
lns<-c(paste('##', nm), 'require("GenomicRanges");', 'require("GenomicAlignments");', 'require("Rnaseq");', '');
lns<-c(lns, paste('fn.yaml <- ("', fn.yml, '");', sep=''));
lns<-c(lns, 'ct<-LoadBam(fn.yaml);', '');
writeLines(lns, fn.r);
fn.sh;
});
rm(list=ls())
setwd('~/Documents/RoCA/template/gri/cnv_impact/')
source('~/.active-rstudio-document', echo=TRUE)
setwd('~/Desktop/Curran/CNV_RNAseq/')
dir()
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
stats <- lapply(1:ncol(cnv), function(i) {
x <- mtr0[, -i, drop=FALSE];
adj <- apply(x, 2, function(x) x*mean(mtr0[, i])/mean(x));
x[cnv[, -i]!=2] <- NA;
adj[cnv[, -i]!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
m.adj <- rowMeans(adj, na.rm=TRUE);
sd <- apply(adj, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
chg <- (mtr0[, i] - m.adj) / m.adj * 100
s <- cbind(Num_Diploid=n, Mean_Diploid=m.adj, SD=sd);
cbind(Copy=cnv[, i], Count=mtr0[, i], Change=chg, s);
});
names(stats) <- colnames(cnv);
sapply(stats, dim)
head(stats[[1]])
tn <- lapply(stats, function(s) s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]), , drop=FALSE);
tn <- lapply(stats, function(s) s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]), , drop=FALSE]);
sapply(tn, nrow)
tn <- lapply(stats, function(s) s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > q1, , drop=FALSE]);
sapply(tn, nrow)
summary(tn[[1]][, 1])
summary(tn[[1]][, 5])
x <- tn[[1]]
summary(x[, 1])
head(x)
summary(x[, 2])
min(x[, 2])
tn <- lapply(stats, function(s) s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > q1 & s[, 2] > 0, , drop=FALSE]);
tn <- lapply(stats, function(s) s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > q1, , drop=FALSE]);
ms
tn <- lapply(stats, function(s) s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > q1 & s[, 2] > 0 & s[, 4] > 1, , drop=FALSE]);
sapply(tn, nrow)
lm <- lapply(tn, function(tn) lm(log(tn[, 2]/tn[, 5])~log(tn[, 1]/tn[, 4])))
summary(lm[[1]])
x <- tn[[1]]
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/x[, 4]));
predict(mdl, data.frame(x0=log((1:3)/2)))
predict(mdl, data.frame(log((1:3)/2)))
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/x[, 4]));
mdl
a <- lm((2:11)~(1:10))
b <- 2:11
c <- 1:10
a <- lm(b~c)
a
c <- 2*1:10
c
a <- lm(b~c)
a
c
b <- (c-1)/2
b
b <- 2:11
0.5*c+1
mdl$coefficients
str(mdl)
ratios <- lapply(1:3, function(c) {
print(c);
lapply(1:ncol(mtr0), function(i) {
lapply((1:ncol(mtr0))[-i], function(j) {
x <- mtr0[cnv[,i]==c & cnv[,j]==2, c(i, j), drop=FALSE];
x <- x[x[,1]>= c/2*q1[i] & x[,2]>=q1[j], , drop=FALSE];
x[,1]/x[,2];
})
})
});
ms <- sapply(ratios, function(c) {
sapply(c, function(c) mean(log(unlist(c, use.names=FALSE)), trim=0.1, na.rm=TRUE));
});
ms
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/x[, 4]));
coe <- as.vector(mdl$coefficients);
prd <- log((1:3)/2)*coe[2]+coe[1];
prd
coe
lm <- lapply(tn, function(x) {
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/x[, 4]));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
})
lm
lm <- sapply(tn, function(x) {
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/x[, 4]));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
})
lm
exp(lm)
exp(t(lm))
ms
s <- stats[[1]]
dim(s)
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > summary(s[, 5])[2] & s[, 2] > summary(s[, 2])[2] & s[, 4] > 1, , drop=FALSE]
dim(x)
head(x)
colMeans(x[x[,1]==2, ])
lm <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > summary(s[, 5])[2] & s[, 2] > summary(s[, 2])[2] & s[, 4] > 1, , drop=FALSE]
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/x[, 4]));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
})
lm
colMeans(x[x[,1]==1, ])
plot(log(x[,1]/x[,3]), log(x[, 2], x[, 5]))
summary(x[, 1])
plot(log(x[,1]/2), log(x[, 2], x[, 5]))
head(x)
par(mfrow=c(1,1))
plot(log(x[,1]/2), log(x[, 2], x[, 5]))
lm <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > summary(s[, 5])[2] & s[, 2] > summary(s[, 2])[2] & s[, 4] > 1, , drop=FALSE]
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/2));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
})
lm
exp(t(lm))
exp(t(lm))*100-100
ms
exp(t(lm))*100-100->a
cor(a, ms)
cor(a[, 1], ms[, 1])
cor(a[, 2], ms[, 2])
cor(a[, 3], ms[, 3])
ratios <- lapply(1:3, function(c) {
print(c);
lapply(1:ncol(mtr0), function(i) {
lapply((1:ncol(mtr0))[-i], function(j) {
x <- mtr0[cnv[,i]==c & cnv[,j]==2, c(i, j), drop=FALSE];
x <- x[x[,1]>= c/2*q1[i] & x[,2]>=q1[j], , drop=FALSE];
x[,1]/x[,2];
})
})
});
ms <- sapply(ratios, function(c) {
sapply(c, function(c) mean(log(unlist(c, use.names=FALSE)), trim=0.1, na.rm=TRUE));
});
ms
cor(ms, lm)
lm
cor(ms, t(lm))
lm
t(lm)
ms
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 5] > summary(s[, 5])[2] & s[, 2] > summary(s[, 2])[2] & s[, 4] > 1, , drop=FALSE]
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/2));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
y <- x[x[,1]==1, ]
dim(y)
head(Y)
head(y)
mean(log(y[, 2]/y[, 5]))
y <- x[x[,1]==3, ]
mean(log(y[, 2]/y[, 5]))
lm
t.test(lm[2, ])
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5]);
q1
dim(x)
head(x)
ms <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/2));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
});
ms <- t(ms):
ms
ms <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/2));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
});
ms
ms[2, ]
t.test(ms[2, ])
sort(ms[2, ])
ms
t(ms)
colMeans(ms)
dimnames(ms) <- list(colnames(mtr0), c('1 copy', '2 copies', '3 copies'));
ms <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
mdl <- lm(log(x[, 2]/x[, 5])~log(x[, 1]/2));
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
});
ms <- t(ms);
dimnames(ms) <- list(colnames(mtr0), c('1 copy', '2 copies', '3 copies'));
m1 <- round(100*exp(mean(ms[, 1]-ms[, 2])) - 100, 3);
m3 <- round(100*exp(mean(ms[, 3]-ms[, 2])) - 100, 3);
m1
m2
m3
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
dim(x)
head(x)
a <- log(x[, 2]/x[, 5]);
b <- log(x[, 1]/2);
c <- mean(a[b==0]);
summary(a)
summary(b)
summary(c)
summary(a)
summary(b)
a <- log(x[, 2]/x[, 5]);
b <- log(x[, 1]/2);
c <- mean(a[b==0]);
a <- a[b!=0] - c;
b <- b[b!=0];
length(a)
length(b)
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
a <- log(x[, 2]/x[, 5]);
b <- log(x[, 1]/2);
c <- mean(a[b==0]);
a <- a[b!=0] - c;
b <- b[b!=0];
mdl <- lm(a~b);
coe <- as.vector(mdl$coefficients);
log((1:3)/2)*coe[2]+coe[1];
c
ms <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
a <- log(x[, 2]/x[, 5]);
b <- log(x[, 1]/2);
c <- mean(a[b==0]);
a <- a[b!=0] - c;
b <- b[b!=0];
mdl <- lm(a~b);
coe <- as.vector(mdl$coefficients);
prd <- log((1:3)/2)*coe[2]+coe[1];
prd
});
ms
t(ms)
ms <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- summary(x[, 5])[2];
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
a <- log(x[, 2]/x[, 5]);
b <- log(x[, 1]/2);
c <- mean(a[b==0]);
a <- a[b!=0] - c;
b <- b[b!=0];
mdl <- lm(a~b);
coe <- as.vector(mdl$coefficients);
prd <- log((1:3)/2)*coe[2]+coe[1];
prd[2] <- c;
prd;
});
ms <- t(ms);
ms
colMeans(ms)
x <- 1:10
y <- rep(2:10)
lm(x~y)
ls()
dim(stats[[1]])
head(stats[[1]])
m2 <- log(x[x[,1]==2, 2]/x[x[,1]==2, 5]);
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- max(1, summary(x[, 5])[2]);
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
m2 <- log(x[x[,1]==2, 2]/x[x[,1]==2, 5]);
m2
m1 <- mean(log(2*y[, 2]/y[, 5]/y[, 1]));
dim(y)
y <- x[x[, 1]<2, ];
z <- x[x[, 1]>2, ];
m1 <- mean(log(2*y[, 2]/y[, 5]/y[, 1]));
y
m1
m2
m2 <- mean(log(x[x[,1]==2, 2]/x[x[,1]==2, 5]));
m2
2*y[, 2]/y[, 5]/y[, 1])
2*y[, 2]/y[, 5]/y[, 1]
m1 <- mean(log((y[, 2]/y[, 1])/y[, 5]));
m1
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- max(1, summary(x[, 5])[2]);
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
y <- x[x[, 1]<2, , drop=FALSE];
z <- x[x[, 1]>2, , drop=FALSE];
m1 <- mean(log((y[, 2]/y[, 1])/y[, 5]));
m2 <- mean(log(x[x[,1]==2, 2]/x[x[,1]==2, 5]));
m3 <- mean(log((z[, 2]/(z[, 1]/3))/y[, 5]));
summary(z[, 1])
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- max(1, summary(x[, 5])[2]);
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
y <- x[x[, 1]<2, , drop=FALSE];
z <- x[x[, 1]>2, , drop=FALSE];
m1 <- mean(log((y[, 2]/y[, 1])/y[, 5]));
m2 <- mean(log(x[x[,1]==2, 2]/x[x[,1]==2, 5]));
m3 <- mean(log((z[, 2]/(z[, 1]/3))/z[, 5]));
m1
m2
m3
x <- mtr0;
x[cnv!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
sd <- apply(x, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
stat2 <- cbind(N=n, Mean=m, SD=sd);
# Compare each sample to all other 2-copy samples
stats <- lapply(1:ncol(cnv), function(i) {
x <- mtr0[, -i, drop=FALSE];
adj <- apply(x, 2, function(x) x*mean(mtr0[, i])/mean(x));
x[cnv[, -i]!=2] <- NA;
adj[cnv[, -i]!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
m.adj <- rowMeans(adj, na.rm=TRUE);
sd <- apply(adj, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
chg <- (mtr0[, i] - m.adj) / m.adj * 100
s <- cbind(Num_Diploid=n, Mean_Diploid=m.adj, SD=sd);
cbind(Copy=cnv[, i], Count=mtr0[, i], Change=chg, s);
});
names(stats) <- colnames(cnv);
######################################################################
# evaluate impact with linear model
ms <- sapply(stats, function(s) {
x <- s[s[,1]>0 & s[,1]<=4 & !is.na(s[, 5]) & s[, 4] > 1, , drop=FALSE];
q1 <- max(1, summary(x[, 5])[2]);
x <- x[x[, 5] >= q1 & x[, 2] >= q1*x[,1]/x[,4], , drop=FALSE];
y <- x[x[, 1]<2, , drop=FALSE];
z <- x[x[, 1]>2, , drop=FALSE];
m1 <- mean(log((y[, 2]/y[, 1])/y[, 5]));
m2 <- mean(log(x[x[,1]==2, 2]/x[x[,1]==2, 5]));
m3 <- mean(log((z[, 2]/(z[, 1]/3))/z[, 5]));
c(m1, m2, m3);
});
ms <- t(ms);
# ratios <- lapply(1:3, function(c) {
#   print(c);
#   lapply(1:ncol(mtr0), function(i) {
#     lapply((1:ncol(mtr0))[-i], function(j) {
#       x <- mtr0[cnv[,i]==c & cnv[,j]==2, c(i, j), drop=FALSE];
#       x <- x[x[,1]>= c/2*q1[i] & x[,2]>=q1[j], , drop=FALSE];
#       x[,1]/x[,2];
#     })
#   })
# });
# ms <- sapply(ratios, function(c) {
#   sapply(c, function(c) mean(log(unlist(c, use.names=FALSE)), trim=0.1, na.rm=TRUE));
# });
dimnames(ms) <- list(colnames(mtr0), c('1 copy', '2 copies', '3 copies'));
m1 <- round(100*exp(mean(ms[, 1]-ms[, 2])) - 100, 3);
m3 <- round(100*exp(mean(ms[, 3]-ms[, 2])) - 100, 3);
saveRDS(100*(exp(ms)-1), paste(path.r, 'average_percent.rds', sep='/'));
tbl <- round(100*(exp(ms)-1), 2);
CreateDatatable(tbl, paste(path.tbl, 'average_change_by_sample.html', sep='/'),
caption = 'Average change of each sample comparing to diploid samples (%)');
######################################################################
s <- lapply(stats, function(s) {
s <- s[s[,1]!=2, , drop=FALSE];
data.frame(ID=rownames(s), s);
});
tbl <- data.frame(Sample_ID=rep(colnames(cnv), sapply(s, nrow)), do.call('rbind', s), stringsAsFactors = FALSE);
tbl <- tbl[tbl$Num_Diploid!=0 & !is.na(tbl$Mean_Diploid), , drop=FALSE];
if (!identical(NA, ann)) tbl <- cbind(tbl, ann[tbl$ID, ]);
CreateDatatable(tbl, paste(path.tbl, 'CNV_vs_Diploid.html', sep='/'), rownames = FALSE);
ms
colMeans(ms)
setwd('~/Documents/RoCA/template/gri/cnv_impact/')
ls()
rm(list=ls())
ls()
CreateReport('cnv_impact.yaml')
setwd('../../qc')
setwd('summarize_star/')
install_github('zhezhangsh/RoCAR')
CreateReport('summarize_star.yaml')
install_github('zhezhangsh/Rnaseq')
InstallDependency(reinstall = TRUE, cran=FALSE, bioc=FALSE, github=TRUE)
ppi <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/ppi_400/input/ppi_400.rds")
length(ppi)
ppi
head(ppi)
names(ppi)
dim(ppi)
g <- readRDS("/Users/zhangz/Google Drive/Projects/Mills/2018-05_iPS-MEG/result/megakarocyte/igraph/replot/group.rds")
g
str(g)
names(g)
