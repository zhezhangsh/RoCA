fn;
});
fns <- paste('figure', TrimPath(fns), sep='/');
lns <- paste(paste('###', colnames(smp)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
yml <- yaml.load_file('run_pca.yaml')
prms <- yml$parameter
smp <- smpl[, !(colnames(smpl) %in% prms$exclude), drop=FALSE];
smp <- cbind(ID=rownames(smp), smp);
plt <- prms$plot;
col <- plt$color;
col <- lapply(col, function(c) pmax(0, pmin(1, c)));
col <- sapply(1:3, function(i) rgb(col[[1]][i], col[[2]][i], col[[3]][i]));
shp <- tolower(prms$plot$shape[1]);
pch <- 19;
if (shp=='square') pch <- 15 else if (shp=='triangle') pch <- 17 else if (shp=='diamond') pch <- 18;
fns <- sapply(colnames(smp), function(nm) {
if (!identical('ID', nm)) smp <- smp[order(smp[, nm]), , drop=FALSE];
fn <- paste(path.fig, paste('pca_', nm, '.png', sep=''), sep='/');
png(fn, w=1000, h=750);
cex <- min(5, max(0.5, 200/nrow(smp)));
cnm <- length(unique(smp[, nm]));
if (cnm==1) col <- col[1] else
if (cnm==2) col<-col[c(1, length(col))] else {
if (length(col)==2) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2]) else {
ncl <- length(unique(smp[, nm]));
if (ncl %% 2 == 1) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2], col[3]) else
col <- colorpanel(length(unique(smp[, nm]))+1, col[1], col[2], col[3])[-round(ncl)];
}
}
names(col) <- unique(smp[, nm]);
col <- col[as.character(smp[, nm])];
if (identical('ID', nm)) {
lbl <- 1:nrow(smp);
grp <- smp[, nm];
} else {
uni <- smp[!duplicated(smp[, nm]), nm];
lbl <- 1:length(uni);
names(lbl) <- uni;
lbl <- lbl[as.character(smp[, nm])];
grp <- paste0('[', lbl, '] - ', smp[, nm]);
}
PlotPCA(prcomp(t(mtrx[, rownames(smp)])), groups=grp, new.window = FALSE, cex=cex, col=col, label=lbl, legend=TRUE,
legend.single = identical('ID', nm), dimensions = c(plt$dimension[1], plt$dimension[2]));
if (dev.cur()!=1) dev.off();
fn;
});
fns <- paste('figure', TrimPath(fns), sep='/');
lns <- paste(paste('###', colnames(smp)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
smp <- smpl[, !(colnames(smpl) %in% prms$exclude), drop=FALSE];
smp <- cbind(ID=rownames(smp), smp);
plt <- prms$plot;
col <- plt$color;
col <- lapply(col, function(c) pmax(0, pmin(1, c)));
col <- sapply(1:3, function(i) rgb(col[[1]][i], col[[2]][i], col[[3]][i]));
shp <- tolower(prms$plot$shape[1]);
pch <- 19;
if (shp=='square') pch <- 15 else if (shp=='triangle') pch <- 17 else if (shp=='diamond') pch <- 18;
fns <- sapply(colnames(smp), function(nm) {
if (!identical('ID', nm)) smp <- smp[order(smp[, nm]), , drop=FALSE];
fn <- paste(path.fig, paste('pca_', nm, '.png', sep=''), sep='/');
png(fn, w=1000, h=750);
cex <- min(5, max(0.5, 200/nrow(smp)));
cnm <- length(unique(smp[, nm]));
if (cnm==1) col <- col[1] else
if (cnm==2) col<-col[c(1, length(col))] else {
if (length(col)==2) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2]) else {
ncl <- length(unique(smp[, nm]));
if (ncl %% 2 == 1) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2], col[3]) else
col <- colorpanel(length(unique(smp[, nm]))+1, col[1], col[2], col[3])[-round(ncl)];
}
}
names(col) <- unique(smp[, nm]);
col <- col[as.character(smp[, nm])];
if (identical('ID', nm)) {
lbl <- 1:nrow(smp);
grp <- smp[, nm];
} else {
uni <- smp[!duplicated(smp[, nm]), nm];
lbl <- 1:length(uni);
names(lbl) <- uni;
lbl <- lbl[as.character(smp[, nm])];
grp <- paste0('[', lbl, '] - ', smp[, nm]);
}
PlotPCA(prcomp(t(mtrx[, rownames(smp)])), groups=grp, new.window = FALSE, cex=cex, col=col, label=lbl, legend=TRUE,
legend.single = identical('ID', nm), dimensions = c(plt$dimension[1], plt$dimension[2]));
if (dev.cur()!=1) dev.off();
fn;
});
fns <- paste('figure', TrimPath(fns), sep='/');
lns <- paste(paste('###', colnames(smp)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
prms
yml <- yaml.load_file('run_pca.yaml')
prms <- yml$parameter
prms
dir()
yml <- yaml.load_file('run_pca.yaml')
yml
prms$exclude
smp
yml <- yaml.load_file('run_pca.yaml')
yml$parameter
yml <- yaml.load_file('run_pca.yaml')
yml
yml <- yaml.load_file('run_pca.yaml')
yml
yml <- yaml.load_file('run_pca.yaml')
yml$parameter
getwd()
yml <- yaml.load_file('run_pca.yaml')
yml$parameter
smp <- smpl[, !(colnames(smpl) %in% prms$exclude), drop=FALSE];
smp <- cbind(ID=rownames(smp), smp);
plt <- prms$plot;
col <- plt$color;
col <- lapply(col, function(c) pmax(0, pmin(1, c)));
col <- sapply(1:3, function(i) rgb(col[[1]][i], col[[2]][i], col[[3]][i]));
shp <- tolower(prms$plot$shape[1]);
pch <- 19;
if (shp=='square') pch <- 15 else if (shp=='triangle') pch <- 17 else if (shp=='diamond') pch <- 18;
fns <- sapply(colnames(smp), function(nm) {
if (!identical('ID', nm)) smp <- smp[order(smp[, nm]), , drop=FALSE];
fn <- paste(path.fig, paste('pca_', nm, '.png', sep=''), sep='/');
png(fn, w=1000, h=750);
cex <- min(5, max(0.5, 200/nrow(smp)));
cnm <- length(unique(smp[, nm]));
if (cnm==1) col <- col[1] else
if (cnm==2) col<-col[c(1, length(col))] else {
if (length(col)==2) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2]) else {
ncl <- length(unique(smp[, nm]));
if (ncl %% 2 == 1) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2], col[3]) else
col <- colorpanel(length(unique(smp[, nm]))+1, col[1], col[2], col[3])[-round(ncl)];
}
}
names(col) <- unique(smp[, nm]);
col <- col[as.character(smp[, nm])];
if (identical('ID', nm)) {
lbl <- 1:nrow(smp);
grp <- smp[, nm];
} else {
uni <- smp[!duplicated(smp[, nm]), nm];
lbl <- 1:length(uni);
names(lbl) <- uni;
lbl <- lbl[as.character(smp[, nm])];
grp <- paste0('[', lbl, '] - ', smp[, nm]);
}
PlotPCA(prcomp(t(mtrx[, rownames(smp)])), groups=grp, new.window = FALSE, cex=cex, col=col, label=lbl, legend=TRUE,
legend.single = identical('ID', nm), dimensions = c(plt$dimension[1], plt$dimension[2]));
if (dev.cur()!=1) dev.off();
fn;
});
name.yaml <- 'run_pca.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'awsomics', 'gplots');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path = 'figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
mtrx <- ImportTable(DownloadFile(yml$input$data, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
smpl <- smpl[rownames(smpl) %in% colnames(mtrx), , drop=FALSE];
mtrx <- mtrx[, rownames(smpl), drop=FALSE];
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
write.csv(smpl, paste(path.tbl, 'sample.csv', sep='/'));
# Filter by missing values
fil.ms <- as.integer(prms$filter$missing[1]);
if (fil.ms == 0 | is.na(fil.ms) | is.null(fil.ms)) mtrx <- mtrx[!is.na(rowMeans(mtrx)), , drop=FALSE] else
for (i in 1:ncol(mtrx)) {
d <- mtrx[, i];
d[is.na(d)] <- rowMeans(mtrx[, -i, drop=FALSE], na.rm = TRUE); # replace with mean of other samples
d[is.na(d)] <- mean(mtrx, na.rm=TRUE); # replace with global mean
mtrx[, i] <- d;
}
# Filter by variable means
fil.mn <- as.numeric(prms$filter$mean[1]);
if (!is.null(fil.mn) & length(fil.mn)>0) if (!is.na(fil.mn))
mtrx <- mtrx[rowMeans(mtrx)>=fil.mn, , drop=FALSE];
# Filter by nsd/outlier
fil.sd <- as.numeric(prms$filter$nsd);
if (!is.null(fil.sd) & length(fil.sd)>0) if (!is.na(fil.sd)) {
nsd <- sapply(1:ncol(mtrx), function(i) abs(mtrx[, i]-mean(mtrx[, -i]))/apply(mtrx[, -i, drop=FALSE], 1, sd));
mtrx <- mtrx[apply(nsd, 1, max)<=fil.sd, , drop=FALSE];
};
saveRDS(mtrx, paste(path.r, 'filtered.rds', sep='/'));
if (nrow(mtrx) < 3) stop("Error: cannot proceed with this analysis with less than 3 variables\n");
if (ncol(mtrx) < 3) stop("Error: cannot proceed with this analysis with less than 3 samples\n");
pca <- prcomp(t(mtrx));
smm <- summary(pca)$importance;
cov <- pca$x;
ldg <- pca$rotation;
saveRDS(pca, paste(path.r, 'pca.rds', sep='/'));
write.csv(ldg, paste(path.tbl, 'pca_loading.csv', sep='/'));
CreateDatatable(FormatNumeric(pca$rotation), paste(path.tbl, 'pca_loading.html', sep='/'));
write.csv(smm, paste(path.tbl, 'pca_summary.csv', sep='/'));
CreateDatatable(FormatNumeric(smm), paste(path.tbl, 'pca_summary.html', sep='/'));
write.csv(cov, paste(path.tbl, 'pca_covariance.csv', sep='/'));
CreateDatatable(FormatNumeric(cov), paste(path.tbl, 'pca_covariance.html', sep='/'));
wid <- max(4.8, min(8, 0.5*ncol(mtrx)));
pix <- paste0(100*wid, 'px');
tbl <- cov[, 1:min(8, ncol(cov))];
par(mar=c(5,5,2,2));
plot(1:ncol(smm), 100*smm[3, ], type='b', xlim=c(1, ncol(smm)), xaxs='i', ylim=c(0, 100), yaxs='i',
xaxt='n', ylab='Cumulative proportion of total variance (%)', xlab='', cex.lab=1.25,
col='#E74C3C', lwd=1.5, cex=0.75, pch=16);
axis(1, at=1:ncol(smm), label=paste0('PC', 1:ncol(smm)), las=3, cex.axis=min(1.25, 36/ncol(smm)));
par(mar=c(5,5,2,2));
bxp <- boxplot(cov, pch=18, cex=1, col='#3498DB', ylab='Sample covariance',
cex.lab=1.25, xaxt='n');
axis(1, at=1:ncol(smm), label=paste0('PC', 1:ncol(smm)), las=3, cex.axis=min(1.25, 36/ncol(smm)));
o1 <- sapply(1:ncol(cov), function(i) {
x <- bxp$stats[, i];
y <- cov[, i];
z <- y[y<x[1] | y>x[length(x)]];
f <- paste0('sample_pc', i, '.csv');
write.table(cbind(names(z), z), sep='\t', qu=FALSE, row=FALSE, col=FALSE, paste(path.tbl, f, sep='/'));
length(z);
});
l1 <- AddHref(o1, paste0('sample_pc', 1:ncol(cov), '.csv'));
par(mar=c(5,5,2,2));
bxp <- boxplot(ldg, pch=19, cex=1/3, col='#E74C3C', ylab='Variable loading',
cex.lab=1.25, xaxt='n');
axis(1, at=1:ncol(smm), label=paste0('PC', 1:ncol(smm)), las=3, cex.axis=min(1.25, 36/ncol(smm)));
o2 <- sapply(1:ncol(cov), function(i) {
x <- bxp$stats[, i];
y <- ldg[, i];
z <- y[y<x[1] | y>x[length(x)]];
f <- paste0('variable_pc', i, '.csv');
write.table(cbind(names(z), z), sep='\t', qu=FALSE, row=FALSE, col=FALSE, paste(path.tbl, f, sep='/'));
length(z);
});
l2 <- AddHref(o2, paste0('variable_pc', 1:length(o2), '.csv'));
res <- lapply(1:ncol(cov), function(i) {
x <- cov[, i];
y <- apply(mtrx, 1, function(z) residuals(lm(z ~ x)));
z <- t(y);
write.csv(z, paste0(path.tbl, '/residual_pc', i, '.csv'));
z;
});
names(res) <- paste('PC', 1:length(res));
saveRDS(res, paste(path.r, 'residual.rds', sep='/'));
tbl <- data.frame(Outlier_Sample=l1, High_Loading_Variable=l2,
Residual_Matrix=AddHref('residual', paste0('residual_pc', 1:length(l1), '.csv')),
stringsAsFactors = FALSE);
tbl <- cbind(t(smm), tbl);
rownames(tbl) <- paste0('PC', 1:nrow(tbl));
CreateDatatable(tbl, paste(path.tbl, 'download.html', sep='/'), caption = 'Click link to download list') -> x;
smp <- smpl[, !(colnames(smpl) %in% prms$exclude), drop=FALSE];
smp <- cbind(ID=rownames(smp), smp);
plt <- prms$plot;
col <- plt$color;
col <- lapply(col, function(c) pmax(0, pmin(1, c)));
col <- sapply(1:3, function(i) rgb(col[[1]][i], col[[2]][i], col[[3]][i]));
shp <- tolower(prms$plot$shape[1]);
pch <- 19;
if (shp=='square') pch <- 15 else if (shp=='triangle') pch <- 17 else if (shp=='diamond') pch <- 18;
fns <- sapply(colnames(smp), function(nm) {
if (!identical('ID', nm)) smp <- smp[order(smp[, nm]), , drop=FALSE];
fn <- paste(path.fig, paste('pca_', nm, '.png', sep=''), sep='/');
png(fn, w=1000, h=750);
cex <- min(5, max(0.5, 200/nrow(smp)));
cnm <- length(unique(smp[, nm]));
if (cnm==1) col <- col[1] else
if (cnm==2) col<-col[c(1, length(col))] else {
if (length(col)==2) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2]) else {
ncl <- length(unique(smp[, nm]));
if (ncl %% 2 == 1) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2], col[3]) else
col <- colorpanel(length(unique(smp[, nm]))+1, col[1], col[2], col[3])[-round(ncl)];
}
}
names(col) <- unique(smp[, nm]);
col <- col[as.character(smp[, nm])];
if (identical('ID', nm)) {
lbl <- 1:nrow(smp);
grp <- smp[, nm];
} else {
uni <- smp[!duplicated(smp[, nm]), nm];
lbl <- 1:length(uni);
names(lbl) <- uni;
lbl <- lbl[as.character(smp[, nm])];
grp <- paste0('[', lbl, '] - ', smp[, nm]);
}
PlotPCA(prcomp(t(mtrx[, rownames(smp)])), groups=grp, new.window = FALSE, cex=cex, col=col, label=lbl, legend=TRUE,
legend.single = identical('ID', nm), dimensions = c(plt$dimension[1], plt$dimension[2]));
if (dev.cur()!=1) dev.off();
fn;
});
fns <- paste('figure', TrimPath(fns), sep='/');
lns <- paste(paste('###', colnames(smp)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
sessionInfo();
name.yaml <- 'run_pca.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'awsomics', 'gplots');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); # <full.path.to.subfolder>=<subfolder.name>
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path = 'figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
## By default, before knitting this R Markdown file, the YAML file pairing it has been loaded.
## But, the developer can also provide the option to load the YAML file on the fly.
## So, the template can be run using the "Knit HTML" button in RStudio
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
mtrx <- ImportTable(DownloadFile(yml$input$data, path.input));
smpl <- ImportTable(DownloadFile(yml$input$sample, path.input));
smpl <- smpl[rownames(smpl) %in% colnames(mtrx), , drop=FALSE];
mtrx <- mtrx[, rownames(smpl), drop=FALSE];
for (i in 1:ncol(smpl)) smpl[[i]] <- as.vector(smpl[[i]]);
write.csv(smpl, paste(path.tbl, 'sample.csv', sep='/'));
# Filter by missing values
fil.ms <- as.integer(prms$filter$missing[1]);
if (fil.ms == 0 | is.na(fil.ms) | is.null(fil.ms)) mtrx <- mtrx[!is.na(rowMeans(mtrx)), , drop=FALSE] else
for (i in 1:ncol(mtrx)) {
d <- mtrx[, i];
d[is.na(d)] <- rowMeans(mtrx[, -i, drop=FALSE], na.rm = TRUE); # replace with mean of other samples
d[is.na(d)] <- mean(mtrx, na.rm=TRUE); # replace with global mean
mtrx[, i] <- d;
}
# Filter by variable means
fil.mn <- as.numeric(prms$filter$mean[1]);
if (!is.null(fil.mn) & length(fil.mn)>0) if (!is.na(fil.mn))
mtrx <- mtrx[rowMeans(mtrx)>=fil.mn, , drop=FALSE];
# Filter by nsd/outlier
fil.sd <- as.numeric(prms$filter$nsd);
if (!is.null(fil.sd) & length(fil.sd)>0) if (!is.na(fil.sd)) {
nsd <- sapply(1:ncol(mtrx), function(i) abs(mtrx[, i]-mean(mtrx[, -i]))/apply(mtrx[, -i, drop=FALSE], 1, sd));
mtrx <- mtrx[apply(nsd, 1, max)<=fil.sd, , drop=FALSE];
};
saveRDS(mtrx, paste(path.r, 'filtered.rds', sep='/'));
if (nrow(mtrx) < 3) stop("Error: cannot proceed with this analysis with less than 3 variables\n");
if (ncol(mtrx) < 3) stop("Error: cannot proceed with this analysis with less than 3 samples\n");
pca <- prcomp(t(mtrx));
smm <- summary(pca)$importance;
cov <- pca$x;
ldg <- pca$rotation;
saveRDS(pca, paste(path.r, 'pca.rds', sep='/'));
write.csv(ldg, paste(path.tbl, 'pca_loading.csv', sep='/'));
CreateDatatable(FormatNumeric(pca$rotation), paste(path.tbl, 'pca_loading.html', sep='/'));
write.csv(smm, paste(path.tbl, 'pca_summary.csv', sep='/'));
CreateDatatable(FormatNumeric(smm), paste(path.tbl, 'pca_summary.html', sep='/'));
write.csv(cov, paste(path.tbl, 'pca_covariance.csv', sep='/'));
CreateDatatable(FormatNumeric(cov), paste(path.tbl, 'pca_covariance.html', sep='/'));
wid <- max(4.8, min(8, 0.5*ncol(mtrx)));
pix <- paste0(100*wid, 'px');
tbl <- cov[, 1:min(8, ncol(cov))];
par(mar=c(5,5,2,2));
plot(1:ncol(smm), 100*smm[3, ], type='b', xlim=c(1, ncol(smm)), xaxs='i', ylim=c(0, 100), yaxs='i',
xaxt='n', ylab='Cumulative proportion of total variance (%)', xlab='', cex.lab=1.25,
col='#E74C3C', lwd=1.5, cex=0.75, pch=16);
axis(1, at=1:ncol(smm), label=paste0('PC', 1:ncol(smm)), las=3, cex.axis=min(1.25, 36/ncol(smm)));
par(mar=c(5,5,2,2));
bxp <- boxplot(cov, pch=18, cex=1, col='#3498DB', ylab='Sample covariance',
cex.lab=1.25, xaxt='n');
axis(1, at=1:ncol(smm), label=paste0('PC', 1:ncol(smm)), las=3, cex.axis=min(1.25, 36/ncol(smm)));
o1 <- sapply(1:ncol(cov), function(i) {
x <- bxp$stats[, i];
y <- cov[, i];
z <- y[y<x[1] | y>x[length(x)]];
f <- paste0('sample_pc', i, '.csv');
write.table(cbind(names(z), z), sep='\t', qu=FALSE, row=FALSE, col=FALSE, paste(path.tbl, f, sep='/'));
length(z);
});
l1 <- AddHref(o1, paste0('sample_pc', 1:ncol(cov), '.csv'));
par(mar=c(5,5,2,2));
bxp <- boxplot(ldg, pch=19, cex=1/3, col='#E74C3C', ylab='Variable loading',
cex.lab=1.25, xaxt='n');
axis(1, at=1:ncol(smm), label=paste0('PC', 1:ncol(smm)), las=3, cex.axis=min(1.25, 36/ncol(smm)));
o2 <- sapply(1:ncol(cov), function(i) {
x <- bxp$stats[, i];
y <- ldg[, i];
z <- y[y<x[1] | y>x[length(x)]];
f <- paste0('variable_pc', i, '.csv');
write.table(cbind(names(z), z), sep='\t', qu=FALSE, row=FALSE, col=FALSE, paste(path.tbl, f, sep='/'));
length(z);
});
l2 <- AddHref(o2, paste0('variable_pc', 1:length(o2), '.csv'));
res <- lapply(1:ncol(cov), function(i) {
x <- cov[, i];
y <- apply(mtrx, 1, function(z) residuals(lm(z ~ x)));
z <- t(y);
write.csv(z, paste0(path.tbl, '/residual_pc', i, '.csv'));
z;
});
names(res) <- paste('PC', 1:length(res));
saveRDS(res, paste(path.r, 'residual.rds', sep='/'));
tbl <- data.frame(Outlier_Sample=l1, High_Loading_Variable=l2,
Residual_Matrix=AddHref('residual', paste0('residual_pc', 1:length(l1), '.csv')),
stringsAsFactors = FALSE);
tbl <- cbind(t(smm), tbl);
rownames(tbl) <- paste0('PC', 1:nrow(tbl));
CreateDatatable(tbl, paste(path.tbl, 'download.html', sep='/'), caption = 'Click link to download list') -> x;
smp <- smpl[, !(colnames(smpl) %in% prms$exclude), drop=FALSE];
smp <- cbind(ID=rownames(smp), smp);
plt <- prms$plot;
col <- plt$color;
col <- lapply(col, function(c) pmax(0, pmin(1, c)));
col <- sapply(1:3, function(i) rgb(col[[1]][i], col[[2]][i], col[[3]][i]));
shp <- tolower(prms$plot$shape[1]);
pch <- 19;
if (shp=='square') pch <- 15 else if (shp=='triangle') pch <- 17 else if (shp=='diamond') pch <- 18;
fns <- sapply(colnames(smp), function(nm) {
if (!identical('ID', nm)) smp <- smp[order(smp[, nm]), , drop=FALSE];
fn <- paste(path.fig, paste('pca_', nm, '.png', sep=''), sep='/');
png(fn, w=1000, h=750);
cex <- min(5, max(0.5, 200/nrow(smp)));
cnm <- length(unique(smp[, nm]));
if (cnm==1) col <- col[1] else
if (cnm==2) col<-col[c(1, length(col))] else {
if (length(col)==2) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2]) else {
ncl <- length(unique(smp[, nm]));
if (ncl %% 2 == 1) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2], col[3]) else
col <- colorpanel(length(unique(smp[, nm]))+1, col[1], col[2], col[3])[-round(ncl)];
}
}
names(col) <- unique(smp[, nm]);
col <- col[as.character(smp[, nm])];
if (identical('ID', nm)) {
lbl <- 1:nrow(smp);
grp <- smp[, nm];
} else {
uni <- smp[!duplicated(smp[, nm]), nm];
lbl <- 1:length(uni);
names(lbl) <- uni;
lbl <- lbl[as.character(smp[, nm])];
grp <- paste0('[', lbl, '] - ', smp[, nm]);
}
PlotPCA(prcomp(t(mtrx[, rownames(smp)])), groups=grp, new.window = FALSE, cex=cex, col=col, label=lbl, legend=TRUE,
legend.single = identical('ID', nm), dimensions = c(plt$dimension[1], plt$dimension[2]));
if (dev.cur()!=1) dev.off();
fn;
});
fns <- paste('figure', TrimPath(fns), sep='/');
lns <- paste(paste('###', colnames(smp)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
sessionInfo();
names(pca)
pca$x
smp <- smpl[, !(colnames(smpl) %in% prms$exclude), drop=FALSE];
smp <- cbind(ID=rownames(smp), smp);
plt <- prms$plot;
col <- plt$color;
col <- lapply(col, function(c) pmax(0, pmin(1, c)));
col <- sapply(1:3, function(i) rgb(col[[1]][i], col[[2]][i], col[[3]][i]));
shp <- tolower(prms$plot$shape[1]);
pch <- 19;
if (shp=='square') pch <- 15 else if (shp=='triangle') pch <- 17 else if (shp=='diamond') pch <- 18;
fns <- sapply(colnames(smp), function(nm) {
# if (!identical('ID', nm)) smp <- smp[order(smp[, nm]), , drop=FALSE];
fn <- paste(path.fig, paste('pca_', nm, '.png', sep=''), sep='/');
png(fn, w=1000, h=750);
cex <- min(5, max(0.5, 200/nrow(smp)));
cnm <- length(unique(smp[, nm]));
if (cnm==1) col <- col[1] else
if (cnm==2) col<-col[c(1, length(col))] else {
if (length(col)==2) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2]) else {
ncl <- length(unique(smp[, nm]));
if (ncl %% 2 == 1) col <- colorpanel(length(unique(smp[, nm])), col[1], col[2], col[3]) else
col <- colorpanel(length(unique(smp[, nm]))+1, col[1], col[2], col[3])[-round(ncl)];
}
}
names(col) <- unique(smp[, nm]);
col <- col[as.character(smp[, nm])];
if (identical('ID', nm)) {
lbl <- 1:nrow(smp);
grp <- smp[, nm];
} else {
uni <- smp[!duplicated(smp[, nm]), nm];
lbl <- 1:length(uni);
names(lbl) <- uni;
lbl <- lbl[as.character(smp[, nm])];
grp <- paste0('[', lbl, '] - ', smp[, nm]);
}
PlotPCA(pca, groups=grp, new.window = FALSE, cex=cex, col=col, label=lbl, legend=TRUE,
legend.single = identical('ID', nm), dimensions = c(plt$dimension[1], plt$dimension[2]));
if (dev.cur()!=1) dev.off();
fn;
});
fns <- paste('figure', TrimPath(fns), sep='/');
lns <- paste(paste('###', colnames(smp)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
