if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'lightblue';
col[prd.x=='F' & prd.y=='F'] <- 'pink';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('pink', 'lightblue', 'darkgrey'),
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'lightblue';
col[prd.x=='F' & prd.y=='F'] <- 'pink';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('pink', 'lightblue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'lightblue';
col[prd.x=='F' & prd.y=='F'] <- 'pink';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', col=col, cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('pink', 'lightblue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'lightblue';
col[prd.x=='F' & prd.y=='F'] <- 'pink';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', col=col, cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('pink', 'lightblue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'blue';
col[prd.x=='F' & prd.y=='F'] <- 'red';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', col=col, cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('red', 'blue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
cbind(prd.x, prd.y)
xtabs(~prd.x+prd.y)
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'blue';
col[prd.x=='F' & prd.y=='F'] <- 'red';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', col=col, cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('red', 'blue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
title(main="Gender prediction", cex.main=1.5);
str(lm.x)
str(km.x)
predict(km.x)
?pamk
km.x <- pamk(colMeans(log2(ct.x+1)), krange=2, critout=TRUE);
str(km.x)
fitted(km.x)
fit(km.x)
ct1 <- norm[length(norm)][[1]]+1;
chrx <- prms$chromosome$x;
chry <- prms$chromosome$y;
id.x <- rownames(anno)[anno[, prms$annotation$chromosome]==chrx];
id.y <- rownames(anno)[anno[, prms$annotation$chromosome]==chry];
ct.x <- ct1[id.x, , drop=FALSE];
ct.y <- ct1[id.y, , drop=FALSE];
ct.x <- ct.x[rowSums(ct.x) > 0, , drop=FALSE];
ct.y <- ct.y[rowSums(ct.y) > 0, , drop=FALSE];
msg <- '';
if (nrow(ct.x)>=5 & nrow(ct.y)>=5) {
km.x <- pamk(colMeans(log2(ct.x+1)), krange=1:min(5, ncol(ct.x)));
km.y <- pamk(colMeans(log2(ct.y+1)), krange=1:min(5, ncol(ct.y)));
nc.x <- km.x$nc;
nc.y <- km.y$nc;
if (nc.x==2 & nc.y==2) msg <- 'Samples can be classified into 2 groups by both X and Y genes.' else if (nc.x==2)
msg <- 'Samples can be classified into 2 groups only by X genes.' else if (nc.y==2)
msg <- 'Samples can be classified into 2 groups only by Y genes.' else
msg <- 'Samples cannot be classified into 2 groups by neither X nor Y genes.'
fig.h <- 8;
} else {
msg <- 'There are not enough X/Y genes with detectable expression to make valid gender prediction.';
fig.h <- 1;
}
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'blue';
col[prd.x=='F' & prd.y=='F'] <- 'red';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', col=col, cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('red', 'blue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
title(main="Gender prediction", cex.main=1.5);
str(km.x)
tbl <- data.frame(Gender_Pred_X = x[, 1], Gender_Pred_Y = x[, 2], smpl[rownames(x), ]);
dim(tbl)
head(tbl)
x <- cbind(colMeans(log2(ct.x+1)), colMeans(log2(ct.y+1)));
if (nc.x==2) {
prd <- split(rownames(x), km.x$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 1]));
prd.x <- rep('F', nrow(x));
names(prd.x) <- rownames(x);
if (ms[1] > ms[2]) prd.x[prd[[2]]] <- 'M' else prd.x[prd[[1]]] <- 'M';
} else prd.x <- rep('NA', nrow(x));
if (nc.y==2) {
prd <- split(rownames(x), km.y$pamobject$clustering);
ms <- sapply(prd, function(prd) mean(x[prd, 2]));
prd.y <- rep('F', nrow(x));
names(prd.y) <- rownames(x);
if (ms[1] > ms[2]) prd.y[prd[[1]]] <- 'M' else prd.y[prd[[2]]] <- 'M';
} else prd.y <- rep('NA', nrow(x));
col <- rep('darkgrey', nrow(x));
col[prd.x=='M' & prd.y=='M'] <- 'blue';
col[prd.x=='F' & prd.y=='F'] <- 'red';
par(mar=c(5,5,2,2));
plot(x[, 1], x[, 2], pch='*', col=col, cex=2, xlab="Log2(Read_Count+1), average of X genes",
ylab="Log2(Read_Count+1), average of Y genes", cex.lab=1.25);
legend('topright', pch='*', col=c('red', 'blue', 'darkgrey'), bty='n',
legend=c('Predicted to be female', 'Predicted to be male', 'Undetermined'));
title(main="Gender prediction", cex.main=1.5);
tbl <- data.frame(Mean_X_Genes = x[, 1], Gender_Pred_X = prd.x, Mean_Y_Genes = x[, 2],
Gender_Pred_Y = prd.y, smpl[rownames(x), ]);
tbl
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome %in% atsm], , drop=FALSE];
dim(ct1)
dim(anno)
atsm
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE];
dim(e)
plot(hclust(as.dist(1-cor(e, , drop=FALSE]))), xlab='', sub='', ylab='1 - correlation coefficient', main='Hierarchical clustering using all autosomal genes');
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE];
e <- e[rowSums(e) > 0, , drop=FALSE];
plot(hclust(as.dist(1-cor(log2(e+1)))), xlab='', sub='', ylab='1 - correlation coefficient', main='Hierarchical clustering using all autosomal genes');
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE];
e <- e[rowSums(e) > 0, , drop=FALSE];
plot(hclust(as.dist(1-cor(log2(e+1)))), xlab='', sub='', ylab='1 - correlation coefficient',
main='Hierarchical clustering using all autosomal genes', cex.lab=1.5);
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE];
e <- e[rowSums(e) > 0, , drop=FALSE];
plot(hclust(as.dist(1-cor(log2(e+1)))), xlab='', sub='', ylab='1 - correlation coefficient',
main='Hierarchical clustering using all autosomal genes', cex.lab=2);
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE];
e <- log2(e[rowSums(e) > 0, , drop=FALSE]+1);
plot(hclust(as.dist(1-cor(e))), xlab='', sub='', ylab='1 - correlation coefficient',
main='Hierarchical clustering using all autosomal genes', cex.lab=2);
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE];
e <- log2(e[rowSums(e) > 0, , drop=FALSE]+1);
plot(hclust(as.dist(1-cor(e))), xlab='', sub='', ylab='1 - correlation coefficient',
main='Hierarchical clustering using all autosomal genes', cex.lab=2);
pca<-prcomp(e);
PlotPCA(pca, smpl[, 1])->x;
dim(e)
head(e)
pca<-prcomp(e);
pca<-prcomp(e);
kable()
pca<-prcomp(e);
PlotPCA(pca, smpl[, 1])->x;
dim(smpl)
dim(e)
pca<-t(prcomp(e));
PlotPCA(pca, smpl[, 1])->x;
dim(e)
summary(e[, 1])
min(e[, 1])
atsm <- prms$chromosome$autosome;
atsm <- atsm[atsm %in% anno[, prms$annotation$chromosome]];
if (length(atsm) > 0) e <- ct1[anno[, prms$annotation$chromosome] %in% atsm, , drop=FALSE] else
e <- ct1;
dim(e)
e <- log2(e[rowSums(e) > 0, , drop=FALSE]+1);
dim(e)
dim(e)
plot(hclust(as.dist(1-cor(e))), xlab='', sub='', ylab='1 - correlation coefficient',
main='Hierarchical clustering using all autosomal genes', cex.lab=2);
PlotPCA(prcomp(t(e)), smpl[, 1])
lns <- sapply(colnames(smpl), function(nm) {
paste('`r PlotPCA(pca, smpl[,', nm, '])`', sep='');
})
lns
pca <- t(prcomp(e));
fns <- sapply(colnames(smpl), function(nm) {
fn <- paste(path.fig, paste('pca_', nm, '.pdf', sep=''), sep='/'); ;
pdf(fn, w=8, h=8);
PlotPCA(pca, smpl[, nm]);
dev.off();
fn;
});
smpl
pca <- t(prcomp(e));
fns <- sapply(colnames(smpl), function(nm) { print(nm);
fn <- paste(path.fig, paste('pca_', nm, '.pdf', sep=''), sep='/'); ;
pdf(fn, w=8, h=8);
PlotPCA(pca, smpl[, nm]);
dev.off();
fn;
});
nm <- 'Group'
PlotPCA(pca, smpl[, nm]);
pca <- t(prcomp(e));
pca <- prcomp(t(e));
pca <- prcomp(t(e));
fns <- sapply(colnames(smpl), function(nm) { print(nm);
fn <- paste(path.fig, paste('pca_', nm, '.pdf', sep=''), sep='/'); ;
pdf(fn, w=8, h=8);
PlotPCA(pca, smpl[, nm]);
dev.off();
fn;
});
pca <- prcomp(t(e));
fns <- sapply(colnames(smpl), function(nm) { print(nm);
fn <- paste(path.fig, paste('pca_', nm, '.pdf', sep=''), sep='/'); ;
pdf(fn, w=8, h=8);
PlotPCA(pca, smpl[, nm], new.window = FALSE);
dev.off();
fn;
});
fns
file.exists(fns)
?png
fns
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
plot(0)
CreateReport('rnaseq_sample.yaml')
?png
dev.cur()
args(PlotPCA)
args(PlotPCA)
CreateReport('rnaseq_sample.yaml')
rm(list=ls())
CreateReport('rnaseq_sample.yaml')
PlotPCA
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
dev.off()
dev.cur()
CreateReport('rnaseq_sample.yaml')
cex <- min(4, max(0.5, 64/ncol(e)));
col <- rainbow(length(unique(smpl[, nm])));
names(col) <- unique(smpl[, nm]);
col <- col[smpl[, nm]];
rainbow(4)
dev.cur()==1
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
rainbow(6)
CreateReport('rnaseq_sample.yaml')
plot(1:20, pch=19, col=rainbow(20))
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
rainbow(6)
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
rainbow
rainbow(6)
plot(1:6, pch=19, col=rainbow(6))
CreateReport('rnaseq_sample.yaml')
rainbow(6)
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
source('~/.active-rstudio-document', echo=TRUE)
fns
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fns
lns <- paste('###', nm), '\n', '\t- (`r ', fns, '`)');
lns <- c(paste('###', nm), '\n', paste('\t- (`r ', fns, '`)', sep=''), '\n');
lns <- c(paste('###', names(smpl)), '\n', paste('\t- (`r ', fns, '`)', sep=''), '\n');
lns
lns <- paste(paste('###', names(smpl)), '\n', paste('\t- (`r ', fns, '`)', sep=''), '\n');
lns
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
lns <- paste(paste('###', names(smpl)), '\n', paste('\t- ![](`r ', fns, '`)', sep=''), '\n');
lns
CreateReport('rnaseq_sample.yaml')
lns
lns <- paste(paste('###', names(smpl)), '\n\n', paste('  - ![](', fns, ')', sep=''), '\n\n');
lns
lns <- paste(paste('###', names(smpl)), '\n\n', paste('  - ![](', fns, ')', sep=''), '\n\n', sep='');
lns
CreateReport('rnaseq_sample.yaml')
lns <- paste(paste('###', names(smpl)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', sep='');
lns
CreateReport('rnaseq_sample.yaml')
lns <- paste(paste('###', names(smpl)), '\n\n', paste('![](', fns, ')', sep=''), '\n\n', collapse='');
lns
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
?pamk
fns
?hclust
names(count.all)
fn <- paste('count', names(count.all), sep='_')
fn
fn <- paste(fn, '.rds', sep='')
fn
for (i in 1:length(fn)) saveRDS(count.all[[i]], fn[i])
ln <- paste('    ', fn, sep='')
ln
fn
x <- rep(c('Unique', 'Multiple'), 4)
x
y <- rep(c('Paired', 'Unpaired'), each=2)
y
y <- c(y, y)
y
z <- rep(c('sense', 'antisense'), each=4)
x
y
z
z <- rep(c('Sense', 'Antisense'), each=4)
a <- paste(x, y, z, sep='_')
a
l <- paste(a, ': ', fn, sep='')
l
paste('    ', l, sep='')->l
l
writeLines(l, 'l.txt')
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
count.all <- lapply(yml$input$count, function(c) ImportTable);
names(count.all)
sapply(count.all, dim)
head(count.all[[1]])
yml$input$count
x <- readRDS('count_unpaired_multiple_antisense.rds')
dim(x)
count.all <- lapply(yml$input$count, function(c) ImportTable(DownloadFile(c)));
count.all <- lapply(yml$input$count, function(c) ImportTable(DownloadFile(c, path.input)));
sapply(count.all, dim)
rm(list=ls())
ls()
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
CreateReport('rnaseq_sample.yaml')
anno <- readRDS('anno_all.rds')
head(anno)
load("/Users/zhangz/Documents/RoCA/template/qc/rnaseq_sample/anno_full.rdata")
dim(anno)
anno[1:2, ]
table(anno[, 2])
anno <- anno[, c(1, 2, 5, 4)]
head(anno)
anno <- anno[, 1:3]
write.table(anno, 'anno.txt', sep='\t', qu=F, row=T, col=T)
load("/Users/zhangz/Documents/RoCA/template/qc/rnaseq_sample/count.rdata")
names(ct)
write.table(ct[[2]], 'count_sense.txt', sep='\t', qu=F, row=T, col=T)
cnm <- colnames(ct[[2]])
cnm
x <- rep(c('T1', 'T2'), c(5, 14))
x
y <- c(1:5, 1:14)
x
y
cnm <- paste(x, y, sep='_')
cnm
colnames(ct[[2]]) <- cnm
colnames(ct[[3]]) <- cnm
write.table(ct[[2]], 'count_sense.txt', sep='\t', qu=F, row=T, col=T)
write.table(ct[[3]], 'count_antisense.txt', sep='\t', qu=F, row=T, col=T)
dim(ct[[1]])
x
y
y <- rep(c('Untreated', 'Treated'), c(10, 9))
y
z <- paste(x, y, sep='_')
z
table(z)
s <- data.frame(Group=z, Type=x, Drug=y)
s
s <- data.frame(Group=z, Type=x, Drug=y, stringsAsFactors = FALSE)
rownames(s) <- colnames(ct[[2]])
s
write.table(s, 'sample.txt', sep='\t', qu=F, col=T, row=T)
dim(anno)
head(anno)
table(anno[, 2])
