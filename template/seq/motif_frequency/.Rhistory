colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
PlotPairDiffScatter(diff);
hit <- reportHit(mtf, seq, prms$reverse);
saveRDS(hit, paste0(path.r, '/all_hits.rds'));
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
PlotPairDiffScatter(diff);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=19, cex=2, col='#FF8888');
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
PlotPairDiffScatter(diff);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=19, cex=2, col='#FF8888');
args(PlotPairDiffScatter)
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
plot(diff, pch=19, cex=18);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=19, cex=2, col='#FF8888');
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
plot(diff, pch=18, cex=2);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=19, cex=2, col='#FF8888');
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
plot(diff, pch=18, cex=2, col='#88888888');
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=19, cex=2, col='#FF8888');
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
plot(diff, pch=18, cex=2, col='#88888888');
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=18, cex=2, col='#FF8888');
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
par(mar=c(5,5,2,2));
plot(diff, pch=18, cex=2, col='#88888888', xlim=range(diff), ylim=range(diff));
title(main=paste('Correlation coefficient =', round(cor(diff[, 1], diff[, 2]), 3)), cex.main=.15);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=18, cex=2, col='#FF8888');
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
colnames(diff) <- c('Expected frequency (%)', 'Observed frequency (%)');
par(mar=c(5,5,2,2));
plot(diff, pch=18, cex=2, col='#88888888', xlim=range(diff), ylim=range(diff), cex.lab=2);
title(main=paste('Correlation coefficient =', round(cor(diff[, 1], diff[, 2]), 3)), cex.main=1.5);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=18, cex=2, col='#FF8888');
dim(diff)
summary(diff)
range(diff)
range(diff)
reportHit <- function(seq0, seq1, rev_comp) {
bas <- strsplit(as.character(seq0), '')[[1]];
if (rev_comp) rev <- strsplit(as.character(reverseComplement(seq0)), '')[[1]];
len <- width(seq1);
eff <- len - length(seq0) + 1;
exp <- sapply(seq1, function(s) { # expected frequency
ttl <- alphabetFrequency(s);
frq <- ttl[bas]/sum(ttl);
exp <- exp((sum(log(frq))));
if (rev_comp & seq0!=reverseComplement(seq0)) {
frq <- ttl[rev]/sum(ttl);
exp <- exp + exp((sum(log(frq))));
} else exp;
});
hit <- lapply(vmatchPattern(seq0, seq1), start);
if (rev_comp & seq0!=reverseComplement(seq0)) {
hrv <- lapply(vmatchPattern(reverseComplement(seq0), seq1), start);
hit <- lapply(1:length(seq1), function(i) c(hit[[i]], -(len[i]-hrv[[i]]-length(seq0)+2)));
}
cnt <- sapply(hit, length);
obs <- cnt/(len-length(seq0)+1); # observed frequency
loc <- sapply(hit, function(x) mean(abs(x)));
pos <- loc/eff;
pvl <- sapply(1:length(seq1), function(i) poisson.test(cnt[i], eff[i], exp[i])$p.value);
stat <- cbind(length=len, count=cnt, expected=exp, observed=obs, ratio=obs/exp,
p_poisson=pvl, relative_position=pos);
list(stat=stat, hit=hit);
}
hit <- reportHit(mtf, seq, prms$reverse);
saveRDS(hit, paste0(path.r, '/all_hits.rds'));
stat <- hit[[1]];
diff <- 100*stat[, 3:4];
summary(diff)
stat <- hit[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=2, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(diff[, 1], diff[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=18, cex=2, col='#FF8888');
stat <- hit[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=2, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(diff[, 1], diff[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=18, cex=2, col='#FF8888');
abline(0, 1, lty=2, col='#8888FF');
stat <- hit[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=2, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(diff[, 1], diff[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(diff[high, 1], diff[high, 2], pch=18, cex=2, col='#FF8888');
abline(0, 1, lty=2, col='#8888FF', lwd=1.5);
stat <- hit[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(diff)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=2, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(diff[, 1], diff[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(freq[high, 1], freq[high, 2], pch=18, cex=2, col='#FF8888');
abline(0, 1, lty=2, col='#8888FF', lwd=1.5);
x <- readRDS("/Users/zhangz/Development/RoCA/template/seq/motif_frequency/examples/random_promoter/R/all_hits.rds")
stat <- x[[1]]
dim(stat)
head(stat)
summary(stat[, 3:4])
mtf
stat[1:2, ]
x <- readRDS("/Users/zhangz/Development/RoCA/template/seq/motif_frequency/examples/random_promoter/R/all_hits.rds")
stat <- x[[1]]
min(stat[, 6])
prms$motif
stat <- hit[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(freq)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=1.5, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(freq[, 1], freq[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(freq[high, 1], freq[high, 2], pch=18, cex=1.5, col='#FF8888');
abline(0, 1, lty=2, col='#8888FF', lwd=1.5);
if (prms$revserse)
l0 <- 'Both of the original and reverse-complemented sequence of the motif are included.' else l0 <- ''
stat <- hit[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(freq)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=1.5, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(freq[, 1], freq[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(freq[high, 1], freq[high, 2], pch=18, cex=1.5, col='#FF8888');
abline(0, 1, lty=2, col='#8888FF', lwd=1.5);
if (prms$reverse)
l0 <- 'Both of the original and reverse-complemented sequence of the motif were counted' else
l0 <- 'Only the original, not the reverse-complemented, sequence of the motif was counted';
CreateReport('oligomer_frequency.yaml')
dir()
setwd('../motif_frequency/')
dir()
CreateReport('motif_frequency.yaml')
CreateReport('motif_frequency.yaml')
loc <- hit[[2]];
head(loc)
head(loc)
head(stat)
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
len
pos <- unlist(loc)/len;
summary(pos)
pos <- abs(unlist(loc))/len;
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
hist(pos, freq = 100);
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(pos/10)]);
brk
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(length(pos)/10)]);
brk
length(pos)
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(10^6/10)]);
brk
brk <- min(brk[brk>=(min(10^6, 10*max(brk))/10)]);
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(10^6, 10*max(brk))/10)]);
brk
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
hist(pos, freq = brk, ylab='Count', xlab='');
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
hist(pos, freq = brk, ylab='Count', xlab='Position in sequences', main='');
par(mar=c(5,5,2,2));
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, freq = brk, ylab='Count', xlab='Position in sequences', main='');
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, freq = brk, ylab='Count', xlab='Position in sequences', main='', xaxs='i', col='#8888888');
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, freq = brk, ylab='Count', xlab='Position in sequences', main='', xaxs='i', col='#88888888');
length(pos)
brk <- c(5, 10, 20, 50, 100);
min(length(pos), 10*max(brk))/10)
min(length(pos), 10*max(brk))/10
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
brk
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, freq = brk, ylab='Count', xlab='Position in sequences', main='', xaxs='i', col='#88888888');
?hist
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, brk), ylab='Count', xlab='Position in sequences', main='',
xaxs='i', col='#88888888');
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', main='',
xaxs='i', col='#88888888');
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', main='',
xaxt='n', col='#88888888');
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', main='',
xaxt='n', col='#88888888');
axis(1, at=c(0, 0.5, 1), label=c('Start', 'Center', 'End'));
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', cex.lab=1.5,
main='', xaxt='n', col='#88888888');
axis(1, at=c(0, 0.5, 1), label=c('Start', 'Center', 'End'));
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', cex.lab=1.5,
main='', xaxt='n', xaxs='i', col='#88888888');
axis(1, at=c(0, 0.5, 1), label=c('Start', 'Center', 'End'));
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', cex.lab=1.5,
main='', xaxt='n', xaxs='i', yaxs='i', col='#88888888');
axis(1, at=c(0, 0.5, 1), label=c('Start', 'Center', 'End'));
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', cex.lab=1.5,
main='', xaxt='n', xaxs='i', yaxs='i', col='#88888888');
axis(1, at=c(0, 0.5, 1), label=c('Start', 'Center', 'End'));
CreateReport('motif_frequency.Rmd')
CreateReport('motif_frequency.yaml')
head(stat)
eff
len0 <- width(mtf);
len1 <- width(seq);
len0 <- length(mtf);
len1 <- width(seq);
len0
len1
t.test(stat[, 3], stat[, 4], paired=TRUE)
colMeans(stat[, 3], stat[, 4])
colSums(stat[, 3:4])
## Overall test
ttl0 <- sum((len1-len0+1)*stat[, 'expected']);
ttl1 <- sum(stat[, 'observed']);
ttl0
ttl1
## Overall test
ttl0 <- sum((len1-len0+1)*stat[, 'expected']);
ttl1 <- sum(stat[, 'count']);
ttl0
ttl1
len2 <- sum(len1-len0+1);
len0 <- length(mtf);
len1 <- width(seq);
len2 <- sum(len1-len0+1);
## Overall test
ttl0 <- sum((len1-len0+1)*stat[, 'expected']);
ttl1 <- sum(stat[, 'count']);
pvl1 <- poisson.test(ttl1, sum(len1-len0+1), ttl0/len2);
pvl1
ttl0
ttl1
CreateReport()
CreateReport("motif_frequency.yaml")
CreateReport("motif_frequency.yaml")
pos
min(pos)
max(pos)
x <- substr(seq, 1, 4)
x
table(x)
CreateReport("motif_frequency.yaml")
rm(list=ls())
name.yaml <- 'motif_frequency.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets',
'Biostrings', 'GenomicRanges', 'RoCA', 'awsomics');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table'); #
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE);
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml<-yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
home.url <- Link2Home(yml$home);
seq <- ImportVector(DownloadFile(yml$input$seq, path.input));
seq <- DNAStringSet(seq);
nms <- names(seq);
if (is.null(nms)) nms <- paste('Seq', 1:length(seq), sep='_');
ind <- which(is.na(nms) | nms=='');
if (length(ind) > 0) nms[ind] <- paste('Seq', ind, sep='_');
names(seq) <- nms;
wid <- width(seq);
names(wid) <- names(seq);
mtf <- DNAString(toupper(prms$motif));
saveRDS(seq, paste0(path.r, '/sequence.rds'));
frq <- alphabetFrequency(seq)[, 1:4];
gc  <- round(100*rowSums(frq[, 2:3])/rowSums(frq), 2);
cg1 <- sapply(gregexpr2('CG', seq), function(ind) length(ind[ind>0]));
cg2 <- sapply(gregexpr2('GC', seq), function(ind) length(ind[ind>0]));
cpg <- 100*(cg1+cg2)/(width(seq)-1);
tbl <- rbind(round(summary(wid), 1), round(summary(gc), 2));
rownames(tbl) <- c('Length (bp)', 'GC (%)');
reportHit <- function(seq0, seq1, rev_comp) {
bas <- strsplit(as.character(seq0), '')[[1]];
if (rev_comp) rev <- strsplit(as.character(reverseComplement(seq0)), '')[[1]];
len <- width(seq1);
eff <- len - length(seq0) + 1;
exp <- sapply(seq1, function(s) { # expected frequency
ttl <- alphabetFrequency(s);
frq <- ttl[bas]/sum(ttl);
exp <- exp((sum(log(frq))));
if (rev_comp & seq0!=reverseComplement(seq0)) {
frq <- ttl[rev]/sum(ttl);
exp <- exp + exp((sum(log(frq))));
} else exp;
});
hit <- lapply(vmatchPattern(seq0, seq1), start);
if (rev_comp & seq0!=reverseComplement(seq0)) {
hrv <- lapply(vmatchPattern(reverseComplement(seq0), seq1), start);
hit <- lapply(1:length(seq1), function(i) c(hit[[i]], -(len[i]-hrv[[i]]-length(seq0)+2)));
}
cnt <- sapply(hit, length);
obs <- cnt/(len-length(seq0)+1); # observed frequency
loc <- sapply(hit, function(x) mean(abs(x)));
pos <- loc/eff;
pvl <- sapply(1:length(seq1), function(i) poisson.test(cnt[i], eff[i], exp[i])$p.value);
fdr <- p.adjust(pvl, method='BH');
stat <- cbind(length=len, count=cnt, expected=exp, observed=obs, ratio=obs/exp,
p_poisson=pvl, fdr=fdr, relative_position=pos);
list(stat=stat, hit=hit);
}
hit <- reportHit(mtf, seq, prms$reverse);
saveRDS(hit, paste0(path.r, '/all_hits.rds'));
CreateDatatable(FormatNumeric(hit[[1]]), paste0(path.tbl, '/stat_sequence'));
len0 <- length(mtf);
len1 <- width(seq);
len2 <- sum(len1-len0+1);
## Overall test
ttl0 <- sum((len1-len0+1)*stat[, 'expected']);
hit <- reportHit(mtf, seq, prms$reverse);
saveRDS(hit, paste0(path.r, '/all_hits.rds'));
CreateDatatable(FormatNumeric(hit[[1]]), paste0(path.tbl, '/stat_sequence'));
stat <- hit[[1]];
len0 <- length(mtf);
len1 <- width(seq);
len2 <- sum(len1-len0+1);
## Overall test
ttl0 <- sum((len1-len0+1)*stat[, 'expected']);
ttl1 <- sum(stat[, 'count']);
pvl1 <- poisson.test(ttl1, sum(len1-len0+1), ttl0/len2)$p.value[[1]];
freq <- 100*stat[, 3:4];
mx   <- max(freq);
high <- rownames(freq)[stat[, 6]<=prms$plot$pvalue];
par(mar=c(5,5,2,2));
plot(freq[, 1], freq[, 2], pch=18, cex=1.5, col='#88888888', xlim=c(0, mx), ylim=c(0, mx), cex.lab=1.5,
xlab='Expected frequency (%)', ylab='Observed frequency (%)');
title(main=paste('Correlation coefficient =', round(cor(freq[, 1], freq[, 2]), 3)), cex.main=1.25);
if (length(high)>0) points(freq[high, 1], freq[high, 2], pch=18, cex=1.5, col='#FF8888');
abline(0, 1, lty=2, col='#8888FF', lwd=1.5);
if (prms$reverse)
l0 <- 'Both of the original and reverse-complemented sequence of the motif were counted' else
l0 <- 'Only the original, not the reverse-complemented, sequence of the motif was counted';
loc <- hit[[2]];
len <- rep(stat[, 'length'], sapply(loc, length));
pos <- abs(unlist(loc))/len;
brk <- c(5, 10, 20, 50, 100);
brk <- min(brk[brk>=(min(length(pos), 10*max(brk))/10)]);
par(mar=c(5,5,2,2));
hist(pos, breaks = seq(0, 1, 1/brk), ylab='Count', xlab='Position in sequences', cex.lab=1.5,
main='', xaxt='n', xaxs='i', yaxs='i', col='#88888888');
axis(1, at=c(0, 0.5, 1), label=c('Start', 'Center', 'End'));
summary(pos)
min(pos)
max(pos)
x <- unlist(loc)
x
table(x)
x <- abs(x)
table(x)
x
table(x)
pos <- (abs(unlist(loc))-1)/(len-len0);
table(pos)
summary(pos)
max(pos)
min(pos)
?ks.test
ks.test(pos, 'punif', 0, 1)
pvl2 <- ks.test(pos, 'punif', 0, 1)$p.value[[1]];
pvl2
cnt2 <- length(pos[pos[pos>=0.25 & pos<=0.75]]);
cnt2
pos
cnt2 <- length(pos[pos>=0.25 & pos<=0.75]);
cnt2
stat[1:2, ]
CreateReport('motif_frequency.yaml')
stat[1:2, ]
CreateReport('motif_frequency.yaml')
CreateReport('motif_frequency.yaml')
CreateReport('motif_frequency.yaml')
CreateReport('motif_frequency.yaml')
getwd()
CreateReport('motif_frequency.yaml')
ks.test(rnorm(10^6), 'punif')
