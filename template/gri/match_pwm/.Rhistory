local.max=TRUE
sampling=10000
pvalue=0.01
require("Biostrings");
require("parallel");
# PWM matrix
pwm.set <- lapply(pwm.set, function(pwm) if (is.character(pwm) | is.factor(pwm) | class(pwm)=='DNAStringSet') ConvertSeq2PWM(pwm) else pwm);
# Union sequences
if (is.character(subject.set)) subject.set <- DNAStringSet(subject.set);
seq.all <- BiocGenerics::unlist(subject.set);
# Make sure all sequences have names
nms <- names(subject.set);
if (is.null(nms)) nms <- paste('Seq', 1:length(subject.set), sep='_');
ind <- which(is.na(nms) | nms=='');
if (length(ind) > 0) nms[ind] <- paste('Seq', ind, sep='_');
names(subject.set) <- nms;
# Sequence break points
len <- width(subject.set);
end <- cumsum(len);
stt <- c(1, 1+end[-length(end)]);
rng <- Views(seq.all, start = stt, end = end);
# Minimal matching scores
frq <- colSums(alphabetFrequency(subject.set));
frq <- frq[1:4]/sum(frq);
rsc <- mclapply(pwm.set, function(pwm) {
s <- ScorePWMDist(pwm, frq=frq, num=sampling);
c <- s[min(ceiling(pvalue*length(s)), length(s))];
c <- floor(100*(c/maxScore(pwm)));
list(c, s);
}, mc.cores = num.cluster);
min.score <- as.vector(sapply(rsc, function(x) x[[1]]));
rsc <- lapply(rsc, function(x) x[[2]]);
########################################################################################
match.all <- mclapply(1:length(pwm.set), function(i) {
ScorePWMMatch(pwm.set[[i]], seq.all, both.strand = both.strand, local.max = local.max,
min.score = min.score[i], min.match = 1);
}, mc.cores = num.cluster);
########################################################################################
length(match.all)
i <- 1
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
length(score)
head(score)
length(score)
summary(score)
args(mcols)
?mcols
dim(m)
m
mcols(m)
m
qry
m
m
mcols(m)
min.score
min.match
min.score
pwm <- pwm.set[[1]]
s <- ScorePWMDist(pwm, frq=frq, num=sampling);
c <- s[min(ceiling(pvalue*length(s)), length(s))];
c <- floor(100*(c/maxScore(pwm)));
summary(c)
c
rsc <- mclapply(pwm.set, function(pwm) {
s <- ScorePWMDist(pwm, frq=frq, num=sampling);
c <- s[min(ceiling(pvalue*length(s)), length(s))];
c <- floor(100*(c/maxScore(pwm)));
list(c, s);
}, mc.cores = num.cluster);
hist(rsc[[1]][[2]])
score
summary(score)
summary(s)
maxScore(pwm)
devtools::install_github('zhezhangsh/Agri')
rm(yml)
source('~/.active-rstudio-document', echo=TRUE)
x <- length(match.all)
x
x <- match.all[[1]]
dim(x)
head(x)
x <- matches[[1]]
dim(x)
head(x)
x$pvalue
tbls <- lapply(1:length(match.all), function(i) {
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$score[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
t;
});
i <- 1
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$score[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
maxScore(pwm.set[[i]])
mcols(m)$score[qry]/100*maxScore(pwm.set[[i]])
mcols(m)$score[qry]
mcols(m)
devtools::install_local('~/Documents/Agri/')
rm(yml)
source('~/.active-rstudio-document', echo=TRUE)
x <- matches[[1]]
dim(x)
head(x)
summary(x$pvalue)
x
length(s)
str(s)
bg <- s[[2]]
hist(bg)
score
score <- score/100*maxScore(pwm.set[[1]])
score
hist(score)
ks.test(bg)
?ks.test
shapiro.test(bg)
length(bg)
length(bg[1:5000])
shapiro.test(bg[1:5000])
mean(bg)
sd(bg)
rnorm(10000, mean=mean(bg), sd=sd(bg))
a <- rnorm(10000, mean=mean(bg), sd=sd(bg))
hist(a)
qqplot(a, bg)
par(mfrow=c(1,1))
qqplot(a, bg)
abline(0, 1)
x <- sapply(1:100, function(i) mean(sample(bg, 100)))
x
hist(x)
sd(x)
sd(bg)
shapiro.test(x)
x <- sapply(1:1000, function(i) mean(sample(bg, 100)))
shapiro.test(x)
x <- sapply(1:5000, function(i) mean(sample(bg, 100)))
shapiro.test(x)
sd(x)
sd(bg)
sd(bg)/10
x <- sapply(1:5000, function(i) mean(sample(bg, 1000)))
sd(x)
x <- sapply(1:5000, function(i) mean(sample(bg, 10)))
sd(x)
mean(x)
mean(bg)
sd(bg)
sd(bg[1:5000])
scale(bg)->a
mean(a)
sd(a)
sd(bg[1:1000])
sd(sample(bg, 5000))
sd(sample(bg, 5000))
sd(sample(bg, 5000))
sd(sample(bg, 5000))
sd(sample(bg, 5000))
sd(bg[5001:10000])
sd(bg[1:5000])
mean(bg[1:5000])
mean(bg[1:5000 + 5000])
score
(score-mean(bg)) / sd(bg)
(score-mean(bg)) / sd(bg) ->z
summary(z)
pt(z)
pt(z, 10000)
pt(z[1], 10000)
z[1]
z <- sort(z)
head(z)
pt(z[1], 10000)
1- pt(z[1], 10000)
2*(1- pt(z[1], 10000))
2*(1- pt(z[length(z)], 10000))
head(matches[[1]])
?pt
bg <- sort(bg[!is.na(bg)]);
qt <- (score-mean(bg)) / sd(bg);
pv <- pt(qt, df=length(bg)-1, lower.tail=FALSE, log.p=TRUE);
summary(pv)
summary(qt)
bg <- sort(bg[!is.na(bg)]);
qt <- (score-mean(bg)) / sd(bg);
pv <- pt(qt, df=length(bg)-1, lower.tail=FALSE, log.p=TRUE);
pv <- e^pv*2;
bg <- sort(bg[!is.na(bg)]);
qt <- (score-mean(bg)) / sd(bg);
pv <- pt(qt, df=length(bg)-1, lower.tail=FALSE, log.p=TRUE);
pv <- exp(pv)*2;
summary(pv)
head(pv)
?Seq
?seq
qs <- seq(0, 1, length.out=1000)
qs
n <- 1000
qs <- qt(seq(0, 1, length.out=n));
qs <- qt(seq(0, 1, df=length(bg)-1, length.out=n));
qs <- qt(seq(0, 1, length.out=n), df=length(bg)-1);
summary(qs)
hist(qs)
seq(0, 1, length.out=n)
qs <- qt(seq(0, 1-1/n, length.out=n), df=length(bg)-1);
summary(qs)
qs <- qt(seq(1/n, 1-1/n, length.out=n), df=length(bg)-1);
summary(qs)
ps <- seq(0.0005, 0.9995, 0.001);
length(ps)
max(ps)
bg <- sort(bg[!is.na(bg)]);
ps <- seq(0.0005, 0.9995, 0.001);
qs <- qt(ps, df=length(bg)-1);
sc <- qs*sd(bg) + mean(bg);
summary(sc)
n <- 1000
ps <- seq(1/n/2, 1-1/n/2, 1/n);
length(ps)
head(ps)
qs <- qt(ps, df=length(bg)-1);
summary(qs)
head(ps)
sc <- qs*sd(bg) + mean(bg);
summary(sc)
qqplot(sc, score)->x
length(x)
head(x)
str(x)
length(score)
n <- len - ncol(pwm) + length(len);
n
len
ncol(pwm)
n <- len - ncol(pwm.set[[i]]) + length(len);
n
len
n <- sum(len) - ncol(pwm.set[[i]]) + length(len);
n
dim(T)
dim(t)
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
i <- 1
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
dim(t)
t
match.all <- mclapply(1:length(pwm.set), function(i) {
ScorePWMMatch(pwm.set[[i]], seq.all, both.strand = both.strand, local.max = local.max,
min.score = min.score[i], min.match = 1);
}, mc.cores = num.cluster);
########################################################################################
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
m
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
mcols(m)$percent[qry]
maxScore(pwm.set[[i]]
)
s
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*), s);
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]])
mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]])->score
bg <- s
bg <- sort(bg[!is.na(bg)]);
class(s)
str(s)
str(rsc)
rsc <- lapply(rsc, function(x) x[[2]]);
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
dim(t)
head(t)
s$pvalue
t$pvalue
p
n <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p <- seq(1/n/2, 1-1/n/2, 1/n);
p <- p[p<=max(pval)];
p
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- p0[p0<=max(pval)];
p1 <- t$pvalue;
names(p0) <- 'bg';
names(p1) <- 'sc';
ps <- sort(c(p0, p1));
head(ps)
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- p0[p0<=max(pval)];
p1 <- t$pvalue;
names(p0) <- rep('bg', length(p0));
names(p1) <- rep('sc', length(p1));
ps <- sort(c(p0, p1));
head(ps)
min(t$pvalue)
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
min(pval)
ScorePWMPvalue
devtools::install_local('~/Documents/DEGandMore/')
devtools::install_local('~/Documents/Agri/')
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
ScorePWMPvalue
m <- match.all[[i]];
s <- rsc[[i]];
olap  <- findOverlaps(m, rng, type='within');
qry   <- olap@queryHits;
sub   <- olap@subjectHits;
stts  <- start(rng)[sub];
mcol  <- mcols(m)[qry, ];
seqID <- names(subject.set)[sub];
stt   <- start(m)[qry] - stts + 1;
end   <- end(m)[qry] - stts + 1;
str   <- mcols(m)$strand[qry];
score <- mcols(m)$percent[qry];
pval  <- ScorePWMPvalue(mcols(m)$percent[qry]/100*maxScore(pwm.set[[i]]), s);
seqs  <- as.character(m)[qry];
seqs[str==-1] <- as.character(reverseComplement(DNAStringSet(seqs[str==-1])));
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- p0[p0<=max(pval)];
p1 <- t$pvalue;
names(p0) <- rep('bg', length(p0));
names(p1) <- rep('sc', length(p1));
ps <- sort(c(p0, p1));
head(ps)
nd <- which(names(ps) == 'bg');
head(nd)
length(nd)
(1:length(nd)) / nd
length(p0)
length(p0)/length(p1)
p <- t$pvalue
p0 <- t$pvalue
p1 <- c(p0, rep(1, n-length(p0)))
length(p1)
n
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- t$pvalue;
p1 <- c(p0, rep(1, n-nrow(t)));
q  <- p.adjust(p1, method='BH')[1:nrow(t)];
q
min(p0)
names(t)
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
# Calculate FDR
if (fdr) {
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- t$pvalue;
p1 <- c(p0, rep(1, n-nrow(t)));
t$fdr  <- p.adjust(p1, method='BH')[1:nrow(t)];
t <- t[, c(1, 2, 3, 4, 5, 6, 8, 7)];
}
p.adjust(p1, method='BH')[1:nrow(t)];
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- t$pvalue;
p1 <- c(p0, rep(1, n-nrow(t)));
t$fdr  <- p.adjust(p1, method='BH')[1:nrow(t)];
head(t)
t <- data.frame(seqID=seqID, start=stt, end=end, strand=str, score=score, pvalue=pval, seq=seqs, stringsAsFactors = FALSE);
t <- t[rev(order(t$score)), , drop=FALSE];
rownames(t) <- 1:nrow(t);
n  <- sum(len) - ncol(pwm.set[[i]]) + length(len);
p0 <- seq(1/n/2, 1-1/n/2, 1/n);
p0 <- t$pvalue;
p1 <- c(p0, rep(1, n-nrow(t)));
t$fdr  <- round(p.adjust(p1, method='BH')[1:nrow(t)], 4);
t <- t[, c(1, 2, 3, 4, 5, 6, 8, 7)];
t[1:2, ]
devtools::install_local('~/Documents/Agri')
rm(yml)
source('~/.active-rstudio-document', echo=TRUE)
head(matches[[1]])
head(matches[[2]])
##################################################################################################
matches <- ScorePWMWrapper(pwm, seq, prms$cluster, prms$matching$reverse, prms$matching$exclusive,
prms$matching$resampling, prms$matching$pvalue, fdr=TRUE);
##################################################################################################
saveRDS(matches, paste(path.r, 'matches_all.rds', sep='/'));
head(matches[[1]])
head(matches[[2]])
head(matches[[3]])
head(matches[[4]])
head(matches[[5]])
head(matches[[6]])
head(matches[[7]])
head(matches[[8]])
head(matches[[9]])
x <- do.call('rbind', matches)
dim(x)
x <- x[order(x[, 7]), ]
head(x)
