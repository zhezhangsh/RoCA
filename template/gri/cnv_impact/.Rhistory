CreateReport('cnv_impact.yaml')
CreateReport('cnv_impact.yaml')
CreateReport('cnv_impact.yaml')
source('~/.active-rstudio-document', echo=TRUE)
dim(cnv)
dim(cnt)
dim(mtr)
dim(mtr0)
head(mtr0)
s
dim(s)
cns <- ImportTable(DownloadFile(yml$input$cnv, path.input));
reg <- ImportTable(DownloadFile(yml$input$region, path.input));
cnt <- as.matrix(ImportTable(DownloadFile(yml$input$count, path.input)));
if (is.null(yml$input$annotation)) ann<-NA else ann <- ImportTable(DownloadFile(yml$input$annotation, path.input));
dim(cns)
table(cns[, 4])
x <- readRDS('cnv_all.rds')
names(x)
names(x)->y
sub('-T$', '', names(x))
sub('-T$', '', names(x))->names(x)
names(x)
smp <- readRDS('sample.txt')
smp
smp[1:2, ]
smp
z <- rownames(smp)[1:5]
z
intersect(z, y)
y
z
names(x)
names(x)->y
intersect(z, y)
intersect(z, y)->a
a <- x[a]
sapply(a, dim)
sapply(a, length)
b<-lapply(a, as.data.frame)
b<-do.call('rbind', b)
b<-b[, c(1, 2, 3, 6, 8)]
head(b)
table(b[, 4])
dim(cnt)
b[, 4]<-sub('-T', '', b[, 4])
head(b[, 4])
table(b[, 4])
intersect(b[, 4], colnames(cnt))
rownames(b)<-unlist(lapply(a, names))
head(b)
rownames(b)<-paste('cnv', rownames(b), sep='_')
head(b)
write.table(b, 'cnv.txt', sep='\t', qu=F, col=T, row=T)
dim(b)
head(b)
write.table(b, 'cnv_atrt.txt', sep='\t', qu=F, col=T, row=T)
yml<-yaml.load_file('cnv_impact.yaml');   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, c('input', 'R', 'figure', 'table'));
path <- yml$output;
path.r <- f['R'];
path.tbl <- f['table'];
path.fig <- f['figure'];
path.input <- f['input'];
## URL to project home
## Use this line to add a link to project home in
cns <- ImportTable(DownloadFile(yml$input$cnv, path.input));
reg <- ImportTable(DownloadFile(yml$input$region, path.input));
cnt <- as.matrix(ImportTable(DownloadFile(yml$input$count, path.input)));
if (is.null(yml$input$annotation)) ann<-NA else ann <- ImportTable(DownloadFile(yml$input$annotation, path.input));
saveRDS(cns, paste(path.r, 'copy_number.rds', sep='/'));
saveRDS(reg, paste(path.r, 'region.rds', sep='/'));
saveRDS(cnt, paste(path.r, 'count.rds', sep='/'));
nm <- intersect(unique(cns[, 4]), colnames(cnt));
if (length(nm) < 3) stop('Error: only ', length(smp), ' samples with both CNVs and read count data; require at least 3.\n');
cns <- cns[cns[, 4] %in% nm, , drop=FALSE];
cnt <- cnt[, colnames(cnt) %in% nm, drop=FALSE];
cnt.ttl <- cnt;
if (prms$rescale) cnt.ttl0 <- t(t(cnt.ttl) / calcNormFactors(cnt.ttl));
reg <- reg[, 1:min(ncol(reg), 5)];
gr <- GRanges(reg[[1]], IRanges(reg[[2]], reg[[3]]));
names(gr) <- rownames(reg);
if (ncol(reg) > 3) elementMetadata(gr) <- reg[, 4:ncol(reg), drop=FALSE];
cn <- GRanges(cns[[1]], IRanges(cns[[2]], cns[[3]]));
names(cn) <- rownames(cns);
cn$copy <- cns [, 5];
cn <- split(cn, cns[, 4]);
mp <- lapply(cn, function(cn) MapCNV2Feature(cn, gr, 'copy', names(elementMetadata(gr))[1], names(elementMetadata(gr))[2]));
cp <- lapply(mp, function(mp) if (ncol(reg) > 3) mp[[length(mp)]]$copy else mp$feature$copy);
id <- unique(unlist(lapply(cp, names), use.names=FALSE));
cnv <- sapply(cp, function(cp) cp[id]);
rownames(cnv) <- id;
fea2cnv <- lapply(mp, function(m) if (ncol(reg)>3) m[[length(m)]]$map2cnv else m$map2cnv);
cnv2fea <- lapply(fea2cnv, function(m) lapply(split(rep(names(m), sapply(m, length)), unlist(m, use.names=FALSE)), unique));
saveRDS(mp, paste(path.r, 'mapped.rds', sep='/'));
saveRDS(cnv, paste(path.r, paste(prms$feature, '_copy_all.rds', sep=''), sep='/'));
dim(cnv)
dim(cnt)
nm <- intersect(unique(cns[, 4]), colnames(cnt));
if (length(nm) < 3) stop('Error: only ', length(smp), ' samples with both CNVs and read count data; require at least 3.\n');
cns <- cns[cns[, 4] %in% nm, , drop=FALSE];
cnt <- cnt[, colnames(cnt) %in% nm, drop=FALSE];
cnt.ttl <- cnt;
if (prms$rescale) cnt.ttl0 <- t(t(cnt.ttl) / calcNormFactors(cnt.ttl));
reg <- reg[, 1:min(ncol(reg), 5)];
gr <- GRanges(reg[[1]], IRanges(reg[[2]], reg[[3]]));
names(gr) <- rownames(reg);
if (ncol(reg) > 3) elementMetadata(gr) <- reg[, 4:ncol(reg), drop=FALSE];
cn <- GRanges(cns[[1]], IRanges(cns[[2]], cns[[3]]));
names(cn) <- rownames(cns);
cn$copy <- cns [, 5];
cn <- split(cn, cns[, 4]);
mp <- lapply(cn, function(cn) MapCNV2Feature(cn, gr, 'copy', names(elementMetadata(gr))[1], names(elementMetadata(gr))[2]));
dim(mtr)
head(mtr)
dim(mtr0)
dim(cnt)
# summarize CNVs
path.cnv <- paste(path.tbl, 'cnv', sep='/');
if (!dir.exists(path.cnv)) dir.create(path.cnv);
tbls <- lapply(names(cn), function(nm) {
c <- cn[[nm]];
t <- BiocGenerics::as.data.frame(c);
t <- cbind(t[, 1:3], size=width(c), copy=t[, 6]);
t <- cbind(t, sapply(cnv2fea[[nm]][rownames(t)], length));
colnames(t) <- c('Chromosome', 'Start', 'End', 'Size', 'Copy', paste('Num', prms$feature, sep='_'));
fn <- CreateDatatable(t, paste(path.cnv, nm, sep='/'), caption=paste('CNVs of', nm));
fn <- as.vector(TruncatePathPrefix(fn, path.tbl))[1];
s <- sapply(c(0, 1, 3, 4), function(i) length(which(t[,5]==i)));
s <- c(nrow(t), sum(t[, 4])/10^6, 100*length(which(t[,6]>0))/nrow(t), mean(t[, 6]), s, length(which(t[,5]>4)));
s <- c(s, c(median(t[, 4]), mean(t[, 4]), min(t[, 4]), max(t[,4])));
list(file=fn, stat=s);
});
fn <- sapply(tbls, function(x) x[[1]]);
stat.cnv <- t(sapply(tbls, function(x) x[[2]]));
rownames(stat.cnv) <- names(cn);
colnames(stat.cnv) <- c('Num_CNV', 'Size_Total(Mb)',
paste('Mapped_to_', prms$feature, '(%)', sep=''), paste('Num_', prms$feature, '_per_CNV', sep=''),
'Copy_0', 'Copy_1', 'Copy_3', 'Copy_4', 'Copy_5+', 'Size_Median', 'Size_Mean', 'Size_Min', 'Size_Max');
t <- data.frame(AddHref(rownames(stat.cnv), fn), stat.cnv, stringsAsFactors = FALSE);
colnames(t) <- c('Sample_ID', colnames(stat.cnv));
saveRDS(stat.cnv, paste(path.r, 'summary_cnv.rds', sep='/'));
CreateDatatable(t, paste(path.tbl, 'summary_cnv.html', sep='/'), rownames = FALSE, caption = 'Summary of CNV mapping');
ct <- colSums(stat.cnv[, paste('Copy', c(0, 1, 3, 4, '5+'), sep='_')]);
names(ct) <- c('0 copy', '1 copy', '3 copies', '4 copies', '5+ copies');
pie(ct, col=rainbow(length(ct)), cex=1.5);
n2 <- apply(cnv, 1, function(x) length(x[x!=2]));
s <- t(apply(cnv, 2, function(c) {
n <- length(c[c!=2]);
pct <- round(100*n/length(c), 3);
ns <- sapply(c(0, 1, 3, 4), function(i) length(c[c==i]));
ns <- c(ns, length(c[c>4 & c==round(c)]));
ns <- c(ns, length(c[c!=round(c)]));
c(n, pct, ns);
}));
colnames(s) <- c('Num_Overlap_CNV', 'Pct_Overlap_CNV(%)', 'Copy_0', 'Copy_1', 'Copy_3', 'Copy_4', 'Copy_5+', 'Copy_Partial');
saveRDS(s, paste(path.r, paste('summary_', prms$feature, '.rds', sep=''), sep='/'));
t <- data.frame(Sample_ID=rownames(s), s, stringsAsFactors = FALSE);
colnames(t) <- c('Sample_ID', colnames(s));
fn1 <- CreateDatatable(t, paste(path.tbl, paste('summary_', prms$feature, '.html', sep=''), sep='/'), rownames = FALSE, caption = paste('Summary of', prms$feature, 'copy number'));
if (identical(NA, ann)) t <- cnv else t <- cbind(ann[rownames(cnv), ], cnv);
rownames(t) <- rownames(cnv);
fn2 <- CreateDatatable(t, paste(path.tbl, paste('full_', prms$feature, '.html', sep=''), sep='/'), rownames = TRUE, caption = paste('Full table of', prms$feature, 'copy number'));
dim(mtr)
dim(cnv)
dim(cnt)
colnames(cnv)
colnames(cnt)
ct <- colSums(s[, 3:ncol(s)]);
names(ct) <- c('0 copy', '1 copy', '3 copies', '4 copies', '5+ copies', 'Partial');
pie(ct, col=rainbow(length(ct)), cex=1);
n0 <- nrow(cnv);
lns <- paste('  - There are totally ', n0, ' ', prms$feature, 's mapped to CNVs.', sep='')
# common id
cnv.ttl <- cnv;
mtr <- cnt[rownames(cnt) %in% rownames(cnv), , drop=FALSE];
cnv <- cnv[rownames(mtr), , drop=FALSE];
n1 <- nrow(cnv);
lns <- c(lns, paste('  -', n1, 'of them have measured', prms$feature, prms$measurement, 'data.'));
#############################
## Filtering
# remove those with missing values
if (prms$remove$missing) { # Remove features with missing value
n <- apply(cbind(mtr, cnv), 1, function(x) length(x[is.na(x)]));
if (min(n) != 0) stop('Error: all ', prms$feature, 's contain at least 1 missing value in either data matrix; none left\n');
mtr <- mtr[n==0, , drop=FALSE];
cnv <- cnv[n==0, , drop=FALSE];
n2 <- nrow(cnv);
lns <- c(lns, paste('  -', n2 , 'of the rest have no missing values.'));
} else lns <- c(lns, ' - No filltering of missing values.');
# remove those with all 0s in all samples
if (prms$remove$allzero) { # Remove features with all 0s (such as 0 read count in RNA-seq data)
rng <- apply(mtr, 1, function(x) range(x, na.rm = TRUE));
mtr <- mtr[rng[1, ]!=0 | rng[2, ]!=0, , drop=FALSE];
if (nrow(mtr) == 0) stop('Error: ', prms$measurement, ' value of all ', prms$feature, 's contain just 0s; none left\n');
cnv <- cnv[rownames(mtr), , drop=FALSE];
n3 <- nrow(cnv);
lns <- c(lns, paste('  -', n3 , 'of the rest have at least 1 non-zero value in all samples.'));
} else lns <- c(lns, ' - No filltering of all zeros.');
# remove those with low read count
if (prms$remove$low) { # Remove features with all 0s (such as 0 read count in RNA-seq data)
mtr <- filtered.data(mtr, factor = as.factor(colnames(mtr)), norm = FALSE);
if (nrow(mtr) == 0) stop('Error: no ', prms$feature, ' left after removing those with low count\n');
cnv <- cnv[rownames(mtr), , drop=FALSE];
n4 <- nrow(cnv);
lns <- c(lns, paste('  -', n4 , 'of the rest have enough counts for further analysis.'));
} else lns <- c(lns, ' - No filltering by low counts.');
if (nrow(cnv) == 0) stop('Error: no ', prms$feature, ' left after filtering.\n');
sd <- apply(cnv, 1, sd);
if (max(sd) == 0) stop('Error: no ', prms$feature, ' has copy number variation between samples; no analysis can be done\n');
dim(mtr)
dim(cnv)
CreateReport('cnv_impact.yaml')
dim(cnv)
table(cnv[, 1])
table(round(cnv[, 1]))
dim(cns)
table(cns[, 5])
n0 <- nrow(cnv);
lns <- paste('  - There are totally ', n0, ' ', prms$feature, 's mapped to CNVs.', sep='')
# common id
cnv.ttl <- cnv;
mtr <- cnt[rownames(cnt) %in% rownames(cnv), , drop=FALSE];
cnv <- cnv[rownames(mtr), , drop=FALSE];
n1 <- nrow(cnv);
lns <- c(lns, paste('  -', n1, 'of them have measured', prms$feature, prms$measurement, 'data.'));
#############################
## Filtering
# remove those with missing values
if (prms$remove$missing) { # Remove features with missing value
n <- apply(cbind(mtr, cnv), 1, function(x) length(x[is.na(x)]));
if (min(n) != 0) stop('Error: all ', prms$feature, 's contain at least 1 missing value in either data matrix; none left\n');
mtr <- mtr[n==0, , drop=FALSE];
cnv <- cnv[n==0, , drop=FALSE];
n2 <- nrow(cnv);
lns <- c(lns, paste('  -', n2 , 'of the rest have no missing values.'));
} else lns <- c(lns, ' - No filltering of missing values.');
# remove those with all 0s in all samples
if (prms$remove$allzero) { # Remove features with all 0s (such as 0 read count in RNA-seq data)
rng <- apply(mtr, 1, function(x) range(x, na.rm = TRUE));
mtr <- mtr[rng[1, ]!=0 | rng[2, ]!=0, , drop=FALSE];
if (nrow(mtr) == 0) stop('Error: ', prms$measurement, ' value of all ', prms$feature, 's contain just 0s; none left\n');
cnv <- cnv[rownames(mtr), , drop=FALSE];
n3 <- nrow(cnv);
lns <- c(lns, paste('  -', n3 , 'of the rest have at least 1 non-zero value in all samples.'));
} else lns <- c(lns, ' - No filltering of all zeros.');
# remove those with low read count
if (prms$remove$low) { # Remove features with all 0s (such as 0 read count in RNA-seq data)
mtr <- filtered.data(mtr, factor = as.factor(colnames(mtr)), norm = FALSE);
if (nrow(mtr) == 0) stop('Error: no ', prms$feature, ' left after removing those with low count\n');
cnv <- cnv[rownames(mtr), , drop=FALSE];
n4 <- nrow(cnv);
lns <- c(lns, paste('  -', n4 , 'of the rest have enough counts for further analysis.'));
} else lns <- c(lns, ' - No filltering by low counts.');
if (nrow(cnv) == 0) stop('Error: no ', prms$feature, ' left after filtering.\n');
sd <- apply(cnv, 1, sd);
if (max(sd) == 0) stop('Error: no ', prms$feature, ' has copy number variation between samples; no analysis can be done\n');
if (prms$rescale) mtr0 <- cnt.ttl0[rownames(mtr), , drop=FALSE] else mtr0 <- cnt.ttl[rownames(mtr), , drop=FALSE];
mtr1 <- log2(mtr0+1);
s <- t(sapply(1:nrow(mtr), function(i) {
corr <- cor.test(mtr1[i, ], cnv[i, ]);
c(corr$estimate, corr$p.value, min(cnv[i, ]), max(cnv[i, ]), mean(cnv[i, ]));
}));
s <- cbind(s[, 1:2], p.adjust(s[, 2], method='fdr'), s[, 3:ncol(s)]);
dimnames(s)<-list(rownames(cnv), c('Corr', 'pCorr', 'FDR', 'CNV_Min', 'CNV_Max', 'CNV_Mean'));
s <- s[order(s[, 2]), ];
saveRDS(s, file=paste(path.r, 'corr2cnv.rds', sep='/'));
if (identical(NA, ann)) t <- s else t <- cbind(ann[rownames(s), ], s);
saveRDS(s, paste(path.r, paste('summary_', prms$feature, '.rds', sep=''), sep='/'));
if (identical(NA, ann)) t <- s else t <- cbind(ann[rownames(s), ], s);
fn <- CreateDatatable(t, paste(path.tbl, 'corr2cnv.html', sep='/'), rownames = TRUE, caption = paste('Correlation between', prms$feature, 'and copy number'));
par(mfrow=c(2, 2), mar=c(5,5,2,2));
s0 <- s[!is.na(s[,1]), ];
hist(s0[, 1], col='lightgrey', main='Correlation to copy number', xlab='Correlation coefficient',
ylab=paste('Number of ', prms$feature, 's', sep=''), cex.lab=2, xlim=c(-1, 1),);
hist(s0[, 2], br=100, col='lightgrey', main='Correlation to copy number', xlab='P value',
ylab=paste('Number of ', prms$feature, 's', sep=''), cex.lab=2, xlim=c(0, 1));
id1 <- rownames(s0)[s0[,1]==max(s0[, 1])];
id2 <- rownames(s0)[s0[,1]==min(s0[, 1])];
plot(cnv[id1, ], mtr0[id1, ], pch=8, cex=1.5, col='#0000FF88', main=paste(prms$feature, id1), cex.main=1.5, cex.lab=2,
ylim=c(0, max(mtr0[id1, ])), xlim=c(0, max(3, max(cnv[id1, ]))),
xlab='Copy number', ylab=paste(prms$feature, prms$measurement));
abline(lm(mtr0[id1, ]~cnv[id1, ]), lty=2);
plot(cnv[id2, ], mtr0[id2, ], pch=8, cex=1.5, col='#0000FF88', main=paste(prms$feature, id2), cex.main=1.5, cex.lab=2,
ylim=c(0, max(mtr0[id2, ])), xlim=c(0, max(3, max(cnv[id2, ]))),
xlab='Copy number', ylab=paste(prms$feature, prms$measurement));
abline(lm(mtr0[id2, ]~cnv[id2, ]), lty=2);
q1 <- apply(mtr, 2, function(x) summary(x)[2]);
# 1/2/3 copies vs. 2 copies
ratios <- lapply(1:3, function(c) {
print(c);
lapply(1:ncol(mtr0), function(i) {
lapply((1:ncol(mtr0))[-i], function(j) {
x <- mtr0[cnv[,i]==c & cnv[,j]==2, c(i, j), drop=FALSE];
x <- x[x[,1]>= c/2*q1[i] & x[,2]>=q1[j], , drop=FALSE];
x[,1]/x[,2];
})
})
});
ms <- sapply(ratios, function(c) {
sapply(c, function(c) mean(log(unlist(c, use.names=FALSE)), trim=0.1, na.rm=TRUE));
});
dimnames(ms) <- list(colnames(mtr0), c('1 copy', '2 copies', '3 copies'));
m1 <- round(100*exp(mean(ms[, 1]-ms[, 2])) - 100, 3);
m3 <- round(100*exp(mean(ms[, 3]-ms[, 2])) - 100, 3);
saveRDS(100*(exp(ms)-1), paste(path.r, 'average_percent.rds', sep='/'));
tbl <- round(100*(exp(ms)-1), 2);
CreateDatatable(tbl, paste(path.tbl, 'average_change_by_sample.html', sep='/'),
caption = 'Average change of each sample comparing to diploid samples (%)');
x <- mtr0;
x[cnv!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
sd <- apply(x, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
stat2 <- cbind(N=n, Mean=m, SD=sd);
# Compare each sample to all other 2-copy samples
stats <- lapply(1:ncol(cnv), function(i) {
x <- mtr0[, -i, drop=FALSE];
adj <- apply(x, 2, function(x) x*mean(mtr0[, i])/mean(x));
x[cnv[, -i]!=2] <- NA;
adj[cnv[, -i]!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
m.adj <- rowMeans(adj, na.rm=TRUE);
sd <- apply(adj, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
chg <- (mtr0[, i] - m.adj) / m.adj * 100
s <- cbind(Num_Diploid=n, Mean_Diploid=m.adj, SD=sd);
cbind(Copy=cnv[, i], Count=mtr0[, i], Change=chg, s);
});
names(stats) <- colnames(cnv);
s <- lapply(stats, function(s) {
s <- s[s[,1]!=2, , drop=FALSE];
data.frame(ID=rownames(s), s);
});
tbl <- data.frame(Sample_ID=rep(colnames(cnv), sapply(s, nrow)), do.call('rbind', s), stringsAsFactors = FALSE);
tbl <- tbl[tbl$Num_Diploid!=0 & !is.na(tbl$Mean_Diploid), , drop=FALSE];
if (!identical(NA, ann)) tbl <- cbind(tbl, ann[tbl$ID, ]);
CreateDatatable(tbl, paste(path.tbl, 'CNV_vs_Diploid.html', sep='/'), rownames = FALSE);
ms
q1 <- apply(mtr, 2, function(x) summary(x)[2]);
# 1/2/3 copies vs. 2 copies
ratios <- lapply(1:3, function(c) {
print(c);
lapply(1:ncol(mtr0), function(i) {
lapply((1:ncol(mtr0))[-i], function(j) {
x <- mtr0[cnv[,i]==c & cnv[,j]==2, c(i, j), drop=FALSE];
x <- x[x[,1]>= c/2*q1[i] & x[,2]>=q1[j], , drop=FALSE];
x[,1]/x[,2];
})
})
});
ms <- sapply(ratios, function(c) {
sapply(c, function(c) mean(log(unlist(c, use.names=FALSE)), trim=0.1, na.rm=TRUE));
});
dimnames(ms) <- list(colnames(mtr0), c('1 copy', '2 copies', '3 copies'));
m1 <- round(100*exp(mean(ms[, 1]-ms[, 2])) - 100, 3);
m3 <- round(100*exp(mean(ms[, 3]-ms[, 2])) - 100, 3);
saveRDS(100*(exp(ms)-1), paste(path.r, 'average_percent.rds', sep='/'));
tbl <- round(100*(exp(ms)-1), 2);
CreateDatatable(tbl, paste(path.tbl, 'average_change_by_sample.html', sep='/'),
caption = 'Average change of each sample comparing to diploid samples (%)');
x <- mtr0;
x[cnv!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
sd <- apply(x, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
stat2 <- cbind(N=n, Mean=m, SD=sd);
# Compare each sample to all other 2-copy samples
stats <- lapply(1:ncol(cnv), function(i) {
x <- mtr0[, -i, drop=FALSE];
adj <- apply(x, 2, function(x) x*mean(mtr0[, i])/mean(x));
x[cnv[, -i]!=2] <- NA;
adj[cnv[, -i]!=2] <- NA;
m <- rowMeans(x, na.rm=TRUE);
m.adj <- rowMeans(adj, na.rm=TRUE);
sd <- apply(adj, 1, function(x) sd(x, na.rm=TRUE));
x[!is.na(x)]<-1;
n <- rowSums(x, na.rm=TRUE);
chg <- (mtr0[, i] - m.adj) / m.adj * 100
s <- cbind(Num_Diploid=n, Mean_Diploid=m.adj, SD=sd);
cbind(Copy=cnv[, i], Count=mtr0[, i], Change=chg, s);
});
names(stats) <- colnames(cnv);
s <- lapply(stats, function(s) {
s <- s[s[,1]!=2, , drop=FALSE];
data.frame(ID=rownames(s), s);
});
tbl <- data.frame(Sample_ID=rep(colnames(cnv), sapply(s, nrow)), do.call('rbind', s), stringsAsFactors = FALSE);
tbl <- tbl[tbl$Num_Diploid!=0 & !is.na(tbl$Mean_Diploid), , drop=FALSE];
if (!identical(NA, ann)) tbl <- cbind(tbl, ann[tbl$ID, ]);
CreateDatatable(tbl, paste(path.tbl, 'CNV_vs_Diploid.html', sep='/'), rownames = FALSE);
x <- lapply(1:3, function(i) ms[, i]);
x <- lapply(x, function(x) x[!is.na(x)]);
a <- unlist(x, use.names=FALSE);
b <- rep(1:3, sapply(x, length));
par(mar=c(5,5,2,2));
plot(0, type='n', xlim=c(0, 4), ylim=range(unlist(x), na.rm=TRUE),
ylab='Average change (%)', cex.lab=2, xlab='', xaxt='n', yaxt='n');
abline(v=1:3);
vioplot(x[[1]], x[[2]], x[[3]], names=colnames(ms), col='gold', rectCol = 'darkgrey', at=1:3, add=TRUE);
length(x)
names(x)
sapply(x, length)
ms
names(cnt.all)
sapply(cnt.all, dim)
ms
x <- lapply(1:3, function(i) ms[, i]);
x <- lapply(x, function(x) x[!is.na(x)]);
a <- unlist(x, use.names=FALSE);
b <- rep(1:3, sapply(x, length));
x
a
b
run()
UseMethod('plot', 1:10)
UseMethod('plot', list(1:10, 1:10))
library(DEGandMore)
DEGandMore::DeWrapper
do.call('vioplot', list(x[[2]], x[[3]]))
x
do.call('vioplot', list(x[2:3]))
e <- 'vioplot(x[[2]], x[[3]])'
e
eval(e)
e
e <- expression('vioplot(x[[2]], x[[3]])')
e
eval(e)
e
call(e)
e
call('vioplot(x[[2]], x[[3]])')
if (length(x[[1]])==0) vioplot(x[[2]], x[[3]], names=colnames(ms), col='gold', rectCol = 'darkgrey', at=2:3, add=TRUE);
x <- lapply(1:3, function(i) ms[, i]);
x <- lapply(x, function(x) x[!is.na(x)]);
a <- unlist(x, use.names=FALSE);
b <- rep(1:3, sapply(x, length));
par(mar=c(5,5,2,2));
plot(0, type='n', xlim=c(0, 4), ylim=range(unlist(x), na.rm=TRUE),
ylab='Average change (%)', cex.lab=2, xlab='', xaxt='n', yaxt='n');
abline(v=1:3);
if (length(x[[1]])==0) vioplot(x[[2]], x[[3]], names=colnames(ms), col='gold', rectCol = 'darkgrey', at=2:3, add=TRUE);
vioplot(x[[1]], x[[2]], x[[3]], names=colnames(ms), col='gold', rectCol = 'darkgrey', at=1:3, add=TRUE);
axis(1, at=1:3, colnames(ms), cex.axis=1.5);
axis(2, at=log(1+seq(-.8, .8, .2)), labels=seq(-80, 80, 20))
abline(lm(a~b), lty=2, col='blue');
CreateReport('cnv_impact.yaml')
rm(list=ls())
CreateReport('cnv_impact.yaml')
CreateReport('cnv_impact.yaml')
CreateReport('cnv_impact.yaml')
setwd('~/Desktop/CNV_RNAseq/')
dir(rec=TRUE)->f
length(f)
f<-f[grep('adjusted', f)]
f
f<-f[grep('adjusted_data', f)]
d1 <- readRDS(f[2])
f
d2 <- readRDS(f[3])
sapply(d1, dim)
sapply(d2, dim)
args(DeWrapper)
grps<-list(ori=colnames(d1[[1]]), res=colnames(d2[[1]]))
grps
DeMethods()
mthd<-'DeEdgeR'
d <- lapply(1:3, function(i) cbind(d1[[i]], d2[[i]]))
sapply(d, ncol)
s <- lapply(d, function(d) DeWrapper(d, grps, 'DeEdgeR'))
names(s[[1]])
res <- lapply(s, function(s) s$results)
sapply(res, dim)
head(s[[1]][[6]])
res <- lapply(s, function(s) s$results[[1]])
dim(res[[1]])
head(res[[1]])
length(d1)
d <- lapply(1:4, function(i) cbind(d1[[i]], d2[[i]]))
s <- lapply(d, function(d) DeWrapper(d, grps, 'DeEdgeR'))
res <- lapply(s, function(s) s$results[[1]])
head(res[[1]])
p <- sapply(res, function(x) x[, 5])
dim(p)
head(p)
q <- sapply(res, function(x) x[, 6])
n <- apply(q, 2, function(x) length(x[x<=0.2]))
n
barplot(n)
n <- apply(q, 2, function(x) length(x[x<=0.1]))
n
n <- apply(q, 2, function(x) length(x[x<=0.05]))
n
n <- apply(q, 2, function(x) length(x[x<=0.01]))
n
n <- apply(p, 2, function(x) length(x[x<=0.01]))
n
n <- apply(p, 2, function(x) length(x[x<=0.05]))
n
n <- apply(p, 2, function(x) length(x[x<=0.001]))
n
setwd('~/Documents/RoCA/template/gri')
dir()
setwd('cnv_impact/')
CreateReport()
CreateReport('cnv_impact.yaml')
