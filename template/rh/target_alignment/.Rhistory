n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) {
s <- sel[[nm]];
});
s
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) {
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', fn), w=1500, h=600, res=150);
pltC(cov[[nm]], lng[[nm]], tgt[nm, 2], nm, prms$coverage);
try(dev.off());
});
smm <- lapply(pri, function(a) {
spl <- split(a, paste(a[, 1], a[, 2], sep='/'));
len <- lapply(spl, function(x) x[, 8] - x[, 7] + 1);
scr <- lapply(spl, function(x) x[, 12]);
rat <- lapply(spl, function(x) x[, 12]/(x[,8] - x[,7]+1));
dff <- lapply(spl, function(x) 100*abs(1-(x[,8]-x[,7]+1)/(x[,6]-x[,5]+1)));
bst <- a[rev(order(a[, 8] - a[, 7])), , drop=FALSE];
bst <- bst[order(bst[, 12]), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.scr <- bst[, 12];
if (tolower(prms$selection[1])=='length') bst.sel <- bst;
bst <- a[order(a[, 12]), , drop=FALSE];
bst <- bst[rev(order(bst[, 8] - bst[, 7])), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.len <- bst[, 8] - bst[, 7] + 1;
if (tolower(prms$selection[1])=='score') bst.sel <- bst;
bst <- a[rev(order(a[, 8] - a[, 7])), , drop=FALSE];
bst <- bst[order(bst[, 12]), , drop=FALSE];
bst <- bst[order(bst[, 12]/(bst[, 8]-bst[, 7]+1)), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.rat <- bst[, 12]/(bst[, 8]-bst[, 7]+1);
if (tolower(prms$selection[1])=='ratio') bst.sel <- bst;
bst <- a[rev(order(a[, 8] - a[, 7])), , drop=FALSE];
bst <- bst[order(bst[, 12]), , drop=FALSE];
bst <- bst[order(abs(1-(bst[, 6]-bst[, 5]+1)/(bst[, 8]-bst[, 7]+1))), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.dff <- 100*abs(1-(bst[, 6]-bst[, 5]+1)/(bst[, 8]-bst[, 7]+1));
if (tolower(prms$selection[1])=='difference' | !exists('bst.sel')) bst.sel <- bst;
smm <- cbind(count=sapply(spl, nrow), all_len=sapply(len, mean), all_score=sapply(scr, mean),
all_ratio=sapply(rat, mean), all_diff=sapply(dff, mean), best_len=bst.len,
best_score=bst.scr, best_ratio=bst.rat, best_diff=bst.dff);
data.frame(bst.sel, smm, stringsAsFactors = FALSE);
});
saveRDS(smm, paste0(path.r, '/summary_fullread.rds'));
sel <- lapply(smm, function(s) {
gr <- GRanges(s$chromosome, IRanges(s$ref_start, s$ref_end), strand=c('+', '-')[1.5-s$strand/2]);
gr$score <- s$score;
names(gr) <- rownames(s);
gr;
});
if (tolower(prms$selection[1])=='score') dsc <- 'longest alignment length' else
if (tolower(prms$selection[1])=='score') dsc <- 'lowest Blasr score' else
if (tolower(prms$selection[1])=='ratio') dsc <- 'lowest Blasr score to alignment length ratio' else
dsc <- 'lowest percentage difference of alignment length between query and reference';
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) {
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', fn), w=1500, h=600, res=150);
pltC(cov[[nm]], lng[[nm]], tgt[nm, 2], nm, prms$coverage);
try(dev.off());
});
s <- sel[[nm]];
s
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='darkblue');
dev.off()
quartz()
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='darkblue');
png(paste0(path.fig, '/', fn), w=1000, h=1000, res=150);
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1000, h=1000, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='darkblue', cex=0.5, main=nm, cex.main=1.5);
try(dev.off());
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i');
try(dev.off());
f;
});
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
fns
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
tbl
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
colnames(tbl)[-1] <- colnames(cnt);
cnt
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palindrome>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
pdf(paste0(path.fig, '/', sub('.png$', '.pdf', f)), w=12, h=9);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
colnames(tbl)[-1] <- colnames(cnt);
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palindrome>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
pdf(paste0(path.fig, '/', sub('.png$', '.pdf', f)), w=12, h=9);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(1, 1.05*max(s$palindrome)), log='y');
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
colnames(tbl)[-1] <- colnames(cnt);
CreateReport('target_alignment.yaml')
dim(pri[[1]])
dim(sel[[1]])
length(sel[[1]])
length(s)
tgt
a <- aln[[1]]
dim(a)
dim(a)
head(a)
ImportList
getwd()
dir()
require(RoCA)
CreateReport('target_alignment.yaml')
CreateReport('target_alignment.yaml')
CreateReport('target_alignment.yaml')
c <- readRDS("/Users/zhangz/Google Drive/Projects/Blobel/2018-10_PROseq/result/pausing_analysis/pausing_index/input/count_tss_all.rds")
dim(c)
summary(c)
dim(c)
c2 <- readRDS("/Users/zhangz/Google Drive/Projects/Blobel/2018-10_PROseq/result/pausing_analysis/pausing_index/input/count_genebody_all.rds")
c1 <- c
c1 <- c[, 6:11]
c2 <- c2[, 6:11]
sm1 <- rowSums(c1)
sm2 <- rowSums(c2)
dim(sm1)
plot(sm1, sm2)
summary(sm1)
x1 <- c1[sm1>=24 & sm2>=24, ]
x2 <- c2[sm1>=24 & sm2>=24, ]
min(x1)
min(x2)
length(x1[x1==0])
x2 <- c2[sm1>=32 & sm2>=32, ]
x1 <- c1[sm1>=32 & sm2>=32, ]
min(x)
dim(x1)
dim(x2)
min(x1)
min(x2)
length(x1[x1==0])
x1 <- c1[sm1>=36 & sm2>=36, ]
min(x1)
length(x1[x1==0])
x2 <- c2[sm1>=36 & sm2>=36, ]
dim(x1)
dim(x2)
x1[x1==0] <- 1
z <- x1/x2
min(z)
boxplot(log2(z))
quartz()
boxplot(log2(z), ylab='Log2(TSS/gene body)')
plot(x1[, 1], x2[, 1])
plot(x1[, 1], x2[, 1], log='xy')
plot(x1[, 1], x1[, 4])
plot(x1[, 1], x1[, 4], log='xy')
abline(0, 1)
a1 <- readRDS("/Users/zhangz/Google Drive/Projects/Blobel/2018-10_PROseq/result/pausing_analysis/pausing_index/R/adjusted_tss.rds")
a2 <- readRDS("/Users/zhangz/Google Drive/Projects/Blobel/2018-10_PROseq/result/pausing_analysis/pausing_index/R/adjusted_genebody.rds")
d <- a1-a2
boxplot(d)
plot(d[, 1], d[, 4])
abline(0, 1)
cor(z)
cor(d)
d <- d[, 6:11]
plot(d[, 1], d[, 4])
cor(d)
cor(z)
dim(z)
require(DEGandMore)
summary(z)
z <- log2(z)
g <- list(A=1:3, B=4:6)
s <- DeLimma(z, g, paired=TRUE)[[1]]
dim9s
PlotVolcano(s[, 4], s[, 5])
PlotVolcano(s[, 3], s[, 5])
hist(s[, 5], br=100)
x <- s[order(s[, 5]), ]
head(x)
c1['NR_015493', ]
c2['NR_015493', ]
a1['NR_015493', ]
a1 <- a1[, 6:11]
a2 <- a2[, 6:11]
a1['NR_015493', ]
a2['NR_015493', ]
anno <- readRDS("/Users/zhangz/Google Drive/Projects/Blobel/2018-10_PROseq/result/pausing_analysis/pausing_index/R/anno.rds")
anno['NR_015493', ]
y <- NormLoess(z)
s <- DeLimma(y, g, paired=TRUE)[[1]]
hist(s[, 5], br=100)
s0 <- readRDS("/Users/zhangz/Google Drive/Projects/Blobel/2018-10_PROseq/result/pausing_analysis/pausing_index/R/stat.rds")
hist(s0[, 5], br=100)
dim(s0)
names(s0)
s3 <- s0[[3]]
hist(s3[, 5], br=100)
col <- colorpanel(101, 'grey', 'yellow', 'red');   # 101 levels of color
brk <- c(seq(0, 1, 0.02), seq(1.06, 4, 0.06), max(10, max(sub, na.rm=TRUE)));      # 102 breaking points of data corresponding to colors
brk <- c(seq(0, 1, 0.02), seq(1.06, 4, 0.06), 10);      # 102 breaking points of data corresponding to colors
brk
col
quartz()
par(mar=c(1,1,1,1))
plot(rep(1, length(brk)), 0:length(col), type='n', axes=FALSE)
length(col)
# prepare plotting
col <- colorpanel(101, 'grey', 'yellow', 'red');   # 101 levels of color
require(gplots);
# prepare plotting
col <- colorpanel(101, 'grey', 'yellow', 'red');   # 101 levels of color
# prepare plotting
col <- colorpanel(101, 'grey', 'yellow', 'red');   # 101 levels of color
plot(rep(1, length(brk)), 0:length(col), type='n', axes=FALSE)
rect(0:length(col), 0, 1:length(brk), 1, col=col)
plot(0:length(col), rep(1, length(brk)), type='n', axes=FALSE)
rect(0:length(col), 0, 1:length(brk), 1, col=col)
length(col)
par(mar=c(2, 2, 2, 2))
plot(0:length(col), rep(1, length(brk)), type='n', xaxt='n', yaxt='n')
rect(0:length(col), 0, 1:length(brk), 1, col=col)
plot(0:length(col), rep(1, length(brk)), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
rect(0:length(col), 0, 1:length(brk), 1, col=col)
plot(0:length(col), ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
rect(0:length(col), 0, 1:length(brk), 1, col=col)
length(0:length(col))
rect(0:(length(col)-1), 0, 1:length(col), 1, col=col)
plot(0:length(col), ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
rect(0:(length(col)-1), 0, 1:length(col), 1, col=col)
length(0:(length(col)-1))
length(col)
col
for (i in 1:101) rect(0, i-1, 1, i, col=col[i])
axis(1)
plot(0:100, ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
for (i in 1:101) rect(0, i-1, 1, i, col=col[i])
for (i in 1:101) rect(0, i-1, 1, i, col=col[i])
plot(0:100, ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
for (i in 1:101) rect(0, i-1, 1, i, col=col[i])
rect(0:(length(col)-1), 0, 1:length(col), 1, col=col)
plot(0:100, ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
quartz()
plot(0:100, ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
par(mar=c(2, 2, 2, 2))
plot(0:100, ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
for (i in 1:100) rect(0, i-1, 1, i, col=col[i])
plot(0:100, ylim=c(0, 1), type='n', xaxt='n', yaxt='n', xaxs='i', yaxs='i')
for (i in 1:100) rect(0, i-1, 1, i, col=col[i])
rect(0:(length(col)-1), 0, 1:length(col), 1, col=col)
rect(0:(length(col)-2), 0, 1:(length(col)-1), 1, col=col)
rect(0:(length(col)-2), 0, 1:(length(col)-1), 1, col=col[1:100])
rect(0:(length(col)-2), 0, 1:(length(col)-1), 1, col=col[1:99])
rect(0:(length(col)-3), 0, 1:(length(col)-2), 1, col=col[1:99])
