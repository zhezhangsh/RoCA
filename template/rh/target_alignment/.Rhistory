cnt <- sapply(cff, function(f) sapply(cov, function(c) length(c[c>=f])));
pct <- 100*cnt/sapply(cov, length);
colnames(cnt) <- colnames(pct) <- paste0('Dep>=', cff);
stat <- cbind(Mean_All=sapply(cov, mean), Mean_Long=sapply(lng, mean), pct);
saveRDS(cov, paste0(path.r, '/coverage_target.rds'));
saveRDS(stat, paste0(path.r, '/coverage_target_stat.rds'));
tbl <- data.frame(Target=paste0('[', rownames(stat), '](figure/', fns, ')'), stat,
stringsAsFactors = FALSE);
sessionInfo();
x <- cov[[1]]
min(x)
x <- pac[[1]]
min(x)
plot(x, type='l')
pac <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
c <- coverage(s[s$palin_num>=6 & width(s)>=5000], width=tgt[nm, 3])[tgt[nm, 1]][[1]];
as.vector(c[tgt[nm, 2]:tgt[nm, 3]]);
});
x <- pac[[1]]
min(x)
plot(x, type='l')
yml <- yaml.load_file('target_alignment.yaml')
prms <- yml$parameter
prms$palindrome
yml <- yaml.load_file('target_alignment.yaml')
prms <- yml$parameter
yml
cff <- sort(unique(round(c(1, 2, prms$palindrome$count))));
cff
dir('R')
dir('demo/R')
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
cnt
colnames(cnt) <- paste0('Num>=', cff);
cnt
bst <- sapply(sel, function(s) length(s[s$palin_num>=c & width(s)>=prms$long]));
s <- sel[[1]]
head(s)
length(s)
s <- sel[[1]]
dim(s)
s
length(s[s$palin_num>=c & width(s)>=prms$long])
prms$long
bst <- sapply(sel, function(s) length(s[s$palin_num>=max(cff) & width(s)>=prms$long]));
bst
colnames(cnt)[length(cnt)]
cnt <- cbind(cnt, bst)
colnames(cnt) <- paste0('Num>=', cff);
cnt[1:2, ]
cnt
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palin_num>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst)
colnames(cnt) <- paste0('Num>=', cff);
cff
dim(cnt)
cnt <- cbind(cnt, bst)
colnames(cnt) <- paste0('Num>=', cff[-length(cff)]);
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palin_num>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
cnt
cff
colnames(cnt) <- paste0('Num>=', cff);
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palin_num>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palin_num>=max(cff) & width(s)>=prms$long]));
colnames(cnt) <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
cnt
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
m <- sapply(split(width(s)[o[, 1]], o[, 1]), mean);
names(n) <- names(m) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
m <- m[names(s)];
n[is.na(n)] <- 0;
m[is.na(m)] <- 0;
s$palin_num <- n;
s$palin_len <- m;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palin_num>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[length(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
cnt
nm <- 'RH'
s <- sel[[nm]];
s
width(s)[1]
width(s)[1:5]
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(m) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) {
s <- sel[[nm]];
});
s
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) {
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', fn), w=1500, h=600, res=150);
pltC(cov[[nm]], lng[[nm]], tgt[nm, 2], nm, prms$coverage);
try(dev.off());
});
smm <- lapply(pri, function(a) {
spl <- split(a, paste(a[, 1], a[, 2], sep='/'));
len <- lapply(spl, function(x) x[, 8] - x[, 7] + 1);
scr <- lapply(spl, function(x) x[, 12]);
rat <- lapply(spl, function(x) x[, 12]/(x[,8] - x[,7]+1));
dff <- lapply(spl, function(x) 100*abs(1-(x[,8]-x[,7]+1)/(x[,6]-x[,5]+1)));
bst <- a[rev(order(a[, 8] - a[, 7])), , drop=FALSE];
bst <- bst[order(bst[, 12]), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.scr <- bst[, 12];
if (tolower(prms$selection[1])=='length') bst.sel <- bst;
bst <- a[order(a[, 12]), , drop=FALSE];
bst <- bst[rev(order(bst[, 8] - bst[, 7])), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.len <- bst[, 8] - bst[, 7] + 1;
if (tolower(prms$selection[1])=='score') bst.sel <- bst;
bst <- a[rev(order(a[, 8] - a[, 7])), , drop=FALSE];
bst <- bst[order(bst[, 12]), , drop=FALSE];
bst <- bst[order(bst[, 12]/(bst[, 8]-bst[, 7]+1)), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.rat <- bst[, 12]/(bst[, 8]-bst[, 7]+1);
if (tolower(prms$selection[1])=='ratio') bst.sel <- bst;
bst <- a[rev(order(a[, 8] - a[, 7])), , drop=FALSE];
bst <- bst[order(bst[, 12]), , drop=FALSE];
bst <- bst[order(abs(1-(bst[, 6]-bst[, 5]+1)/(bst[, 8]-bst[, 7]+1))), , drop=FALSE];
bst <- bst[!duplicated(paste(bst[, 1], bst[, 2])), , drop=FALSE];
bst.dff <- 100*abs(1-(bst[, 6]-bst[, 5]+1)/(bst[, 8]-bst[, 7]+1));
if (tolower(prms$selection[1])=='difference' | !exists('bst.sel')) bst.sel <- bst;
smm <- cbind(count=sapply(spl, nrow), all_len=sapply(len, mean), all_score=sapply(scr, mean),
all_ratio=sapply(rat, mean), all_diff=sapply(dff, mean), best_len=bst.len,
best_score=bst.scr, best_ratio=bst.rat, best_diff=bst.dff);
data.frame(bst.sel, smm, stringsAsFactors = FALSE);
});
saveRDS(smm, paste0(path.r, '/summary_fullread.rds'));
sel <- lapply(smm, function(s) {
gr <- GRanges(s$chromosome, IRanges(s$ref_start, s$ref_end), strand=c('+', '-')[1.5-s$strand/2]);
gr$score <- s$score;
names(gr) <- rownames(s);
gr;
});
if (tolower(prms$selection[1])=='score') dsc <- 'longest alignment length' else
if (tolower(prms$selection[1])=='score') dsc <- 'lowest Blasr score' else
if (tolower(prms$selection[1])=='ratio') dsc <- 'lowest Blasr score to alignment length ratio' else
dsc <- 'lowest percentage difference of alignment length between query and reference';
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) {
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', fn), w=1500, h=600, res=150);
pltC(cov[[nm]], lng[[nm]], tgt[nm, 2], nm, prms$coverage);
try(dev.off());
});
s <- sel[[nm]];
s
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='darkblue');
dev.off()
quartz()
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='darkblue');
png(paste0(path.fig, '/', fn), w=1000, h=1000, res=150);
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1000, h=1000, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='darkblue', cex=0.5, main=nm, cex.main=1.5);
try(dev.off());
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i');
try(dev.off());
f;
});
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
fns
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
tbl
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palin_num>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
colnames(tbl)[-1] <- colnames(cnt);
cnt
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palindrome>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
pdf(paste0(path.fig, '/', sub('.png$', '.pdf', f)), w=12, h=9);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
colnames(tbl)[-1] <- colnames(cnt);
sel <- lapply(rownames(tgt), function(nm) {
s <- sel[[nm]];
a <- pri[[nm]];
g <- GRanges(a$chromosome, IRanges(a$ref_start, a$ref_end), strand=a$strand);
o <- as.matrix(findOverlaps(s, g, ignore.strand=TRUE));
o <- o[a[names(s), 1][o[, 1]]==a[, 1][o[, 2]], , drop=FALSE];
o <- o[a[names(s), 2][o[, 1]]==a[, 2][o[, 2]], , drop=FALSE];
o <- cbind(o, stt1=start(s)[o[, 1]], end1=end(s)[o[, 1]], stt2=start(g)[o[, 2]], end2=end(g)[o[, 2]]);
o <- cbind(o, stt=pmax(o[, 'stt1'], o[, 'stt2']), end=pmin(o[, 'end1'], o[, 'end2']));
o <- cbind(o, pct=100*(o[,'end']-o[,'stt']+1)/(o[,'end1']-o[,'stt1']+1));
o <- o[o[, 'pct']>=prms$palindrome$overlap, , drop=FALSE];
o <- cbind(o, score=a[, 'score'][o[, 2]]);
n <- sapply(split(o[, 1], o[, 1]), length);
names(n) <- names(s)[as.integer(names(n))];
n <- n[names(s)];
n[is.na(n)] <- 0;
s$palindrome <- n;
s;
});
names(sel) <- rownames(tgt);
saveRDS(sel, paste0(path.r, '/selected_alignment.rds'));
cff <- sort(unique(round(c(0, 1, 2, prms$palindrome$count))));
cnt <- sapply(cff, function(c) sapply(sel, function(s) length(s[s$palindrome>=c])));
bst <- sapply(sel, function(s) length(s[s$palindrome>=max(cff) & width(s)>=prms$long]));
cnt <- cbind(cnt, bst);
colnames(cnt)[1:length(cff)] <- paste0('Num>=', cff);
colnames(cnt)[1] <- 'Total';
colnames(cnt)[ncol(cnt)] <- paste0('Num>=', cff[length(cff)], '&Long');
saveRDS(cnt, paste0(path.r, '/summary_palindrome.rds'));
fns <- sapply(names(sel), function(nm) { print(nm);
s <- sel[[nm]];
f <- paste0('palin_', nm, '.png');
png(paste0(path.fig, '/', f), w=1200, h=900, res=150);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(0, 1.05*max(s$palindrome)));
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
pdf(paste0(path.fig, '/', sub('.png$', '.pdf', f)), w=12, h=9);
par(mar=c(5, 5, 2, 2));
plot(width(s), s$palindrome, xlab='Palindrome length', ylab='Palindrome count', cex.lab=1.5,
pch='|', col='#F83557', cex=0.5, main=nm, cex.main=1.5, xaxs='i', yaxs='i',
ylim=c(1, 1.05*max(s$palindrome)), log='y');
abline(v=prms$long, h=max(cff), col='lightgrey');
try(dev.off());
f;
});
tbl <- data.frame(Target=paste0('[', rownames(cnt), '](figure/', fns, ')'), cnt,
stringsAsFactors = FALSE);
colnames(tbl)[-1] <- colnames(cnt);
CreateReport('target_alignment.yaml')
dim(pri[[1]])
dim(sel[[1]])
length(sel[[1]])
length(s)
tgt
a <- aln[[1]]
dim(a)
dim(a)
head(a)
ImportList
