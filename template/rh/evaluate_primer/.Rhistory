cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
c <- clusterApplyLB(cl, seq1, run.match2,
g=genom, mx=mis, mn=mis, indel=ndl, strand=1);
# c <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=genom, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, 1);
} else if (prms$match$strand == -1) {
c <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=genom, mx=mis, mn=mis, indel=ndl, strand=-1);
# c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=genom, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, -1);
} else {
# c1 <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=genom, max.mismatch=mis, min.mismatch=mis);
# c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=genom, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(1:length(c1), function(i) rbind(summ.match(c1[[i]], 1), summ.match(c2[[i]], -1)));
c1 <- clusterApplyLB(cl, seq1, run.match2, g=genom,
mx=mis, mn=mis, indel=ndl, strand=1);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=genom, mx=mis, mn=mis, indel=ndl, strand=-1);
c <- lapply(1:length(c1), function(i) rbind(c1[[i]], c2[[i]]));
};
try(stopCluster(cl));
}
names(c) <- names(seq1);
c;
});
names(mis) <- 1:max(1, max(1, prms$match$mismatch));
mis <- remove.redun(c(list('0'=mth), mis))[-1];
saveRDS(mis, paste(path.r, 'mismatch.rds', sep='/'));
} else mis <- readRDS(paste(path.r, 'mismatch.rds', sep='/'));
mis <- lapply(mis, function(x) lapply(x, function(x) {
g <- GRanges(x[, 1], IRanges(x[, 2], x[, 3]));
c <- countOverlaps(g, targt, ignore.strand=TRUE);
cbind(x, target=pmin(1, c));
# c(length(c[c==0]), length(c[c>0]));
}));
ct0 <- sapply(mis, function(x) sapply(x, function(x) nrow(x[x$target==0, , drop=FALSE])));
ct1 <- sapply(mis, function(x) sapply(x, function(x) nrow(x[x$target==1, , drop=FALSE])));
ct0 <- cbind(nm0[rownames(ct0)], ct0);
ct1 <- cbind(nm1[rownames(ct1)], ct1);
colnames(ct0) <- paste(0:(ncol(ct0)-1), 'mismatch_off', sep='_');
colnames(ct1) <- paste(0:(ncol(ct1)-1), 'mismatch_on', sep='_');
saveRDS(cbind(ct1, ct0), paste(path.r, 'mismatch_count.rds', sep='/'));
CreateDatatable(cbind(ct1, ct0), paste(path.tbl, 'mismatch_count', sep='/'));
loc <- lapply(mis, function(x) {
y <- do.call('rbind', x);
z <- rep(names(x), sapply(x, nrow));
data.frame(primer=z, y, stringsAsFactors = FALSE);
})
loc <- data.frame(do.call('rbind', loc), mismatch=rep(as.numeric(names(loc)), sapply(loc, nrow)));
loc <- cbind(loc, length_primer=seqlengths(seq1)[loc$primer], length_match=loc$end-loc$start+1);
loc$seq_primer <- as.character(seq1[loc$primer]);
sq0 <- getSeq(getBSgenome(prms$genome$package), GRanges(loc[, 2], IRanges(loc[, 3], loc[, 4])));
sq0[loc$strand==-1] <- reverseComplement(sq0[loc$strand==-1]);
loc$seq_match  <- as.character(sq0);
saveRDS(loc, paste(path.r, 'mismatch_location.rds', sep='/'));
CreateDatatable(loc, paste(path.tbl, 'mismatch_location', sep='/'), rownames = FALSE);
wid3 <- length(seq1)/length(seqns) * wid2;
out3 <- paste(100*wid3, 'px', sep='');
par(mfrow=c(2, 1), mai=c(1, 0.8, 0.25, 0.1));
col <- c(colorpanel(ncol(ct0), '#78281F', '#FADBD8'));
cex <- min(0.75/max(strwidth(rownames(ct0), units='inches')), 0.08/max(strheight('A', units='inches')));
barplot(t(ct0[, ncol(ct0):1, drop=FALSE]), col=col, border=NA, space=0.2, main='Off target',
ylim=c(0, 1.15*max(rowSums(ct0))), ylab='Number of hits', cex.lab=1.25,
xlim=c(0, 1.2*nrow(ct0)), xaxs='i', names.arg = rownames(ct0), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=0:(ncol(ct0)-1));
abline(h=0);
col <- c(colorpanel(ncol(ct1), '#0E6251', '#D1F2EB'));
cex <- min(0.75/max(strwidth(rownames(ct1), units='inches')), 0.08/max(strheight('A', units='inches')));
barplot(t(ct1[, ncol(ct1):1, drop=FALSE]), col=col, border=NA, space=0.2, main='On target',
ylim=c(0, 1.15*max(rowSums(ct1))), ylab='Number of hits', cex.lab=1.25,
xlim=c(0, 1.2*nrow(ct1)), xaxs='i', names.arg = rownames(ct1), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=0:(ncol(ct1)-1));
abline(h=0);
len <- seqlengths(reads);
frq <- alphabetFrequency(reads);
gc  <- rowSums(frq[, 2:3])/rowSums(frq[, 1:4]);
ns  <- frq[, 'N']/rowSums(frq);
tbl <- cbind(Length=summary(len), 'GC(%)'=summary(round(100*gc), 3), 'N(%)'=round(summary(100*ns), 4));
tbl <- t(tbl);
dif <- dinucleotideFrequency(reads);
pc1 <- apply(dif, 2, function(x) 100*x/rowSums(dif));
mn1 <- colMeans(pc1);
se1 <- apply(pc1, 2, sd)/sqrt(nrow(pc1));
pc0 <- apply(frq[, 1:4], 2, function(x) x/rowSums(frq));
pc0 <- apply(cbind(rep(1:4, each=4), rep(1:4, 4)), 1, function(i) 100*pc0[, i[1]]*pc0[, i[2]]);
mn0 <- colMeans(pc0);
se0 <- apply(pc0, 2, sd)/sqrt(nrow(pc0));
mns <- rbind(mn0, mn1);
los <- mns - rbind(se0, se1);
ups <- mns + rbind(se0, se1);
mns <- mns[, order(mns[1, ]/mns[2, ])];
los <- los[, colnames(mns)];
ups <- ups[, colnames(mns)];
par(mar=c(3, 5, 2, 2));
barplot2(mns, be=TRUE, col=c('#839192', '#F39C12'), ylab='Frequency (%)', xlab='', las=3, border=NA,
ylim=c(0, 1.2*max(ups)), plot.ci=TRUE, ci.l=los, ci.u=ups, ci.color='black');
legend('topleft', horiz = TRUE, bty='n', pch=15, legend=c('Expected', 'Observed'),
col=c('#839192', '#F39C12'), cex=1.5);
abline(h=0, lwd=1.5);
if (!debug) {  #################################### FOR DEBUG ONLY ####################################
aln <- lapply(0:max(1, max(1, prms$match$mismatch)), function(mis) { print(mis);
ndl <- prms$match$indel;
if (prms$match$multicore <= 1) {
c <- lapply(seq1, function(s) { print(s);
# sum(vmatchPattern(s, genom, mis, mis)) + sum(vmatchPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) run.match2(s, reads, mis, mis, ndl, 1) else
if (prms$match$strand == -1) run.match2(reverseComplement(s), reads, mis, mis, ndl, -1) else
rbind(run.match2(s, reads, mis, mis, ndl, 1),
run.match2(reverseComplement(s), reads, mis, mis, ndl, -1));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
# c <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, 1);
c <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
} else if (prms$match$strand == -1) {
# c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, -1);
c <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
} else {
# c1 <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(1:length(c1), function(i) rbind(summ.match(c1[[i]], 1), summ.match(c2[[i]], -1)));
c1 <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
c <- lapply(1:length(c1), function(i) rbind(c1[[i]], c2[[i]]));
};
try(stopCluster(cl));
}
names(c) <- names(seq1);
c;
});
names(aln) <- 0:max(1, max(1, prms$match$mismatch));
aln <- remove.redun(aln);
saveRDS(aln, paste(path.r, 'alignment.rds', sep='/'));
} else aln <- readRDS(paste(path.r, 'alignment.rds', sep='/'));
aln <- lapply(aln, function(x) {
a <- do.call('rbind', x);
a <- data.frame(primer=rep(names(x), sapply(x, nrow)), a, stringsAsFactors = FALSE);
});
class(aln)
dim(aln)
x <- readRDS("/Users/zhangz/Documents/RoCA/template/rh/evaluate_primer/examples/UPID_380/R/alignment.rds")
dim(x)
x <- readRDS("/Users/zhangz/Downloads/alignment.rds")
names(x)
length(x)
aln <- remove.redun(aln);
saveRDS(aln, paste(path.r, 'alignment.rds', sep='/'));
if (!debug) {  #################################### FOR DEBUG ONLY ####################################
aln <- lapply(0:max(1, max(1, prms$match$mismatch)), function(mis) { print(mis);
ndl <- prms$match$indel;
if (prms$match$multicore <= 1) {
c <- lapply(seq1, function(s) { print(s);
# sum(vmatchPattern(s, genom, mis, mis)) + sum(vmatchPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) run.match2(s, reads, mis, mis, ndl, 1) else
if (prms$match$strand == -1) run.match2(reverseComplement(s), reads, mis, mis, ndl, -1) else
rbind(run.match2(s, reads, mis, mis, ndl, 1),
run.match2(reverseComplement(s), reads, mis, mis, ndl, -1));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
# c <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, 1);
c <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
} else if (prms$match$strand == -1) {
# c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, -1);
c <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
} else {
# c1 <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(1:length(c1), function(i) rbind(summ.match(c1[[i]], 1), summ.match(c2[[i]], -1)));
c1 <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
c <- lapply(1:length(c1), function(i) rbind(c1[[i]], c2[[i]]));
};
try(stopCluster(cl));
}
names(c) <- names(seq1);
c;
});
names(aln) <- 0:max(1, max(1, prms$match$mismatch));
aln <- remove.redun(aln);
saveRDS(aln, paste(path.r, 'alignment.rds', sep='/'));
} else aln <- readRDS(paste(path.r, 'alignment.rds', sep='/'));
aln <- lapply(aln, function(x) {
a <- do.call('rbind', x);
a <- data.frame(primer=rep(names(x), sapply(x, nrow)), a, stringsAsFactors = FALSE);
});
names(aln)
dim(a)
length(a)
length(x)
names(x)
saveRDS(x, paste(path.r, 'alignment.rds', sep='/'));
if (!debug) {  #################################### FOR DEBUG ONLY ####################################
aln <- lapply(0:max(1, max(1, prms$match$mismatch)), function(mis) { print(mis);
ndl <- prms$match$indel;
if (prms$match$multicore <= 1) {
c <- lapply(seq1, function(s) { print(s);
# sum(vmatchPattern(s, genom, mis, mis)) + sum(vmatchPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) run.match2(s, reads, mis, mis, ndl, 1) else
if (prms$match$strand == -1) run.match2(reverseComplement(s), reads, mis, mis, ndl, -1) else
rbind(run.match2(s, reads, mis, mis, ndl, 1),
run.match2(reverseComplement(s), reads, mis, mis, ndl, -1));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
# c <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, 1);
c <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
} else if (prms$match$strand == -1) {
# c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, -1);
c <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
} else {
# c1 <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(1:length(c1), function(i) rbind(summ.match(c1[[i]], 1), summ.match(c2[[i]], -1)));
c1 <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
c <- lapply(1:length(c1), function(i) rbind(c1[[i]], c2[[i]]));
};
try(stopCluster(cl));
}
names(c) <- names(seq1);
c;
});
names(aln) <- 0:max(1, max(1, prms$match$mismatch));
aln <- remove.redun(aln);
saveRDS(aln, paste(path.r, 'alignment.rds', sep='/'));
} else aln <- readRDS(paste(path.r, 'alignment.rds', sep='/'));
aln <- lapply(aln, function(x) {
a <- do.call('rbind', x);
a <- data.frame(primer=rep(names(x), sapply(x, nrow)), a, stringsAsFactors = FALSE);
});
aln <- data.frame(do.call('rbind', aln),
mismatch=as.integer(rep(names(aln), sapply(aln, nrow)), stringsAsFactors = FALSE));
rownames(aln) <- 1:nrow(aln);
saveRDS(aln, paste(path.r, 'alignment_formatted.rds', sep='/'));
CreateReport('evaluate_primer.yaml')
kable(tbl1) %>%
kable_styling(bootstrap_options = c("hover", "condensed", "responsive"), full_width=FALSE)
kable(tbl1, align='r') %>%
kable_styling(bootstrap_options = c("hover", "condensed", "responsive"), full_width=FALSE)
seq0 <- getSeq(getBSgenome(prms$genome$package), targt);
tbl1 <- sapply(list(Primer=seqns, Target=seq0, Read=reads, Reference=genom), function(s) {
c <- length(s);
l <- seqlengths(s);
f <- alphabetFrequency(s)[, 1:4];
p <- rowSums(f[, 2:3])/rowSums(f[, 1:4]);
c(c, mean(l), median(l), min(l), max(l), sum(as.numeric(l)), round(100*mean(p), 2));
});
tbl1 <- apply(tbl1, 1, function(x) format(round(x, 2), big.mark = ','));
colnames(tbl1) <- c('Number', 'Length_Mean', 'Length_Median', 'Length_Minimum', 'Length_Maximum', 'Length_Total', 'GC_Percent');
kable(tbl1, align='r') %>%
kable_styling(bootstrap_options = c("hover", "condensed", "responsive"), full_width=FALSE)
dir()
library(RoCA
)
CreateReport('evaluate_primer.yaml')
CreateReport('evaluate_primer.yaml')
CreateReport('evaluate_primer.yaml')
getwd()
if (!debug) {  #################################### FOR DEBUG ONLY ####################################
aln <- lapply(0:max(1, max(1, prms$match$mismatch)), function(mis) { print(mis);
ndl <- prms$match$indel;
if (prms$match$multicore <= 1) {
c <- lapply(seq1, function(s) { print(s);
# sum(vmatchPattern(s, genom, mis, mis)) + sum(vmatchPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) run.match2(s, reads, mis, mis, ndl, 1) else
if (prms$match$strand == -1) run.match2(reverseComplement(s), reads, mis, mis, ndl, -1) else
rbind(run.match2(s, reads, mis, mis, ndl, 1),
run.match2(reverseComplement(s), reads, mis, mis, ndl, -1));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
# c <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, 1);
c <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
} else if (prms$match$strand == -1) {
# c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, -1);
c <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
} else {
# c1 <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(1:length(c1), function(i) rbind(summ.match(c1[[i]], 1), summ.match(c2[[i]], -1)));
c1 <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
c <- lapply(1:length(c1), function(i) rbind(c1[[i]], c2[[i]]));
};
try(stopCluster(cl));
}
names(c) <- names(seq1);
c;
});
names(aln) <- 0:max(1, max(1, prms$match$mismatch));
aln <- remove.redun(aln);
saveRDS(aln, paste(path.r, 'alignment.rds', sep='/'));
} else aln <- readRDS(paste(path.r, 'alignment.rds', sep='/'));
aln <- lapply(aln, function(x) {
a <- do.call('rbind', x);
a <- data.frame(primer=rep(names(x), sapply(x, nrow)), a, stringsAsFactors = FALSE);
});
aln <- data.frame(do.call('rbind', aln),
mismatch=as.integer(rep(names(aln), sapply(aln, nrow)), stringsAsFactors = FALSE));
rownames(aln) <- 1:nrow(aln);
saveRDS(aln, paste(path.r, 'table/alignment_formatted.rds', sep='/'));
path.r
paste(path.r, 'table/alignment_formatted.rds', sep='/')
dir('examples/UPID_380/R/table/')
getwd()
dir()
dir('examples/UPID_380/')
if (!debug) {  #################################### FOR DEBUG ONLY ####################################
aln <- lapply(0:max(1, max(1, prms$match$mismatch)), function(mis) { print(mis);
ndl <- prms$match$indel;
if (prms$match$multicore <= 1) {
c <- lapply(seq1, function(s) { print(s);
# sum(vmatchPattern(s, genom, mis, mis)) + sum(vmatchPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) run.match2(s, reads, mis, mis, ndl, 1) else
if (prms$match$strand == -1) run.match2(reverseComplement(s), reads, mis, mis, ndl, -1) else
rbind(run.match2(s, reads, mis, mis, ndl, 1),
run.match2(reverseComplement(s), reads, mis, mis, ndl, -1));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
# c <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, 1);
c <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
} else if (prms$match$strand == -1) {
# c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(c, summ.match, -1);
c <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
} else {
# c1 <- clusterApplyLB(cl, seq1, Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vmatchPattern,
#                     subject=reads, max.mismatch=mis, min.mismatch=mis);
# c <- lapply(1:length(c1), function(i) rbind(summ.match(c1[[i]], 1), summ.match(c2[[i]], -1)));
c1 <- clusterApplyLB(cl, seq1, run.match2, g=reads,
mx=mis, mn=mis, indel=ndl, strand=1);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), run.match2,
g=reads, mx=mis, mn=mis, indel=ndl, strand=-1);
c <- lapply(1:length(c1), function(i) rbind(c1[[i]], c2[[i]]));
};
try(stopCluster(cl));
}
names(c) <- names(seq1);
c;
});
names(aln) <- 0:max(1, max(1, prms$match$mismatch));
aln <- remove.redun(aln);
saveRDS(aln, paste(path.r, 'alignment.rds', sep='/'));
} else aln <- readRDS(paste(path.r, 'alignment.rds', sep='/'));
aln <- lapply(aln, function(x) {
a <- do.call('rbind', x);
a <- data.frame(primer=rep(names(x), sapply(x, nrow)), a, stringsAsFactors = FALSE);
});
aln <- data.frame(do.call('rbind', aln),
mismatch=as.integer(rep(names(aln), sapply(aln, nrow)), stringsAsFactors = FALSE));
rownames(aln) <- 1:nrow(aln);
saveRDS(aln, paste(path.r, 'table/alignment_formatted.rds', sep='/'));
CreateReport('evaluate_primer.yaml')
CreateReport('evaluate_primer.yaml')
setwd('~/Google Drive/Projects/Chou/')
dir()
setwd('reference/')
dir()
x <- readxl::read_excel('StellaBloodOligoMar2018.xlsx')
dim(x)
head(x)
x <- as.data.frame(x)
dim(x)
head(x)
x <- x[!is.na(x[, 2]), ]
dim(x)
head(x)
dim(x)
saveRDS(x, 'x.rds')
dir()
dim(x)
x <- readxl::read_excel('StellaBloodOligoMar2018.xlsx')
dim(x)
x[1:2, ]
x <- as.data.frame(x)
dim(x)
head(x)
y <- x[is.na(x[, 2]), ]
y
y <- y[, 1]
y
gn <- sapply(strsplit(y, ' '), function(x) rev(x)[1])
gn
gn <- sub('\\(', '', gn)
gn <- sub('\\)', '', gn)
gn
ind <- which(is.na(x[, 2]))
ind
a <- ind+1
b <- ind-1
b
b <- b[-1]
b
b <- c(b, nrow(x))
b
a <- cbind(a, b)
a
y <- apply(a, 1, function(a) x[a[1]:a[2], ])
y[[1]]
z <- do.call('rbind', y)
dim(z)
head(z)
setwd("~/Documents/RoCA/template/rh/evaluate_primer")
v <- readRDS('rhd_primer.rds')
dim(v)
z[, colnames(v)]
dim(z)
dim(v)
u <- z[, colnames(z) %in% colnames(v)]
dim(u)
head9U
head(u)
head(z)
colnames(v)
z[1:2, ]
v[1:2, ]
colnames(z) <- c('Set', 'ID', 'Chr', 'Start', 'End', 'Sequence', 'GC', 'Tm', 'Size', 'Self_Dimer', 'Hairpin_dG', 'Distance', 'Comment')
u <- z[, colnames(v)]
u <- z[, colnames(v)[-1]]
colnames(v)
setdiff(colnames(v), colnames(z))
z[1:2, ]
a
gn
rep(gn, a[,2]-a[,1]+1)
z$Gene <- rep(gn, a[,2]-a[,1]+1)
setdiff(colnames(v), colnames(z))
d <- z$ID
d
dim(v)
v
id
id <- z$ID
id
b <- strsplit(z$ID, '_')
b
b <- do.call('rbind', b)
b
v[1:2, ]
z$Name <- paste(z$Gene, b[, 2], b[, 3], sep='_')
setdiff(colnames(v), colnames(z))
b <- b[, 1]
b
sub('inpSeq', '', b[, 1])
sub('inpSeq', '', c[, 1])
b
sub('inpSeq', '', b)
sub('inpSeq', '', b)->z$Region
z[, colnames(v)]
saveRDS(z, 'primer.rds')
getwd()
rownames(z) <- 1:nrow(z)
saveRDS(z, 'primer.rds')
