area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=1
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=10
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=-1
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=20
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=1
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=0.5
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=0.9
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=0.2
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=0.2, alpha=rep(0.2, 3)
);
grid.draw(venn.plot);
grid.newpage();
venn.plot <- draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 1,
scaled=FALSE, area.vector=1, offset=0.5, margin=0.2, alpha=rep(0.8, 3)
);
grid.draw(venn.plot);
grid.newpage();
devtools::install_github('zhezhangsh/awsomicsR')
devtools::install_github('zhezhangsh/awsomicsR')
library("awsomics", lib.loc="~/Library/R/3.3/library")
?
VennDiagram::draw.triple.venn
require(RankProd)
log2(0.7)
log(0.7)
library("affy", lib.loc="~/Library/R/3.3/library")
data(Dilution)
eset <- rma(Dilution)
require(affydata)
data(Dilution)
eset <- rma(Dilution)
e <- exprs(eset)
dim(e)
head(e)
hist(e[, 1])
eset <- rma(Dilution)
e <- exprs(eset)
hist(e[, 1])
d <- exprs(Dilution)
hist(d[, 1])
hist(log2(d[, 1]))
name.yaml <- 'evaluate_primer.yaml';
name.packages <- c('rmarkdown', 'knitr', 'kableExtra', 'yaml', 'DT', 'htmlwidgets', 'gplots',
'Biostrings', 'GenomicRanges', 'BSgenome', 'RoCA', 'awsomics');
name.subfolders <- c('path.input'='input', 'path.r'='R', 'path.fig'='figure', 'path.tbl'='table');
## Default knitr parameters
knitr::opts_chunk$set(dpi=300, dev=c('png', 'pdf'), echo=FALSE, warning=FALSE, message=FALSE, fig.path = 'figure/');
if (!require(devtools)) { install.packages('devtools'); require(devtools); }
if (!require(RCurl)) { install.packages('RCurl'); require(RCurl); }
if (!require(RoCA)) { install_github('zhezhangsh/RoCAR'); require(RoCA); }
## Load required R packages
loaded <- LoadPackage(name.packages);
if (length(loaded[!loaded])) stop('Error: failed to load package(s) ', paste(names(loaded[!loaded]), collapse=', '));
if (!exists('yml'))                   # if the 'yml' variable doesn't exist yet, create it by loading the YAML file
if (file.exists(name.yaml))         # assume the pairing YAML file exists in the current folder with the same name
yml <- yaml.load_file(name.yaml);   # rename the YAML file to fit this template
prms <- yml$parameter;
## Generate directory and sub-directories where the output files will be
f <- GenerateFolder(yml$output, name.subfolders);
path <- yml$output;
for (i in 1:length(name.subfolders)) assign(names(name.subfolders)[i], f[name.subfolders[i]]);
## Automatical figure/table ordering
OrderFigure(reset=TRUE);
OrderTable(reset=TRUE);
## URL to project home
## Use this line to add a link to project home in the report: `r home.url`
home.url <- Link2Home(yml$home);
prims <- ImportTable(DownloadFile(yml$input$primer, path.input), rownames = FALSE);
# reads <- ImportVector(DownloadFile(yml$input$read, path.input));
seqns <- prims[, 2];
names(seqns) <- prims[, 1];
seqns <- DNAStringSet(seqns);
# reads <- DNAStringSet(reads);
#
# saveRDS(prims, paste(path.input, 'primer.rds', sep='/'));
# saveRDS(reads, paste(path.input, 'read.rds', sep='/'));
genom <- getBSgenome(prms$genome$package);
chrnm <- seqnames(genom)[seqlengths(genom) >= prms$genome$length];
genom <- DNAStringSet(lapply(chrnm, function(nm) genom[[nm]]));
names(genom) <- chrnm;
len <- seqlengths(seqns);
# len <- len[len==25];
num <- table(len);
frq <- alphabetFrequency(seqns)[, c('C', 'G', 'T', 'A')];
pct <- 100*frq/rowSums(frq);
wid1 <- min(8, 2+0.5*length(num));
out1 <- paste(100*wid1, 'px', sep='');
wid2 <- min(8, 2+0.1*length(seqns));
out2 <- paste(100*wid2, 'px', sep='');
tbl <- cbind(prims[, 1:2], Length=len, pct);
if (ncol(prims) > 2) tbl <- cbind(tbl, prims[, 3:ncol(prims), drop=FALSE]);
rownames(tbl) <- rownames(prims);
saveRDS(tbl, paste(path.r, 'primer.rds', sep='/'));
CreateDatatable(tbl, paste(path.tbl, 'primer.html', sep='/'));
par(mar=c(5, 5, 1, 1));
barplot(num, xlab='Primer length (bp)', ylab='Number of primers',
cex.lab=1.25, xlim=c(-0.5, length(num)+1.5));
abline(h=0);
par(mai=c(1, 0.8, 0.1, 0.1));
col <- c('#21618C', '#D4AC0D', '#B03A2E', '#1E8449');
cex <- min(0.75/max(strwidth(names(seqns), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(pct), col=col, border='lightgrey', space=0, yaxt='n', ylim=c(0, 115),
ylab='Base frequency (%)', cex.lab=1.25, xlim=c(0, nrow(pct)), xaxs='i',
names.arg = names(seqns), cex.names = cex, las=3);
axis(2, at=seq(0, 100, 25), label=seq(0, 100, 25));
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=rev(colnames(pct)));
##################################################################
run.match <- function(s, g, mx, mn, strand) {
m <- vmatchPattern(s, g, max.mismatch = mx, min.mismatch = mn);
c <- rep(names(g), sapply(m, length));
if (length(c) == 0) c <- character();
m <- unlist(m);
m <- data.frame(seqname=c, start=start(m), end=end(m), stringsAsFactors = FALSE);
m$strand <- rep(strand, nrow(m));
m;
};
##################################################################
uni <- lapply(seqns, function(s) { print(s);
if (prms$match$strand==1) {
m <- run.match(s, genom, 0, 0, 1);
} else if (prms$match$strand==1) {
m <- run.match(reverseComplement(s), genom, 0, 0, -1);
} else {
m <- rbind(run.match(s, genom, 0, 0, 1), run.match(reverseComplement(s), genom, 0, 0, -1));
};
});
num <- sapply(uni, nrow);
tfw <- num[num==1];  # Too few matches
tmn <- num[num==1];   # Too many matches
if (length(tfw)==0) lfw <- ' ' else lfw <- paste(' (', paste(names(tfw), collapse=';'), ')', sep='');
if (length(tmn)==0) lmn <- ' ' else lmn <- paste(' (', paste(names(tmn), collapse=';'), ')', sep='');
tbl <- do.call('rbind', uni);
tbl <- cbind(primer=rep(names(uni), num), tbl);
saveRDS(tbl, paste(path.r, 'unique.rds', sep='/'));
CreateDatatable(tbl, paste(path.tbl, 'unique.html', sep='/'));
para.match <- function(x) {
require(Biostrings);
vcountPattern(x[[1]], x[[2]], x[[3]], x[[4]]);
};
if (FALSE) {  #################################### FOR DEBUG ONLY ####################################
seq1 <- seqns[num==1];
cnt <- sapply(1:max(1, max(1, prms$match$mismatch)), function(mis) {
if (prms$match$multicore <= 1) {
sapply(seq1, function(s) { print(s);
# sum(vcountPattern(s, genom, mis, mis)) + sum(vcountPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) sum(vcountPattern(s, genom, mis, mis)) else
if (prms$match$strand == -1) sum(vcountPattern(reverseComplement(s), genom, mis, mis)) else
sum(vcountPattern(s, genom, mis, mis)) + sum(vcountPattern(reverseComplement(s), genom, mis, mis));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
c <- clusterApplyLB(cl, seq1, Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
sapply(c, sum);
} else if (prms$match$strand == -1) {
c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
sapply(c, sum);
} else {
c1 <- clusterApplyLB(cl, seq1, Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
sapply(c1, sum) + sapply(c2, sum);
}
}
});
colnames(cnt) <- paste(1:ncol(cnt), 'mismatch', sep='_');
saveRDS(cnt, paste(path.r, 'mismatch.rds', sep='/'));
CreateDatatable(cnt, paste(path.tbl, 'mismatch.rds', sep='/'));
} else cnt <- readRDS('mismatch_count.rds');
wid3 <- length(seq1)/length(seqns) * wid2;
para.match <- function(x) {
require(Biostrings);
vcountPattern(x[[1]], x[[2]], x[[3]], x[[4]]);
};
seq1 <- seqns[num==1];
if (FALSE) {  #################################### FOR DEBUG ONLY ####################################
cnt <- sapply(1:max(1, max(1, prms$match$mismatch)), function(mis) {
if (prms$match$multicore <= 1) {
sapply(seq1, function(s) { print(s);
# sum(vcountPattern(s, genom, mis, mis)) + sum(vcountPattern(reverseComplement(s), genom, mis, mis));
if (prms$match$strand == 1) sum(vcountPattern(s, genom, mis, mis)) else
if (prms$match$strand == -1) sum(vcountPattern(reverseComplement(s), genom, mis, mis)) else
sum(vcountPattern(s, genom, mis, mis)) + sum(vcountPattern(reverseComplement(s), genom, mis, mis));
});
} else {
cl <- makeCluster(prms$match$multicore, type='SOCK');
if (prms$match$strand == 1) {
c <- clusterApplyLB(cl, seq1, Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
sapply(c, sum);
} else if (prms$match$strand == -1) {
c <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
sapply(c, sum);
} else {
c1 <- clusterApplyLB(cl, seq1, Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
c2 <- clusterApplyLB(cl, reverseComplement(seq1), Biostrings::vcountPattern,
subject=genom, max.mismatch=0, min.mismatch=0);
sapply(c1, sum) + sapply(c2, sum);
}
}
});
colnames(cnt) <- paste(1:ncol(cnt), 'mismatch', sep='_');
saveRDS(cnt, paste(path.r, 'mismatch.rds', sep='/'));
CreateDatatable(cnt, paste(path.tbl, 'mismatch.rds', sep='/'));
} else cnt <- readRDS('mismatch_count.rds');
wid3 <- length(seq1)/length(seqns) * wid2;
out3 <- paste(100*wid3, 'px', sep='');
par(mai=c(1, 0.8, 0.1, 0.1));
# ct1 <- cnt[, ncol(cnt):1, drop=FALSE];
col <- colorpanel(ncol(cnt), '#78281F', '#EC7063');
cex <- min(0.75/max(strwidth(names(seq1), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(cnt[, ncol(cnt):1, drop=FALSE]), col=col, border='lightgrey', space=0,
ylim=c(0, 1.15*max(rowSums(cnt))), ylab='Number of matches', cex.lab=1.25,
xlim=c(0, nrow(cnt)), xaxs='i', names.arg = rownames(cnt), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=1:ncol(cnt));
par(mai=c(1, 0.8, 0.1, 0.1));
# ct1 <- cnt[, ncol(cnt):1, drop=FALSE];
col <- colorpanel(ncol(cnt), '#78281F', '#EC7063');
cex <- min(0.75/max(strwidth(names(seq1), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(cnt[, ncol(cnt):1, drop=FALSE]), col=col, border='lightgrey', space=0.2,
ylim=c(0, 1.15*max(rowSums(cnt))), ylab='Number of matches', cex.lab=1.25,
xlim=c(0, nrow(cnt)), xaxs='i', names.arg = rownames(cnt), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=1:ncol(cnt));
par(mai=c(1, 0.8, 0.1, 0.1));
# ct1 <- cnt[, ncol(cnt):1, drop=FALSE];
col <- colorpanel(ncol(cnt), '#78281F', '#EC7063');
cex <- min(0.75/max(strwidth(names(seq1), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(cnt[, ncol(cnt):1, drop=FALSE]), col=col, border=col, space=0.2,
ylim=c(0, 1.15*max(rowSums(cnt))), ylab='Number of matches', cex.lab=1.25,
xlim=c(0, nrow(cnt)), xaxs='i', names.arg = rownames(cnt), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=1:ncol(cnt));
par(mai=c(1, 0.8, 0.1, 0.1));
# ct1 <- cnt[, ncol(cnt):1, drop=FALSE];
col <- colorpanel(ncol(cnt), '#78281F', '#EC7063');
cex <- min(0.75/max(strwidth(names(seq1), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(cnt[, ncol(cnt):1, drop=FALSE]), col=col, border=NA, space=0.2,
ylim=c(0, 1.15*max(rowSums(cnt))), ylab='Number of matches', cex.lab=1.25,
xlim=c(0, nrow(cnt)), xaxs='i', names.arg = rownames(cnt), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=1:ncol(cnt));
par(mai=c(1, 0.8, 0.1, 0.1));
# ct1 <- cnt[, ncol(cnt):1, drop=FALSE];
col <- colorpanel(ncol(cnt), '#78281F', '#F5B7B1');
cex <- min(0.75/max(strwidth(names(seq1), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(cnt[, ncol(cnt):1, drop=FALSE]), col=col, border=NA, space=0.2,
ylim=c(0, 1.15*max(rowSums(cnt))), ylab='Number of matches', cex.lab=1.25,
xlim=c(0, nrow(cnt)), xaxs='i', names.arg = rownames(cnt), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=1:ncol(cnt));
abline(h=0);
par(mai=c(1, 0.8, 0.1, 0.1));
# ct1 <- cnt[, ncol(cnt):1, drop=FALSE];
col <- colorpanel(ncol(cnt), '#78281F', '#FADBD8');
cex <- min(0.75/max(strwidth(names(seq1), units='inches')), 0.08/max(strheight('a', units='inches')));
barplot(t(cnt[, ncol(cnt):1, drop=FALSE]), col=col, border=NA, space=0.2,
ylim=c(0, 1.15*max(rowSums(cnt))), ylab='Number of matches', cex.lab=1.25,
xlim=c(0, nrow(cnt)), xaxs='i', names.arg = rownames(cnt), cex.names = cex, las=3);
legend('topright', bty='n', pch=15, col=rev(col), horiz=TRUE, legend=1:ncol(cnt));
abline(h=0);
?makeCluster
?clusterApplyLB
prms$match$multicore
prms$match$multicore<-4
length(seq1)
num
uni
seqns['RHD_32_O301']
25364864-25326563
seqns
dir()
setwd('~/Documents/RoCA/template/rh/evaluate_primer/')
dir9)
dir()
rh <- readRDS('rh_primer.rds')
rh <- readRDS('rh_primer_chr1.rds')
rh
head(rh)
x <- split(rh, rh$Gene)
names(x)
y <- x[[2]]
z <- x[[3]]
y
head(y)
a <- DNAStringSet(y[,2])
b <- DNAStringSet(z[, 2])
a
b
intersect(y$Sequence, z$Sequence)
intersect(y$Sequence, reverseComplement(z$Sequence))
intersect(y$Sequence, as.character(reverseComplement(DNAStringSet(z$Sequence))))
seqns <- DNAStringSet(z[, 1])
y
head(y)
seqns <- DNAStringSet(y[, 2])
##################################################################
run.match <- function(s, g, mx, mn, strand) {
m <- vmatchPattern(s, g, max.mismatch = mx, min.mismatch = mn);
c <- rep(names(g), sapply(m, length));
if (length(c) == 0) c <- character();
m <- unlist(m);
m <- data.frame(seqname=c, start=start(m), end=end(m), stringsAsFactors = FALSE);
m$strand <- rep(strand, nrow(m));
m;
};
##################################################################
uni <- lapply(seqns, function(s) { print(s);
if (prms$match$strand==1) {
m <- run.match(s, genom, 0, 0, 1);
} else if (prms$match$strand==1) {
m <- run.match(reverseComplement(s), genom, 0, 0, -1);
} else {
m <- rbind(run.match(s, genom, 0, 0, 1), run.match(reverseComplement(s), genom, 0, 0, -1));
};
});
num <- sapply(uni, nrow);
tfw <- num[num==1];  # Too few matches
tmn <- num[num==1];   # Too many matches
if (length(tfw)==0) lfw <- ' ' else lfw <- paste(' (', paste(names(tfw), collapse=';'), ')', sep='');
if (length(tmn)==0) lmn <- ' ' else lmn <- paste(' (', paste(names(tmn), collapse=';'), ')', sep='');
tbl <- do.call('rbind', uni);
tbl <- cbind(primer=rep(names(uni), num), tbl);
num
uni
