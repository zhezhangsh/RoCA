if (class(n)!='matrix') n<-matrix(n, nc=length(op));
rownames(n)<-cigar;
colnames(n)<-op;
n;
}
x<-c('50M', '50M')
x
SplitCigar(x)->a
a
a[1,1]
op=c('M', 'S', 'H', 'I', 'D')
cigar<-x
require(GenomicAlignments);
require(S4Vectors);
lst<-cigarToRleList(cigar);
val<-runValue(lst);
len<-runLength(lst);
ele<-elementLengths(len);
val<-BiocGenerics::unlist(val, use.names=FALSE);
len<-BiocGenerics::unlist(len, use.names=FALSE);
ind<-rep(1:length(ele), ele);
v<-rep(0, length(cigar));
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
v;
});
n
n[1,1]
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
n
n1[1,]
n[1,1]
o<-op[1]
i<-which(val==o);
i
s<-sapply(split(len[i], ind[i]), sum);
s
v[as.integer(names(s))]<-s;
v
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
class(n)
n[1,1]
n[1, ]
val
len
v
n<-lapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
as.vector(v);
});
n
n[[1]]
n[[2]]
o<-op[2]
o
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
v[as.integer(names(s))]<-s;
s
v
v<-rep(0, length(cigar));
v
s
length(s)
v<-rep(0, length(cigar));
n<-lapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
if (length(s)>0) v[as.integer(names(s))]<-s;
v
});
n
n<-sapply(op, function(o) {
i<-which(val==o);
s<-sapply(split(len[i], ind[i]), sum);
if (length(s)>0) v[as.integer(names(s))]<-s;
v
});
n
n[1,1]
n[1, ]
n[2, ]
class(n)
n[, 1]
i
devtools::install_github("zhezhangsh/DEGandMore");
devtools::install_github("zhezhangsh/RoCA");
devtools::install_github("zhezhangsh/RoCA");
devtools::install_github("zhezhangsh/CHOPseq");
devtools::install_github("zhezhangsh/CHOPseq");
devtools::install_github("zhezhangsh/Rnaseq");
devtools::install_github("zhezhangsh/awsomics");
devtools::install_github("zhezhangsh/rchive");
devtools::install_github("zhezhangsh/GtUtility");
library(RoCA)
CreateReport('~/Desktop/sample_normal.yml')
download.file('https://raw.githubusercontent.com/zhezhangsh/RoCA/master/template/demo/sample_normal/sample_normal.yml', 'sample_normal.yml')
dir()
RoCA::CreateReport('sample_normal.yml')
RoCA::CreateReport('sample_normal.yml')
if (is.null(names(exon))) names(exon)<-1:length(exon);
prop.test(0, 1700, 0.002)
relist
?relist
rm(list=ls())
ls()
.libPaths()
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
InstallDependency()
InstallDependency
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
InstallDependency
detach("package:RoCA", unload=TRUE)
InstallDependency(TRUE)
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
InstallDependency(TRUE)
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
v
version
version->v
class(v)
names(v)
v$major
?version
cat('Running ', version$version.string, '. Required version: 3.2.2\n');
setwd('~/Desktop/')
dir.create('test')
setwd('test')
path<-getwd()
# Create folder and default subfolders for output files
# Use this function to create default subfolers. Different templates could create their own.
CreateFolder<-function(path, subfolder=c('input', 'R', 'figure', 'table')) {
# path      Home folder of all output files
# subfoler  Subfolder to be created
f<-c(path, paste(path, subfolder, sep='/'));
sapply(f, function(f) if (!dir.exists(f)) dir.create(f, recursive = TRUE))->x;
f
}
f <- CreateFolder(getwd())
f
file.exists(f)
?assign
assign(paste(path, c('', '.input', '.r', '.fig', '.tbl'), sep=''), f)
paste(path, c("", ".input", ".r", ".fig", ".tbl"), sep = "")
f
CreateFolder<-function(path, subfolder=c('input', 'R', 'figure', 'table')) {
# path      Home folder of all output files
# subfoler  Subfolder to be created
f<-c(path, paste(path, subfolder, sep='/'));
sapply(f, function(f) if (!dir.exists(f)) dir.create(f, recursive = TRUE))->x;
names(f)<-c('path', paste(path, subfolder, sep='\\.'));
f;
}
rm(list=ls())
CreateFolder<-function(path, subfolder=c('input', 'R', 'figure', 'table')) {
# path      Home folder of all output files
# subfoler  Subfolder to be created
f<-c(path, paste(path, subfolder, sep='/'));
sapply(f, function(f) if (!dir.exists(f)) dir.create(f, recursive = TRUE))->x;
names(f)<-c('path', paste(path, subfolder, sep='\\.'));
f;
}
f <- CreateFolder(getwd())
f
CreateFolder<-function(path, subfolder=c('input', 'R', 'figure', 'table')) {
# path      Home folder of all output files
# subfoler  Subfolder to be created
f<-c(path, paste(path, subfolder, sep='/'));
sapply(f, function(f) if (!dir.exists(f)) dir.create(f, recursive = TRUE))->x;
names(f)<-c('path', paste('path', subfolder, sep='\\.'));
f;
}
f <- CreateFolder(getwd())
f
# Create folder and default subfolders for output files
# Use this function to create default subfolers. Different templates could create their own.
CreateFolder<-function(path, subfolder=c('input', 'R', 'figure', 'table')) {
# path      Home folder of all output files
# subfoler  Subfolder to be created
f<-c(path, paste(path, subfolder, sep='/'));
sapply(f, function(f) if (!dir.exists(f)) dir.create(f, recursive = TRUE))->x;
names(f)<-c('path', paste('path', subfolder, sep='.'));
f;
}
f <- CreateFolder(getwd())
f
sapply(names(f) function(nm) assign(nm, f[nm]))
for (i in 1:length(f)) assign(names(f)[i], f[i])
ls()
args(devtools::install_github)
devtools::install_github("zhezhangsh/RoCA", subdir = 'R'); # Install the RoCA package itself from GitHub
library(RoCA)
dir()
getwd()
f <- GenerateFolder(getwd())
f
f <- GenerateFolder(yml$output);
path <- f['path'];
path.r <- f['path.R'];
path.r
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
setwd('~/Desktop/RoCA/template/demo')
setwd('plot_heat/')
ls
dir()
CreateReport('plot_heat.yaml')
CreateReport('plot_heat.yaml')
args(read.csv)
args(read.delim)
args(read.delim2)
library(rjson)
?fromJSON
#watch out for R turning null into FALSE
fromJSON( "[true, false, null]" )
##[1]  TRUE FALSE __FALSE__
#but if you use a hash, this will be avoided
fromJSON( '{"a":true, "b":false, "c":null}' )
args('read.delim2')
args(read.table)
args(read.csv)
args(read.csv2)
args(read.delim2)
args(read.csv2)
?read.csv2
sewtd('~/Desktop/test/')
setwd('~/Desktop/test')
dir()
setwd()
setwd('input/')
dir()
setwd('../R')
dir()
read.delim2('ex.txt')->x
dim(x)
x[1:2, ]
dim(x)
write.table(x[1:100, ], 'ex.txt', sep='\t', qu=F, row=T, col=TRUE)
x<- read.delim2('ex.txt', header=T, row.names = 1)
dim(x)
x<- read.delim2('ex.txt', header=T, row.names = FALSE)
x<- read.delim2('ex.txt', header=T, row.names = 0)
dim(x)
x<- read.delim2('ex.txt', header=FALSE)
dim(x)
x[1,1]
x[1, 2]
x[2, 2]
x<- read.delim2('ex.txt', header=TRUE)
dim(x)
x[1,1]
dim(x)
x[1:2, ]
x[1,1]
x<- read.delim2('ex.txt', stringsAsFactors = FALSE)
x[1,1]
write.csv2(x[1:100, ], 'ex.csv')
a<- read.csv('ex.csv')
dim(a)
a[1, ]
a<- read.csv('ex.csv', sep=';')
dim(a)
a[1:2, ]
a<- read.csv('ex.csv', sep=';', row.names = 1)
dim(a)
a[1,1]
a[1, 3]
args(write.csv)
args(write.csv2)
?write.csv
a<- read.csv('ex.csv', sep=';')
dim(a)
a<- read.csv('ex.csv', sep=';')
dim(a)
a[1,1]
a[1,2]
?read.csv
b<-read.delim2('ex.csv')
dim(b)
b[1, ]
write.csv(x[1:100, ], 'ex.csv')
a<- read.csv('ex.csv')
dim(a)
a[1, ]
a<- read.csv('ex.csv', sep=NA)
a<- read.csv('ex.csv', row.names = 1)
dim(a)
a<- read.csv('ex.csv')
a[1,1]
fn<-paste(getwd(), 'ex.txt', sep='/')
fn
ext <- rev(strsplit(fn, '/')[[1]])[1]
ext
ext <- rev(strsplit(fn, '\\.')[[1]])[1]
ext
a<-read.table('ex.txt', header=TRUE, row.names = 0)
a<-read.table('ex.txt', header=TRUE, row.names = -1)
a<-read.table('ex.txt', header=TRUE, row.names = -1)
a<-read.table('ex.txt', header=TRUE, row.names = NA)
a<-read.csv('ex.txt', header=TRUE, row.names = NA)
a<-read.csv('ex.txt', header=TRUE, row.names = 1)
dim(a)
a<-read.csv('ex.csv', header=TRUE, row.names = 1)
dim(a)
fn<-'ex.csv'
d <- read.csv(fn, sep=sep, header=colnames, row.names=1, stringsAsFactors=FALSE)
sep<-','
d <- read.csv(fn, sep=sep, header=colnames, row.names=1, stringsAsFactors=FALSE)
colnames<-TRUE
d <- read.csv(fn, sep=sep, header=colnames, row.names=1, stringsAsFactors=FALSE)
dim(d)
d[1:2, ]
d[1,1]
d <- read.csv(fn, sep=sep, header=colnames, stringsAsFactors=FALSE);
dim(d)
d[1,1]
d[10, 1]
library(readxl)
install.packages('readxl')
library(devtools)
install_url('https://cran.r-project.org/src/contrib/readxl_0.1.1.tar.gz')
library(readxl)
dir()
library(readxl)
df <- read_excel('ex.xlsx')
dim(df)
df[1, 1]
df[1, 2]
df[, 2]
args(read_excel)
dir()
d <- read_excel(fn, col_names=colnames);
fn<-ex.xlsx
fn<-'ex.xlsx'
fn
d <- read_excel(fn, col_names=colnames);
dim(d)
head(d)
d[1, ]
class(d)
as.data.frame(d)->d
dim(d)
class(d)
d[1,1]
d[1, 3]
d <- as.data.frame(read_excel(fn, col_names=colnames));
args(readHTMLTable)
?readHTMLTable
library(XML)
?readHTMLTable
fn<-'index.html'
t<-readHTMLTable(fn)
t
t<-t[[1]]
dim(t)
t[1,1]
t[1, 2]
t<-t[[1]]
dim(t)
class(t)
t<-readHTMLTable(fn)
t<-t[[1]]
dim(t)
write.table(t)
read.table(write.table(t, sep='\t', qu=F, row=T, col=T), sep='\t', row=1, head=T)
read.table(write.table(t, sep='\t', qu=F, row=T, col=T), sep='\t', row=1, head=T)->x
x
dim(x)
read.table(writeLines(t, sep='\t', qu=F, row=T, col=T), sep='\t', row=1, head=T)->x
library(httr)
urldata <- GET(fn)
install_url('https://cran.r-project.org/src/contrib/XML_3.98-1.4.tar.gz')
?readHTMLTable
?readHTMLTable
args(readHTMLTable)
ind<-1
d0 <- readHTMLTable(fn, header=colnames, which=ind);
length(d0)
dim(d0)
d0
# Import a table-like data object saved within a file in one of various supported formats
# The format of the data will be determined based on the file name extension
ImportTable<-function(fn, rownames=TRUE, colnames=TRUE, sep=NA, ind=1, warn=TRUE) {
# fn          Name of the file to be imported
# rownames    For text file to be imported, whether the first column has the row names
# colnames    For text file to be imported, whether the first row has the column names
# sep         For text file to be imported, what's separator. Use function defaul if NA
# ind         For file formats such as Excel and HTML, the index of table to be imported
# warn        Print a warning message if file format not recognaize; stop with error otherwise
ext <- tolower(rev(strsplit(fn, '\\.')[[1]])[1]);
if (ext == 'rds') {
d <- readRDS(fn);
} else if (ext == 'rdata' | ext == 'rda') {
d <- eval(parse(text = load(fn)));
} else if (ext == 'txt' | ext == 'tab') {
if (is.na(sep[1])) sep <- '\t' else sep <- sep[1];
if (rownames) d <- read.table(fn, sep=sep, header=colnames, row.names=1, stringsAsFactors=FALSE) else
d <- read.table(fn, sep=sep, header=colnames, stringsAsFactors=FALSE);
} else if (ext == 'csv') {
if (is.na(sep[1])) sep <- ',' else sep <- sep[1];
if (rownames) d <- read.csv(fn, sep=sep, header=colnames, row.names=1, stringsAsFactors=FALSE) else
d <- read.csv(fn, sep=sep, header=colnames, stringsAsFactors=FALSE);
} else if (ext == 'xlsx' | ext == 'xls') {
require('readxl');
d <- as.data.frame(read_excel(fn, col_names=colnames, sheet=ind));
if (rownames) {
rownames(d) <- d[[1]];
d <- d[, -1];
}
} else if (ext == 'html' | ext == 'htm') {
require(XML);
d0 <- readHTMLTable(fn, header=colnames, which=ind);
fn.tmp <- 'html_import_tmp.txt';
write.table(d0, fn.tmp, sep='\t', row.names = rownames, col.names = colnames, quote = FALSE);
d <- ImportTable(fn.tmp, rownames = rownames, colnames = colnames);
file.remove(fn.tmp);
} else if (ext == 'xml') {
require(XML);
}
else {
if (warn) {
warning('Unknown data format: ', ext, '\n');
d <- NA;
} else stop('Error: file extension of "', fn, '" not recognized\n');
}
d;
}
require(XML);
d0 <- readHTMLTable(fn, header=colnames, which=ind);
fn.tmp <- 'html_import_tmp.txt';
write.table(d0, fn.tmp, sep='\t', row.names = rownames, col.names = colnames, quote = FALSE);
d <- ImportTable(fn.tmp, rownames = rownames, colnames = colnames);
rownames
rownames=TRUE
colnames=TRUE
require(XML);
d0 <- readHTMLTable(fn, header=colnames, which=ind);
fn.tmp <- 'html_import_tmp.txt';
write.table(d0, fn.tmp, sep='\t', row.names = rownames, col.names = colnames, quote = FALSE);
d <- ImportTable(fn.tmp, rownames = rownames, colnames = colnames);
dim(d)
d
d[1,1]
d[1, 4]
dir()
d0 <- readHTMLTable(fn, header=colnames, which=ind);
fn.tmp <- 'html_import_tmp.txt';  # for reading numeric columns properly
write.table(d0, fn.tmp, sep='\t', row.names = FALSE, col.names = colnames, quote = FALSE);
d <- ImportTable(fn.tmp, rownames = rownames, colnames = colnames);
dim(d)
d[1:2, ]
d
d[1, 4]
file.remove(fn.tmp);
boxplot
plot
namespace:graphics::plot
graphics::plot
0x103c82470
x<-function() {1:10}
x()
x<-function() {invisible(1:10)}
x()
a<-x()
a
args(rmarkdown::render)
?rmarkdown::render
setwd('~/Desktop/RoCA/template/demo')
dir()
setwd('plot_heat/')
dir()
x<- CreateReport('plot_heat.yaml')
x
setwd('../sample_normal/')
CreateReport('sample_normal.yaml')
CreateReport('sample_normal.yaml')
CreateReport('sample_normal.yaml')
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
CreateReport('sample_normal.yaml')
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
CreateReport('sample_normal.yaml')
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
CreateReport('sample_normal.yaml')
CreateReport('sample_normal.yaml')
devtools::install_github("zhezhangsh/RoCA/R"); # Install the RoCA package itself from GitHub
detach("package:RoCA", unload=TRUE)
library("RoCA", lib.loc="~/Library/R/3.2/library")
CreateReport('sample_normal.yaml')
?read.csv
?read_excel
